{"segments": {"content.abstract": "<p><a href=\"http://lcamtuf.coredump.cx/afl/\">afl</a> is a fuzzer, an application that combines a series of algorithms\nin order to try invoking programs with several different input values. It then analyses the application\nexecution flow given different test case scenarios. \nYou can read more about fuzzing at <a href=\"https://www.owasp.org/index.php/Fuzzing\">this OWASP page</a>, or in other\nblogs that I also used while learning about afl\n<a href=\"/2016/02/27/using-afl-to-test-mapserver%231\">1</a>\n<a href=\"/2016/02/27/using-afl-to-test-mapserver%232\">2</a></p>\n<p>At work we are using MapServer for serving WFS and WMS. And I am using it for the\n<a href=\"http://maps.nzoss.org.nz\">NZ OpenStreetMap maps</a> too. MapServer is written in C++ and is normally\nexposed as a CGI script, so I thought it was worth learning about afl and trying it on MapServer,\nas in case it finds any interesting bug I can submit it to the MapServer project.</p>\n", "content": "<p><a href=\"http://lcamtuf.coredump.cx/afl/\">afl</a> is a fuzzer, an application that combines a series of algorithms\nin order to try invoking programs with several different input values. It then analyses the application\nexecution flow given different test case scenarios. \nYou can read more about fuzzing at <a href=\"https://www.owasp.org/index.php/Fuzzing\">this OWASP page</a>, or in other\nblogs that I also used while learning about afl\n<a href=\"/2016/02/27/using-afl-to-test-mapserver%231\">1</a>\n<a href=\"/2016/02/27/using-afl-to-test-mapserver%232\">2</a></p>\n<p>At work we are using MapServer for serving WFS and WMS. And I am using it for the\n<a href=\"http://maps.nzoss.org.nz\">NZ OpenStreetMap maps</a> too. MapServer is written in C++ and is normally\nexposed as a CGI script, so I thought it was worth learning about afl and trying it on MapServer,\nas in case it finds any interesting bug I can submit it to the MapServer project.</p>\n<!--more-->\n\n<h2>Download and build MapServer source code</h2>\n<p>MapServer code is hosted on <a href=\"https://github.com/mapserver/mapserver\">GitHub</a> and once you have cloned it a look\nat the Travis CI configuration file will give you some hints on which dependencies you must have\ninstalled on your operating system in order to build it. I will omit the steps to make this post shorter.</p>\n<p>Once you have successfully built mapserv binary you will need to remove the generated files, and execute\nCMake again but now using afl&#8217;s compiler. This way the application will be instrumented and afl can\nanalyse its execution flow.</p>\n<p>You can do that by exporting these two variables before running CMake.</p>\n<div class=\"highlight\"><pre><span class=\"nb\">export </span><span class=\"nv\">CXX</span><span class=\"o\">=</span>/opt/afl-2.05b/afl-g++\n<span class=\"nb\">export </span><span class=\"nv\">CC</span><span class=\"o\">=</span>/opt/afl-2.05b/afl-gcc\n</pre></div>\n\n<p>After this you can run CMake and GNU make again. That should create a binary instrumented mapserv,\nthat can be tested with afl.</p>\n<div class=\"highlight\"><pre><span class=\"nb\">cd</span> /home/kinow/Development/cpp/workspace/mapserver/\nmkdir build <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">cd </span>build\ncmake ..\nmake\n./mapserv -v\n</pre></div>\n\n<h2>Creating a shapefile mapfile</h2>\n<p>The easiest way to test MapServer locally, without Postgres or Postgis, is probably by\ncreating a single layer mapfile. LINZ provides shapefiles for New Zealand\n(<a href=\"https://data.linz.govt.nz/layer/1153-nz-coastlines-and-islands-polygons-topo-150k/\">here&#8217;s an example</a>)\nthat I used for this experiment.</p>\n<div class='row'>\n<div class=\"span6 offset3\" style='text-align: center;'>\n<figure>\n<a href=\"/2016/02/27/learning-afl-and-testing-mapserver/qgis_settings.png\" rel=\"prettyPhoto\" class=\"thumbnail\" title=\"QGIS Bounding Area settings\">\n<img class=\"span12\" src=\"/2016/02/27/learning-afl-and-testing-mapserver/qgis_settings.png\" alt=\"QGIS Bounding Area settings\" />\n</a>\n<figcaption>QGIS Bounding Area settings</i></figcaption>\n</figure>\n</div>\n</div>\n\n<p>I used <a href=\"http://www.qgis.org/en/site/\">QGIS</a> to load the shapefile, take a look at the map,\nand get the bounding area and projection. Here&#8217;s the final mapfile.</p>\n<div class=\"highlight\"><pre>MAP\n  IMAGETYPE      JPEG\n  EXTENT         -97.238976 41.619778 -82.122902 49.385620\n  SIZE           <span class=\"m\">400</span> 300\n  SHAPEPATH      <span class=\"s2\">&quot;/home/kinow/Downloads/linz-shp&quot;</span>\n  IMAGECOLOR     <span class=\"m\">255</span> <span class=\"m\">255</span> 255\n\n  WEB\n    METADATA\n      <span class=\"s2\">&quot;wms_title&quot;</span>           <span class=\"s2\">&quot;WMS Fake Server&quot;</span>\n      <span class=\"s2\">&quot;wms_onlineresource&quot;</span>  <span class=\"s2\">&quot;http://127.0.0.1/cgi-bin/mapserv?map=wms.map&amp;&quot;</span>\n      <span class=\"s2\">&quot;wms_srs&quot;</span>             <span class=\"s2\">&quot;EPSG:4167&quot;</span>\n      <span class=\"s2\">&quot;wms_enable_request&quot;</span>  <span class=\"s2\">&quot;*&quot;</span>\n    END\n  END\n\n  PROJECTION\n    <span class=\"s2\">&quot;init=epsg:4167&quot;</span>\n  END\n\n  LAYER <span class=\"c\"># States polygon layer begins here</span>\n    NAME         nz-coastlines-and-islands-polygons-topo-150k\n    DATA         nz-coastlines-and-islands-polygons-topo-150k\n    STATUS       OFF\n    TYPE         POLYGON\n\n    CLASS\n      NAME       <span class=\"s2\">&quot;NZ Topo LINZ map&quot;</span>\n\n      STYLE\n        COLOR        <span class=\"m\">232</span> <span class=\"m\">232</span> 232\n        OUTLINECOLOR <span class=\"m\">32</span> <span class=\"m\">32</span> 32\n      END\n    END\n  END\nEND\n</pre></div>\n\n<p>Then you can finally execute MapServer binary program and output to a local image file.</p>\n<div class=\"highlight\"><pre><span class=\"nb\">export </span><span class=\"nv\">MS_ERRORFILE</span><span class=\"o\">=</span><span class=\"s2\">&quot;stderr&quot;</span>\n<span class=\"nb\">export </span><span class=\"nv\">MS_MAPFILE</span><span class=\"o\">=</span>/home/kinow/Development/cpp/workspace/mapserver/nztopo1.map\n\n./mapserv -nh <span class=\"nv\">QUERY_STRING</span><span class=\"o\">=</span><span class=\"s2\">&quot;VERSION=1.1.0&amp;REQUEST=GetMap&amp;LAYERS=nz-coastlines-and-islands-polygons-topo-150k&amp;SRS=EPSG:4167&amp;SERVICE=WMS&amp;TEMPLATE=OpenLayers&amp;BBOX=165.869,-52.6209,183.846,-29.2313&amp;FORMAT=image/jpeg&amp;HEIGHT=800&amp;WIDTH=800&quot;</span> 2&gt;/dev/null &gt; /tmp/nzmap.jpg\n</pre></div>\n\n<h2>Running afl</h2>\n<p>I decided to use a RAM disk while running afl as suggested\n<a href=\"http://www.cipherdyne.org/blog/2014/12/ram-disks-and-saving-your-ssd-from-afl-fuzzing.html\">in this blog post</a>\nto avoid a lot of writes in my SSD disk. Then moved MapServer there and fired afl.</p>\n<div class=\"highlight\"><pre><span class=\"nb\">cd</span> /tmp/afl-ramdisk/mapserver\nmkdir fuzz-input fuzz-output\n\n/opt/afl-2.05b/afl-fuzz -m <span class=\"m\">500</span> -i fuzz-input/ -o fuzz-output/ -t <span class=\"m\">2000</span> ./mapserv <span class=\"nv\">QUERY_STRING</span><span class=\"o\">=</span><span class=\"s2\">&quot;VERSION=1.1.0&amp;REQUEST=GetMap&amp;LAYERS=nz-coastlines-and-islands-polygons-topo-150k&amp;SRS=EPSG:4167&amp;SERVICE=WMS&amp;TEMPLATE=OpenLayers&amp;BBOX=165.869,-52.6209,183.846,-29.2313&amp;FORMAT=image/jpeg&amp;HEIGHT=800&amp;WIDTH=800&quot;</span>\n</pre></div>\n\n<div class='row'>\n<div class=\"span6 offset3\" style='text-align: center;'>\n<figure>\n<a href=\"/2016/02/27/learning-afl-and-testing-mapserver/afl_testing_mapserver.png\" rel=\"prettyPhoto\" class=\"thumbnail\" title=\"afl testing MapServer\">\n<img class=\"span12\" src=\"/2016/02/27/learning-afl-and-testing-mapserver/afl_testing_mapserver.png\" alt=\"afl testing MapServer\" />\n</a>\n<figcaption>afl testing MapServer</figcaption>\n</figure>\n</div>\n</div>\n\n<p>However, it is not mutating the program input as I didn&#8217;t use &#8220;@@&#8221; nor a dictionary. When you use @@, afl will replace\nit by the location of a file that it generated. Or by using &#8220;-x&#8221; you can provide a dictionary used to generate\nvariations of parameters.</p>\n<p>During the next days I will give it another go at work, and will investigate how to test MapServer without having to write\na wrapper in Shell or C/C++. You can still test other programs that are shipped with MapServer though.</p>\n<div class=\"highlight\"><pre><span class=\"nb\">cd</span> /tmp/afl-ramdisk/mapserver\n\n/opt/afl-2.05b/afl-fuzz -m <span class=\"m\">512</span> -i fuzz-input -o fuzz-output -f /tmp/afl-ramdisk/input ./shp2img -m @@ -l nz-coastlines-and-islands-polygons-topo-150k -i image/jpeg -o /tmp/afl-ramdisk/nzmap.jpg -e 165.869 -52.6209 183.846 -29.2313\n</pre></div>\n\n<p>I hope it helps you get started with afl in case you are learning about it too :-) Happy hacking!</p>\n<p><br/>\n<br/>\n<sup><a name=\"1\">1</a> \n<a href=\"https://fuzzing-project.org/tutorial3.html\">\nhttps://fuzzing-project.org/tutorial3.html</a></sup></p>\n<p><sup><a name=\"2\">2</a> \n<a href=\"https://www.nettitude.co.uk/fuzzing-with-american-fuzzy-lop-afl/\">\nhttps://www.nettitude.co.uk/fuzzing-with-american-fuzzy-lop-afl/</a></sup></p>"}, "pass_info": {"used_taxonomy_terms": [], "used_pagination": false, "pagination_has_more": false, "used_assets": true, "used_source_names": []}}