{"segments": {"content.abstract": "<p>I&#8217;m preparing a <em>plug-in API proposal for <a href=\"http://www.teamst.org\" title=\"TestLink\">TestLink</a></em>, and thought that the best way to learn how to write a good plug-in API would be by looking at other application&#8217;s plug-in API&#8217;s.</p>\n\n<p style=\"text-align: center\"><img src=\"/2012/10/25/a-quick-view-on-wordpress-mantis-and-jenkins-plug-in-api/testlink_logo_2.jpg \" alt=\"\" title=\"TestLink\" width=\"283\" height=\"170\" class=\"aligncenter size-full wp-image-1153\" /></p>\n\n<p>This post contains information that I gathered for creating this new API, but that may also be useful for other programmers. I used <a href=\"#wp\">Wordpress</a>, <a href=\"#mantis\">Mantis</a> and <a href=\"#jenkins\">Jenkins</a> in this study. Let me know if you find any mistakes or if you have any other suggestions.</p>\n\n", "content": "<p>I&#8217;m preparing a <em>plug-in API proposal for <a href=\"http://www.teamst.org\" title=\"TestLink\">TestLink</a></em>, and thought that the best way to learn how to write a good plug-in API would be by looking at other application&#8217;s plug-in API&#8217;s.</p>\n\n<p style=\"text-align: center\"><img src=\"/2012/10/25/a-quick-view-on-wordpress-mantis-and-jenkins-plug-in-api/testlink_logo_2.jpg \" alt=\"\" title=\"TestLink\" width=\"283\" height=\"170\" class=\"aligncenter size-full wp-image-1153\" /></p>\n\n<p>This post contains information that I gathered for creating this new API, but that may also be useful for other programmers. I used <a href=\"#wp\">Wordpress</a>, <a href=\"#mantis\">Mantis</a> and <a href=\"#jenkins\">Jenkins</a> in this study. Let me know if you find any mistakes or if you have any other suggestions.</p>\n\n<!--more-->\n\n<hr />\n\n<h3><a name=\"wp\">Wordpress</a></h3>\n\n<p><a href=\"http://www.wordpress.org\" title=\"http://www.wordpress.org\">http://www.wordpress.org</a></p>\n\n<p style=\"text-align: center\"><img src=\"/2012/10/25/a-quick-view-on-wordpress-mantis-and-jenkins-plug-in-api/wordpress_logo_notext_rgb_300_300.png\" alt=\"\" title=\"Wordpress\" width=\"200\" height=\"200\" class=\"aligncenter size-medium wp-image-1156\" /></p>\n\n<ul>\n    <li>Supported programming languages: PHP</li>\n    <li>Configurations available for plug-ins: Yes</li>\n    <li>Plug-in packages: Yes (zip)</li>\n    <li>Extension points : Action and Filter hooks, and pluggable functions.</li>\n</ul>\n\n<h4>Plug-ins installation</h4>\n\n<p>Wordpress has a directory for plug-ins, by default it is <em>$WP_HOME/wp-content/plugins</em>. You can copy the plug-in PHP file, or its directory, or even a zip file to the Wordpress plug-ins folder. Should you copy a zip file, Wordpress decompresses the file for you.</p>\n\n<p>In the Wordpress administration interface you can download and install plug-ins, as well as active, deactivate or uninstall plug-ins. There you can manage plug-in updates, as well as see if the plug-in version is compatible with the current version of Wordpress (users can vote).</p>\n\n<h4>Plug-ins API</h4>\n\n<p>You can get a list of plug-ins in the admin screen of Wordpress. Wordpress can tell whether a plug-in is installed or not, activated or not, using data from database. For each plug-in, Wordpress scans its directory (or include directly a PHP file, if present in the plug-ins folder) and searches for PHP files. What Wordpress is actually looking for, are PHP files that contain comments with information about the plug-in such as name, version, author, etc.</p>\n\n<p>Wordpress provides two hook types, action and filter. The <strong>action hook</strong> is used to execute some action when an event occurs. For instance, you can add an action for when the plug-in is activated.</p>\n\n<div class=\"highlight\"><pre><span class=\"x\">class MyPlugin {</span>\n<span class=\"x\">     static function install() {</span>\n<span class=\"x\">            // do not generate any output here</span>\n<span class=\"x\">     }</span>\n<span class=\"x\">}</span>\n<span class=\"x\">register_activation_hook( __FILE__, array(&#39;MyPlugin&#39;, &#39;install&#39;) );</span>\n</pre></div>\n\n<p>And the <strong>filter hook</strong> is used to modify content. For instance, you could want to modify the title of a post, so you could apply a filter on the function that displays the blog title. This filter could, say, upper case the title.</p>\n\n<div class=\"highlight\"><pre><span class=\"cp\">&lt;?php</span>\n<span class=\"k\">function</span> <span class=\"nf\">theme_slug_filter_the_content</span><span class=\"p\">(</span> <span class=\"nv\">$content</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nv\">$custom_content</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;YOUR CONTENT GOES HERE&#39;</span><span class=\"p\">;</span>\n    <span class=\"nv\">$custom_content</span> <span class=\"o\">.=</span> <span class=\"nv\">$content</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"nv\">$custom_content</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"nx\">add_filter</span><span class=\"p\">(</span> <span class=\"s1\">&#39;the_content&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;theme_slug_filter_the_content&#39;</span> <span class=\"p\">);</span>\n<span class=\"cp\">?&gt;</span><span class=\"x\"></span>\n</pre></div>\n\n<p>There is also the possibility to use <strong>pluggable functions</strong>. With them themes and plug-ins can define functions to be overriden by themes (or child themes) and plug-ins.</p>\n\n<div class=\"highlight\"><pre><span class=\"x\">if ( !function_exists( &#39;mytheme_nav_menu&#39; ) ) :</span>\n<span class=\"x\">function mytheme_nav_menu() {</span>\n<span class=\"x\">    if ( current_theme_supports( &#39;menus&#39; ) ) :</span>\n<span class=\"x\">        wp_nav_menu( array( &#39;theme_location&#39; =&gt; &#39;primary_nav&#39;, &#39;fallback_cb&#39; =&gt; &#39;wp_list_pages&#39; ) );</span>\n<span class=\"x\">    else :</span>\n<span class=\"x\">        wp_list_pages();</span>\n<span class=\"x\">    endif;</span>\n<span class=\"x\">}</span>\n<span class=\"x\">endif;</span>\n</pre></div>\n\n<h4>Plug-ins configuration</h4>\n\n<p>Plug-in can create tables or use the configurations table in Wordpress. It&#8217;s also possible to create an admin page to modify these configuration from Wordpress administration section.</p>\n\n<hr />\n\n<h3><a name=\"mantis\">Mantis</a></h3>\n\n<p><a href=\"http://www.mantisbt.org/\" title=\"http://www.mantisbt.org\">http://www.mantisbt.org/</a></p>\n\n<p style=\"text-align: center\"><img src=\"/2012/10/25/a-quick-view-on-wordpress-mantis-and-jenkins-plug-in-api/Mantis_logo.gif\" alt=\"\" title=\"Mantis\" width=\"242\" height=\"102\" class=\"aligncenter size-full wp-image-1157\" /></p>\n\n<ul>\n    <li>Supported programming languages: PHP</li>\n    <li>Configurations available for plug-ins: Yes</li>\n    <li>Plug-in packages: No</li>\n    <li>Extension points : Hooks for events</li>\n</ul>\n\n<h4>Plug-ins installation</h4>\n\n<p>The plug-ins installation happens copying the plug-in folder to the plug-ins folder in Mantis. By default, this folder is located at <em>$MANTIS_HOME/plugins</em>.</p>\n\n<h4>Plug-ins API</h4>\n\n<p>Mantis scans the plug-ins folder looking for other folders. For each folder, there should exist a PHP file with the same name of the directory, plus the extension .php. This file must include Mantis plug-ins API (class <em>MantisPlugin.class.php</em>).</p>\n\n<p>The Mantis plug-ins API has general configurations for the plug-in, such as name, description, author, web site, configuration page (optional) among others. As well as functions for initializing and finalizing the plug-in.</p>\n\n<p>By default the plug-in is not persisted in the database, only when installed. During the installation, the initialization functions are called. The plug-in hooks are also registered.</p>\n\n<p>Certain actions in Mantis generate <strong>events</strong> (see: <em>$MANTIS_HOME/core/events_inc.php</em>). A plug-in can register functions for these events. This way, Mantis will call these functions when such event occurs.</p>\n\n<div class=\"highlight\"><pre><span class=\"x\">**</span>\n<span class=\"x\"> * requires MantisPlugin.class.php</span>\n<span class=\"x\"> */</span>\n<span class=\"x\">require_once( config_get( &#39;class_path&#39; ) . &#39;MantisPlugin.class.php&#39; );</span>\n\n<span class=\"x\">/**</span>\n<span class=\"x\"> * XmlImportExportPlugin Class</span>\n<span class=\"x\"> */</span>\n<span class=\"x\">class XmlImportExportPlugin extends MantisPlugin {</span>\n<span class=\"x\">    </span>\n<span class=\"x\">    //...</span>\n\n<span class=\"x\">    /**</span>\n<span class=\"x\">     * Default plugin configuration.</span>\n<span class=\"x\">     */</span>\n<span class=\"x\">    function hooks( ) {</span>\n<span class=\"x\">        $hooks = array(</span>\n<span class=\"x\">            &#39;EVENT_MENU_MANAGE&#39; =&gt; &#39;import_issues_menu&#39;,</span>\n<span class=\"x\">            &#39;EVENT_MENU_FILTER&#39; =&gt; &#39;export_issues_menu&#39;,</span>\n<span class=\"x\">        );</span>\n<span class=\"x\">        return $hooks;</span>\n<span class=\"x\">    }</span>\n<span class=\"x\">}</span>\n</pre></div>\n\n<p>There is a plug-in that comes bundled with Mantis, the Core plug-in. This plug-in allows other plug-ins to use it to verify required compatibility with the plug-ins API.</p>\n\n<h4>Plug-ins configuration</h4>\n\n<p>Plug-ins can define a set of configurations, with a default value. If a plug-in provides a configuration page, so it is possible to change these configurations with this page too (the programmer must prepare this page).</p>\n\n<p>If a configuration has a default value, then it is not persisted in the database. But if the administrator changes the configuration, then it is persisted in the database, overriding the default value.</p>\n\n<p>In the database, the configurations are stored in the same table for general configurations, but with the prefix <em>plugin_&lt;pluginname>_&lt;configuration>, e.g.: </em><em>plugin_MantisGraph_font</em> (configuration font of MantisGraph plug-in).</p>\n\n<hr />\n\n<h3><a name=\"jenkins\">Jenkins</a></h3>\n\n<p><a href=\"http://www.jenkins-ci.org\" title=\"http://www.jenkins-ci.org\">http://www.jenkins-ci.org</a></p>\n\n<p style=\"text-align: center\"><img src=\"/2012/10/25/a-quick-view-on-wordpress-mantis-and-jenkins-plug-in-api/Jenkins1_300_224.png\" alt=\"\" title=\"Jenkins\" width=\"300\" height=\"224\" class=\"aligncenter size-medium wp-image-978\" /></p>\n\n<ul>\n    <li>Supported programming languages: Java, Ruby, Groovy, Python (work in progress)</li>\n    <li>Configurations available for plug-ins: Yes</li>\n    <li>Plug-in packages: Yes</li>\n    <li>Extension points : An API for plug-ins that combine inheritance, interfaces and annotations</li>\n</ul>\n\n<h4>Plug-ins installation</h4>\n\n<p>Plug-ins in Jenkins stay at the <em>$JENKINS_HOME/plugins</em> folder. You can copy the <em>hpi</em> or <em>jpi</em> files into this folder, or copy the plug-in&#8217;s folder directly in there too. Jenkins will take care of initializing your plug-in, both during Jenkins start up or during runtime.</p>\n\n<p>You can install, update or uninstall using Jenkins interface. You get notifications from the plug-ins updates available and compatibility with Jenkins current version.</p>\n\n<h4>Plug-ins API</h4>\n\n<p>There are several <strong>extension points</strong> in Jenkins (see: <a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Extension+points\" title=\"Jenkins Wiki page for Extension Points\">Jenkins Wiki page for Extension Points</a>). Each one has a goal and is executed at certain point in Jenkins code. Normally your plug-in will have one extension point and one goal, but it is possible too that you use more than one extension point, create your own extension point or use other plug-ins too.</p>\n\n<div class=\"highlight\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">HelloWorldBuilder</span> <span class=\"kd\">extends</span> <span class=\"n\">Builder</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">;</span>\n\n    <span class=\"c1\">// Fields in config.jelly must match the parameter names in the &quot;DataBoundConstructor&quot;</span>\n    <span class=\"nd\">@DataBoundConstructor</span>\n    <span class=\"kd\">public</span> <span class=\"nf\">HelloWorldBuilder</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"c1\">// ...</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">perform</span><span class=\"o\">(</span><span class=\"n\">AbstractBuild</span> <span class=\"n\">build</span><span class=\"o\">,</span> <span class=\"n\">Launcher</span> <span class=\"n\">launcher</span><span class=\"o\">,</span> <span class=\"n\">BuildListener</span> <span class=\"n\">listener</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">// This is where you &#39;build&#39; the project.</span>\n        <span class=\"c1\">// Since this is a dummy, we just say &#39;hello world&#39; and call that a build.</span>\n\n        <span class=\"c1\">// This also shows how you can consult the global configuration of the builder</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">getDescriptor</span><span class=\"o\">().</span><span class=\"na\">getUseFrench</span><span class=\"o\">())</span>\n            <span class=\"n\">listener</span><span class=\"o\">.</span><span class=\"na\">getLogger</span><span class=\"o\">().</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&quot;Bonjour, &quot;</span><span class=\"o\">+</span><span class=\"n\">name</span><span class=\"o\">+</span><span class=\"s\">&quot;!&quot;</span><span class=\"o\">);</span>\n        <span class=\"k\">else</span>\n            <span class=\"n\">listener</span><span class=\"o\">.</span><span class=\"na\">getLogger</span><span class=\"o\">().</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&quot;Hello, &quot;</span><span class=\"o\">+</span><span class=\"n\">name</span><span class=\"o\">+</span><span class=\"s\">&quot;!&quot;</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"c1\">// ...</span>\n\n<span class=\"o\">}</span>\n</pre></div>\n\n<p>When you initialize Jenkins, it scans the plug-ins directory and, for each plug-in found, it prepares a ClassLoader and call the initializion methods (if any) in the plug-in. There are methods for when the plug-in is stopping too.</p>\n\n<p>After that, you can use the plug-ins features from the job configuration screen, or in other parts of the system. In the case of a job, you can use the Builder of a plug-in, for instance, configuring it according to the plug-in requirements, and then during the job execution a method (<em>perform()</em>) is executed for each one of the Builders configured in the job.</p>\n\n<h4>Plug-ins configuration</h4>\n\n<p>Each plug-in can have global of local configurations. It is also possible to modify Jenkins UI and add new screens to configure the plug-in. The configuration screen for the plug-in requires only snippets of <a href=\"http://commons.apache.org/jelly/\" title=\"Apache Jelly\">Jelly</a> or <a href=\"http://groovy.codehaus.org/\" title=\"Groovy\">Groovy</a>, that are embedded by Jenkins in the right configuration screen.</p>\n\n<p>Below is the local (job) configuration for the plug-in shown above.</p>\n\n<p>[xml]&lt;j:jelly xmlns:j=&quot;jelly:core&quot; xmlns:st=&quot;jelly:stapler&quot; xmlns:d=&quot;jelly:define&quot; xmlns:l=&quot;/lib/layout&quot; xmlns:t=&quot;/lib/hudson&quot; xmlns:f=&quot;/lib/form&quot;&gt;\n  &lt;f:entry title=&quot;Name&quot; field=&quot;name&quot;&gt;\n    &lt;f:textbox /&gt;\n  &lt;/f:entry&gt;\n&lt;/j:jelly&gt;[/xml]</p>\n<hr />\n\n<p>In the next days I&#8217;ll finish the proposal for TestLink and will post the details here too. And to keep the momentum, I&#8217;ll investigate an idea posted <a href=\"http://www.tupilabs.com/2012/10/02/use-jenkins-plug-ins-api-in-apache-nutch.html\" title=\"Use Jenkins plug-ins API in Apache Nutch\">here</a>, about enhancing <a href=\"http://nutch.apache.org\" title=\"Apache Nutch\">Apache Nutch</a>&#8216;s plug-in API using parts of the Jenkins API.</p>"}, "pass_info": {"used_taxonomy_terms": [], "used_pagination": false, "pagination_has_more": false, "used_assets": true, "used_source_names": []}}