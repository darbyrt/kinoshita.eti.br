{"segments": {"content.abstract": "<p>Yesterday I finally managed to build <a title=\"Jenkins\" href=\"http://www.jenkins-ci.org\">Jenkins</a> using <a title=\"Eclipse\" href=\"http://www.eclipse.org/\">Eclipse</a> and <a title=\"m2e plug-in\" href=\"http://eclipse.org/m2e/\">m2e plug-in</a>. With <a title=\"Eclipse Indigo\" href=\"http://www.eclipse.org/indigo\">Eclipse Indigo</a> release came a new version of the <a title=\"Maven\" href=\"http://maven.apache.org\">Maven</a> plug-in for Eclipse (former <a title=\"M2Eclipse\" href=\"http://m2eclipse.sonatype.org/\">M2Eclipse</a>), m2e. Since I started using Eclipse Indigo and this new plug-in I hadn&#8217;t been able to build Jenkins in Eclipse anymore.</p>\n\n<p>I&#8217;ve been having a terrible fever and thought that it would be a good thing to stop playing <a href=\"http://www.minecraft.net\" title=\"Minecraft\">Minecraft</a> for a while and find a way to build Jenkins in Eclipse + m2e :-).</p>\n\n<h2>1. Maven Plug-ins execution in project life cycle</h2>\n\n<p>The first thing I&#8217;ve noticed were the messages regarding the execution of some Maven plug-ins in the project life cycle. m2e delegates the execution of Maven plug-ins to an external executor. As not all Maven plug-ins have an existing executor for m2e you will receive a message similar to &#8220;Plugin execution not covered by lifecycle configuration: &#8230;&#8221;.</p>\n\n", "content": "<p>Yesterday I finally managed to build <a title=\"Jenkins\" href=\"http://www.jenkins-ci.org\">Jenkins</a> using <a title=\"Eclipse\" href=\"http://www.eclipse.org/\">Eclipse</a> and <a title=\"m2e plug-in\" href=\"http://eclipse.org/m2e/\">m2e plug-in</a>. With <a title=\"Eclipse Indigo\" href=\"http://www.eclipse.org/indigo\">Eclipse Indigo</a> release came a new version of the <a title=\"Maven\" href=\"http://maven.apache.org\">Maven</a> plug-in for Eclipse (former <a title=\"M2Eclipse\" href=\"http://m2eclipse.sonatype.org/\">M2Eclipse</a>), m2e. Since I started using Eclipse Indigo and this new plug-in I hadn&#8217;t been able to build Jenkins in Eclipse anymore.</p>\n\n<p>I&#8217;ve been having a terrible fever and thought that it would be a good thing to stop playing <a href=\"http://www.minecraft.net\" title=\"Minecraft\">Minecraft</a> for a while and find a way to build Jenkins in Eclipse + m2e :-).</p>\n\n<h2>1. Maven Plug-ins execution in project life cycle</h2>\n\n<p>The first thing I&#8217;ve noticed were the messages regarding the execution of some Maven plug-ins in the project life cycle. m2e delegates the execution of Maven plug-ins to an external executor. As not all Maven plug-ins have an existing executor for m2e you will receive a message similar to &#8220;Plugin execution not covered by lifecycle configuration: &#8230;&#8221;.</p>\n\n<!-- more -->\n\n<p>The solution for this issue was adding a rule for each plug-in execution. This rule must contain a version or version range and declare whether this plug-in execution must be executed or ignored by m2e. You have two ways of adding these rules. You could a) Google for an example, b) replace group, artifact name and version. Or you could a) open pom.xml and select the tab &#8220;pom.xml&#8221; (this will open the XML source of your pom.xml) b) go to the line marked with an error in Eclipse, leave your mouse pointer over it and select the option &#8220;Permanently mark goal&#8230;&#8221;, choose the parent pom.xml (jenkins/pom.xml) and save all documents.</p>\n\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;plugin&gt;</span>\n  <span class=\"nt\">&lt;groupid&gt;</span>org.eclipse.m2e<span class=\"nt\">&lt;/groupid&gt;</span>\n  <span class=\"nt\">&lt;artifactid&gt;</span>lifecycle-mapping<span class=\"nt\">&lt;/artifactid&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1.0.0<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;configuration&gt;</span>\n    <span class=\"nt\">&lt;lifecyclemappingmetadata&gt;</span>\n      <span class=\"nt\">&lt;pluginexecutions&gt;</span>\n        <span class=\"nt\">&lt;pluginexecution&gt;</span>\n          <span class=\"nt\">&lt;pluginexecutionfilter&gt;</span>\n            <span class=\"nt\">&lt;groupid&gt;</span>org.codehaus.mojo<span class=\"nt\">&lt;/groupid&gt;</span>\n            <span class=\"nt\">&lt;artifactid&gt;</span>build-helper-maven-plugin<span class=\"nt\">&lt;/artifactid&gt;</span>\n            <span class=\"nt\">&lt;versionrange&gt;</span>[1.7,)<span class=\"nt\">&lt;/versionrange&gt;</span>\n            <span class=\"nt\">&lt;goals&gt;</span>\n              <span class=\"nt\">&lt;goal&gt;</span>timestamp-property<span class=\"nt\">&lt;/goal&gt;</span>\n              <span class=\"nt\">&lt;goal&gt;</span>regex-property<span class=\"nt\">&lt;/goal&gt;</span>\n            <span class=\"nt\">&lt;/goals&gt;</span>\n         <span class=\"nt\">&lt;/pluginexecutionfilter&gt;</span>\n         <span class=\"nt\">&lt;action&gt;</span>\n           <span class=\"nt\">&lt;execute</span> <span class=\"nt\">/&gt;</span>\n         <span class=\"nt\">&lt;/action&gt;</span>\n       <span class=\"nt\">&lt;/pluginexecution&gt;</span>\n       <span class=\"c\">&lt;!-- other plug-ins... ---&gt;</span>\n     <span class=\"nt\">&lt;/pluginexecutions&gt;</span>\n   <span class=\"nt\">&lt;/lifecyclemappingmetadata&gt;</span>\n  <span class=\"nt\">&lt;/configuration&gt;</span>\n<span class=\"nt\">&lt;/plugin&gt;</span>\n</pre></div>\n\n<h2>2. Conflicting Maven repository ids</h2>\n\n<p>Another problem building Jenkins in Eclipse was that as there were SNAPSHOT dependencies in jenkins/pom.xml a snapshots repository was added with the id maven.jenkins-ci.org. This is the same repository id used in some tutorials to build Jenkins plug-ins. Thus, Maven will ignore this repository, using the one from settings.xml.</p>\n\n<p>The solution for this issue was changing the repository id from maven.jenkins-ci.org to maven.jenkins-ci.org-snapshots.</p>\n\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;repository&gt;</span><span class=\"c\">&lt;!-- only until we release ant and javadoc plugins --&gt;</span>\n  <span class=\"nt\">&lt;id&gt;</span>maven.jenkins-ci.org-snapshots<span class=\"nt\">&lt;/id&gt;</span>\n  <span class=\"nt\">&lt;url&gt;</span>http://maven.jenkins-ci.org/content/repositories/snapshots/<span class=\"nt\">&lt;/url&gt;</span>\n  <span class=\"nt\">&lt;releases&gt;</span>\n    <span class=\"nt\">&lt;enabled&gt;</span>false<span class=\"nt\">&lt;/enabled&gt;</span>\n  <span class=\"nt\">&lt;/releases&gt;</span>\n  <span class=\"nt\">&lt;snapshots&gt;</span>\n    <span class=\"nt\">&lt;enabled&gt;</span>true<span class=\"nt\">&lt;/enabled&gt;</span>\n  <span class=\"nt\">&lt;/snapshots&gt;</span>\n<span class=\"nt\">&lt;/repository&gt;</span>\n</pre></div>\n\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;snapshotRepository&gt;</span>\n  <span class=\"nt\">&lt;id&gt;</span>maven.jenkins-ci.org-snapshots<span class=\"nt\">&lt;/id&gt;</span>\n  <span class=\"nt\">&lt;url&gt;</span>http://maven.jenkins-ci.org:8081/content/repositories/snapshots<span class=\"nt\">&lt;/url&gt;</span>\n<span class=\"nt\">&lt;/snapshotRepository&gt;</span>\n</pre></div>\n\n<h2>3. maven-localizer-plugin</h2>\n\n<p>This issue was related to the generation of the localization Java classes. maven-localizer-plugin reads properties files and generates Java classes with the text in a locale to be used by the plug-in. But sometimes Eclipse doesn&#8217;t include all the source folders generated by this plug-in, causing the project to have compilation errors.</p>\n\n<p>The solution for this issue was to add the generated sources manually in jenkins/pom.xml under the build-helper-maven-plugin plug-in configuration.</p>\n\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;plugin&gt;</span>\n  <span class=\"nt\">&lt;groupId&gt;</span>org.codehaus.mojo<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>build-helper-maven-plugin<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1.7<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;executions&gt;</span>\n    <span class=\"nt\">&lt;execution&gt;</span>\n      <span class=\"nt\">&lt;id&gt;</span>add-eclipse-sources<span class=\"nt\">&lt;/id&gt;</span>\n      <span class=\"nt\">&lt;phase&gt;</span>generate-sources<span class=\"err\">&lt;</span>/p<span class=\"nt\">&lt;hase&gt;</span>\n      <span class=\"nt\">&lt;goals&gt;</span>\n          <span class=\"nt\">&lt;goal&gt;</span>add-source<span class=\"nt\">&lt;/goal&gt;</span>\n      <span class=\"nt\">&lt;/goals&gt;</span>\n      <span class=\"nt\">&lt;configuration&gt;</span>\n      <span class=\"nt\">&lt;sources&gt;</span>\n          <span class=\"nt\">&lt;source&gt;</span>${basedir}/target/generated-sources/groovy-stubs/main<span class=\"nt\">&lt;/source&gt;</span>\n          <span class=\"nt\">&lt;source&gt;</span>${basedir}/target/generated-sources/localizer<span class=\"nt\">&lt;/source&gt;</span>\n          <span class=\"nt\">&lt;source&gt;</span>${basedir}/target/generated-sources/taglib-interface<span class=\"nt\">&lt;/source&gt;</span>\n      <span class=\"nt\">&lt;/sources&gt;</span>\n   <span class=\"nt\">&lt;/configuration&gt;</span>\n  <span class=\"nt\">&lt;/execution&gt;</span>\n  <span class=\"nt\">&lt;/executions&gt;</span>\n<span class=\"nt\">&lt;/plugin&gt;</span>\n</pre></div>\n\n<h2>Removing remaining Eclipse errors and warnings</h2>\n\n<p>Matthieu Vincent managed to overcome other Eclipse errors and warnings with the following steps:</p>\n\n<ul>\n<li>run mvn generate-sources.</li></li>\n<li>this will generate many source files under target/generated-sources sub directories.</li></li>\n<li>now go to each project and look for target/generated-sources/localizer, right click on it and Build Path &rarr; Use as Source Folder.</li></li>\n<li>the core project generates other files too. Like antlr,taglib-interfaces and other sources. Right click on these folders and use them as source too.</li></li>\n<li>look for src/main/groovy (in core project).</li></li>\n<li>then again, right click on it, Build Path &rarr; Use as Source Folder.</li></li>\n<li>Do the usual Project &rarr; Clean, Project &rarr; Build Project, F5 your projects, and your environment must be fine</li></li>\n</ul>\n<p>Now you can follow the instructions in Jenkins Wiki for building Jenkins and have fun in your Eclipse. There still seems to have few issues to be solved. I can&#8217;t see the version number in the footer, and the default plug-ins are missing. Time to go back to Minecraft now :D!</p>\n\n<p>Cheers :-)</p>"}, "pass_info": {"used_taxonomy_terms": [], "used_pagination": false, "pagination_has_more": false, "used_assets": false, "used_source_names": []}}