{"segments": {"content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rss version=\"2.0\"\n    xmlns:content=\"http://purl.org/rss/1.0/modules/content/\"\n    xmlns:wfw=\"http://wellformedweb.org/CommentAPI/\"\n    xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n    xmlns:atom=\"http://www.w3.org/2005/Atom\"\n    xmlns:sy=\"http://purl.org/rss/1.0/modules/syndication/\"\n    xmlns:slash=\"http://purl.org/rss/1.0/modules/slash/\"\n>\n \n<channel>\n    <title>Bruno P. Kinoshita</title>\n    <atom:link href=\"/blog/feed.xml\" rel=\"self\" type=\"application/rss+xml\" />\n    <link>/</link>\n    <description></description>\n    <lastBuildDate>1461480017.3140304</lastBuildDate>\n    <language>en-US</language>\n    <generator>PieCrust 2.0.0b5</generator>\n \n\n<item>\n    <title>Contributing to Apache Jena</title>\n    <pubDate>Jan 01, 2015</pubDate>\n    <link>/2015/01/01/contributing-to-apache-jena</link>\n    <dc:creator></dc:creator>\n    <description><p>As I mentioned in my <a href=\"2014/10/11/basic-workflow-of-a-sparql-query-in-fuseki.html\">previous post</a>, \nI am using <a href=\"http://jena.apache.org\">Apache Jena</a> for a project of a customer. I had never used \nany triple store, nor a SPARQL Endpoint server before. But for being involved with the Apache \nSoftware Foundation, and since the company itself is using several Apache components, it was only \nnatural Jena to be our first choice.</p>\n<p>It has served us very well so far. At the moment we have less than 100 queries per day, but the \nproject is still under development and we expect 1000 queries per day by the first quarter of \n2015 and 1000000 near the end of 2015. We also have few entries in TDB, but expect to grow this \nnumber to a few million before 2016.</p>\n<p>When I work for companies and we use Open Source Software (OSS) in a project, I always \nprepare assessment reports to include in the deliveries. In this report I justify the choice \nof Open Source Software (as well as commercial software). Sometimes I \nam lucky to work for a company that asks me to include hours to work on OSS :-)</p>\n<p>I use <a href=\"http://trello.com\">Trello</a> to triage issues in OSS projects (and for several other \nthings). I have a board with several cards for Open Source. About a month ago I set up one \nfor Jena and listed the issues that I thought I could contribute to. </p>\n<div class='row'>\n<div class=\"span6 offset3\" style='text-align: center;'>\n<figure>\n<a href=\"/2015/01/01/contributing-to-apache-jena/jena_trello.png\" rel=\"prettyPhoto\" class=\"thumbnail\" title=\"Jena Trello card\">\n<img src=\"/2015/01/01/contributing-to-apache-jena/jena_trello.png\" alt=\"Jena Trello card\" />\n</a>\n<figcaption>Jena Trello card</i></figcaption>\n</figure>\n</div>\n</div>\n\n<p>I annotate easy issues with a &#8220;lhf&#8221; suffix for Low Hanging Fruit issues, and delete issues from \nthe card once I submit a patch or update it (and include it in another card for the \n<a href=\"http://tupilabs.com/tag/tupilabs-report.html\">TupiLabs reports</a>).</p>\n<p>Most of the issues I included in the card for Jena had been created over two years ago, and hadn&#8217;t \nbeen updated in a while. When you test these issues against the current code, usually you find that \nsome of them have already been fixed. Other issues included documentation problems, and minor features. I didn&#8217;t find any blocker issue that would impede us to use Jena in production.</p>\n<div class='row'>\n<div class=\"span6 offset3\" style='text-align: center;'>\n<figure>\n<a href=\"/2015/01/01/contributing-to-apache-jena/jena_jira.png\" rel=\"prettyPhoto\" class=\"thumbnail\" title=\"Jena JIRA activity summary\">\n<img src=\"/2015/01/01/contributing-to-apache-jena/jena_jira.png\" alt=\"Jena JIRA activity summary\" />\n</a>\n<figcaption>Jena JIRA activity summary</figcaption>\n</figure>\n</div>\n</div>\n\n<p>The picture above shows the past 30 days activity summary in JIRA for Jena. The red line shows \nissues created, and the green line issues resolved. <a href=\"https://github.com/afs\">Andy Seaborne</a> \nwas very active in the past days and fixed several issues that were too old and had already been fixed in the trunk, and kindly merged patches and pull requests.</p>\n<p>Some issues like <a href=\"https://issues.apache.org/jira/browse/JENA-632\">JENA-632</a> will take a \nlonger time to fix, but I&#8217;m getting used to Jena&#8217;s source code, and at the same getting more \nconfident to use it in production - especially with a supportive OSS community. We are using \nJena for RDF with Hadoop, and I learned that I can replace some custom Writables by others \nin the Jena Hadoop submodule.</p>\n<p>By the way, even though this project ends in April, I intend to continue contributing to Jena. \nThere is a lot of parts of the code that I would love to be able to understand and contribute, \nin special the Graph database, optimization techniques for SPARQL queries, the grammars used \nin the project, Fuseki v2 and enhance its testing harness (as well as the test coverage).</p>\n<p><strong>If you are looking for a interesting project to get you started with semantics, linked data, \nRDF, and even graphs and database querying, try contributing to Jena. I bet you&#8217;ll have a lot \nof fun!</strong></p>\n<p>Happy hacking and happy 2015!</p></description>\n</item>\n\n<item>\n    <title>Basic workflow of a SPARQL query in Fuseki</title>\n    <pubDate>Oct 11, 2014</pubDate>\n    <link>/2014/10/11/basic-workflow-of-a-sparql-query-in-fuseki</link>\n    <dc:creator></dc:creator>\n    <description><p>Before using any library or tool in a customer project, specially when it is an Open Source one, \nthere are many things that I like to look at before deploying it. Basically, I look at the \nfeatures, documentation, community, open issues (in special blockers or criticals), the time \nto release fixes and new features and, obviously, the license.</p>\n<p>At the moment I&#8217;m using <a href=\"http://jena.apache.org\">Apache Jena</a> to work with ontologies, SPARQL \nand data matching and enrichment for a customer. </p>\n<p>Jena is fantastic, and similar tools include <a href=\"http://www.w3.org/wiki/VirtuosoUniversalServer\">Virtuoso</a>, \n<a href=\"http://stardog.com/\">StarDog</a>, <a href=\"http://www.ontotext.com/products/ontotext-graphdb-owlim/\">GraphDB</a>, \n<a href=\"http://4store.org/\">4Store</a> and others. From looking at the code and its community and documentation, \nJena seems like a great choice. </p>\n<p>I&#8217;m still investigating if/how we gonna need to use inference and reasoners, looking \nat the issues, and learning my way through its code base. The following is my initial mapping \nof what happens when you submit a SPARQL query to Fuseki.</p>\n<div class='row'>\n<div class=\"span6 offset3\" style='text-align: center;'>\n<figure>\n<a href=\"/2014/10/11/basic-workflow-of-a-sparql-query-in-fuseki/drawing1.png\" rel=\"prettyPhoto\" class=\"thumbnail\" title=\"Fuseki SPARQL query work flow\">\n<img src=\"/2014/10/11/basic-workflow-of-a-sparql-query-in-fuseki/drawing1.png\" alt=\"Fuseki SPARQL query work flow\" />\n</a>\n<figcaption>Jena JDBC</figcaption>\n</figure>\n</div>\n</div>\n\n<p>My understanding is that Fuseki is just a web layer, handling a bunch of validations, logging, \nerror handling, and relying on the ARQ module, that is who actually handles the requests. \nI also think a new Fuseki server is baking in the project git repo, so stay tuned for an \nupdated version of this graph soon.</p>\n<p>Happy hacking!</p></description>\n</item>\n\n<item>\n    <title>Cypher, Gremlin and SPARQL: Graph dialects</title>\n    <pubDate>Sep 09, 2014</pubDate>\n    <link>/2014/09/09/cypher-gremlin-and-sparql-graph-dialects</link>\n    <dc:creator></dc:creator>\n    <description><p>When I was younger and my older brother was living in Germany, I asked him if he \nhad learned German. He said that he did, and explained that there are several \ndialects, and he was quite proud for some people told him that he was using the \nBavarian dialect correctly.</p>\n<p>Even though <a href=\"http://www.neo4j.org/learn/cypher\">Cypher</a>, \n<a href=\"http://gremlindocs.com/\">Gremlin</a> and <a href=\"http://en.wikipedia.org/wiki/SPARQL\">SPARQL</a> \nare all query languages, I think we can consider them dialects of a common graph language. \nCypher is the query language used in <a href=\"http://www.neo4j.org/\">neo4j</a>, a graph database. \nGremlin is part of the <a href=\"http://www.tinkerpop.com/\">Tinkerpop</a>, an open source project \nthat contains graph server, graph algorithms, graph language, among other sub-projects. \nAnd last but not least, SPARQL is used to query <a href=\"http://en.wikipedia.org/wiki/Resource_Description_Framework\">RDF documents</a>.</p>\n<p>Let&#8217;s use the example of the Matrix movie provided by neo4j to take a look at the \nthree languages.</p>\n<h2>Cypher</h2>\n<p>First we create the graph.</p>\n<div class=\"highlight\"><pre><span class=\"k\">create</span> <span class=\"p\">(</span><span class=\"n\">matrix1</span><span class=\"p\">:</span><span class=\"n\">Movie</span> <span class=\"err\">{</span><span class=\"n\">id</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;603&#39;</span><span class=\"p\">,</span> <span class=\"n\">title</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;The Matrix&#39;</span><span class=\"p\">,</span> <span class=\"k\">year</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;1999-03-31&#39;</span><span class=\"err\">}</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"n\">matrix2</span><span class=\"p\">:</span><span class=\"n\">Movie</span> <span class=\"err\">{</span><span class=\"n\">id</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;604&#39;</span><span class=\"p\">,</span> <span class=\"n\">title</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;The Matrix Reloaded&#39;</span><span class=\"p\">,</span> <span class=\"k\">year</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;2003-05-07&#39;</span><span class=\"err\">}</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"n\">matrix3</span><span class=\"p\">:</span><span class=\"n\">Movie</span> <span class=\"err\">{</span><span class=\"n\">id</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;605&#39;</span><span class=\"p\">,</span> <span class=\"n\">title</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;The Matrix Revolutions&#39;</span><span class=\"p\">,</span> <span class=\"k\">year</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;2003-10-27&#39;</span><span class=\"err\">}</span><span class=\"p\">),</span>\n\n <span class=\"p\">(</span><span class=\"n\">neo</span><span class=\"p\">:</span><span class=\"n\">Actor</span> <span class=\"err\">{</span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"s1\">&#39;Keanu Reeves&#39;</span><span class=\"err\">}</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"n\">morpheus</span><span class=\"p\">:</span><span class=\"n\">Actor</span> <span class=\"err\">{</span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"s1\">&#39;Laurence Fishburne&#39;</span><span class=\"err\">}</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"n\">trinity</span><span class=\"p\">:</span><span class=\"n\">Actor</span> <span class=\"err\">{</span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"s1\">&#39;Carrie-Anne Moss&#39;</span><span class=\"err\">}</span><span class=\"p\">),</span>\n\n <span class=\"p\">(</span><span class=\"n\">matrix1</span><span class=\"p\">)</span><span class=\"o\">&lt;-</span><span class=\"p\">[:</span><span class=\"n\">ACTS_IN</span> <span class=\"err\">{</span><span class=\"k\">role</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;Neo&#39;</span><span class=\"err\">}</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"p\">(</span><span class=\"n\">neo</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"n\">matrix2</span><span class=\"p\">)</span><span class=\"o\">&lt;-</span><span class=\"p\">[:</span><span class=\"n\">ACTS_IN</span> <span class=\"err\">{</span><span class=\"k\">role</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;Neo&#39;</span><span class=\"err\">}</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"p\">(</span><span class=\"n\">neo</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"n\">matrix3</span><span class=\"p\">)</span><span class=\"o\">&lt;-</span><span class=\"p\">[:</span><span class=\"n\">ACTS_IN</span> <span class=\"err\">{</span><span class=\"k\">role</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;Neo&#39;</span><span class=\"err\">}</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"p\">(</span><span class=\"n\">neo</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"n\">matrix1</span><span class=\"p\">)</span><span class=\"o\">&lt;-</span><span class=\"p\">[:</span><span class=\"n\">ACTS_IN</span> <span class=\"err\">{</span><span class=\"k\">role</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;Morpheus&#39;</span><span class=\"err\">}</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"p\">(</span><span class=\"n\">morpheus</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"n\">matrix2</span><span class=\"p\">)</span><span class=\"o\">&lt;-</span><span class=\"p\">[:</span><span class=\"n\">ACTS_IN</span> <span class=\"err\">{</span><span class=\"k\">role</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;Morpheus&#39;</span><span class=\"err\">}</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"p\">(</span><span class=\"n\">morpheus</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"n\">matrix3</span><span class=\"p\">)</span><span class=\"o\">&lt;-</span><span class=\"p\">[:</span><span class=\"n\">ACTS_IN</span> <span class=\"err\">{</span><span class=\"k\">role</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;Morpheus&#39;</span><span class=\"err\">}</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"p\">(</span><span class=\"n\">morpheus</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"n\">matrix1</span><span class=\"p\">)</span><span class=\"o\">&lt;-</span><span class=\"p\">[:</span><span class=\"n\">ACTS_IN</span> <span class=\"err\">{</span><span class=\"k\">role</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;Trinity&#39;</span><span class=\"err\">}</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"p\">(</span><span class=\"n\">trinity</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"n\">matrix2</span><span class=\"p\">)</span><span class=\"o\">&lt;-</span><span class=\"p\">[:</span><span class=\"n\">ACTS_IN</span> <span class=\"err\">{</span><span class=\"k\">role</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;Trinity&#39;</span><span class=\"err\">}</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"p\">(</span><span class=\"n\">trinity</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"n\">matrix3</span><span class=\"p\">)</span><span class=\"o\">&lt;-</span><span class=\"p\">[:</span><span class=\"n\">ACTS_IN</span> <span class=\"err\">{</span><span class=\"k\">role</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;Trinity&#39;</span><span class=\"err\">}</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"p\">(</span><span class=\"n\">trinity</span><span class=\"p\">)</span>\n</pre></div>\n\n<p><code>Added 6 labels, created 6 nodes, set 21 properties, created 9 relationships, returned 0 rows in 2791 ms</code></p>\n<p>And execute a simple query.</p>\n<div class=\"highlight\"><pre><span class=\"k\">MATCH</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span><span class=\"n\">Actor</span> <span class=\"err\">{</span> <span class=\"n\">name</span><span class=\"p\">:</span><span class=\"ss\">&quot;Keanu Reeves&quot;</span> <span class=\"err\">}</span><span class=\"p\">)</span>\n<span class=\"k\">RETURN</span> <span class=\"n\">a</span>\n</pre></div>\n\n<p><code>(9:Actor {name:\"Keanu Reeves\"})</code></p>\n<h2>Gremlin</h2>\n<p>Again, let&#8217;s start by creating our graph.</p>\n<div class=\"highlight\"><pre><span class=\"k\">g</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">TinkerGraph</span><span class=\"p\">();</span>\n<span class=\"n\">matrix1</span> <span class=\"o\">=</span> <span class=\"k\">g</span><span class=\"p\">.</span><span class=\"n\">addVertex</span><span class=\"p\">([</span><span class=\"ss\">&quot;_id&quot;</span><span class=\"p\">:</span><span class=\"mi\">603</span><span class=\"p\">,</span><span class=\"ss\">&quot;title&quot;</span><span class=\"p\">:</span><span class=\"ss\">&quot;The Matrix&quot;</span><span class=\"p\">,</span> <span class=\"ss\">&quot;year&quot;</span><span class=\"p\">:</span> <span class=\"ss\">&quot;1999-03-31&quot;</span><span class=\"p\">]);</span>\n<span class=\"n\">matrix2</span> <span class=\"o\">=</span> <span class=\"k\">g</span><span class=\"p\">.</span><span class=\"n\">addVertex</span><span class=\"p\">([</span><span class=\"ss\">&quot;_id&quot;</span><span class=\"p\">:</span><span class=\"mi\">604</span><span class=\"p\">,</span><span class=\"ss\">&quot;title&quot;</span><span class=\"p\">:</span><span class=\"ss\">&quot;The Matrix Reloaded&quot;</span><span class=\"p\">,</span> <span class=\"ss\">&quot;year&quot;</span><span class=\"p\">:</span> <span class=\"ss\">&quot;2003-05-07&quot;</span><span class=\"p\">]);</span>\n<span class=\"n\">matrix3</span> <span class=\"o\">=</span> <span class=\"k\">g</span><span class=\"p\">.</span><span class=\"n\">addVertex</span><span class=\"p\">([</span><span class=\"ss\">&quot;_id&quot;</span><span class=\"p\">:</span><span class=\"mi\">605</span><span class=\"p\">,</span><span class=\"ss\">&quot;title&quot;</span><span class=\"p\">:</span><span class=\"ss\">&quot;The Matrix Revolutions&quot;</span><span class=\"p\">,</span> <span class=\"ss\">&quot;year&quot;</span><span class=\"p\">:</span> <span class=\"ss\">&quot;2003-10-27&quot;</span><span class=\"p\">]);</span>\n\n<span class=\"n\">neo</span> <span class=\"o\">=</span> <span class=\"k\">g</span><span class=\"p\">.</span><span class=\"n\">addVertex</span><span class=\"p\">([</span><span class=\"ss\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"ss\">&quot;Keanu Reeves&quot;</span><span class=\"p\">]);</span>\n<span class=\"n\">morpheus</span> <span class=\"o\">=</span> <span class=\"k\">g</span><span class=\"p\">.</span><span class=\"n\">addVertex</span><span class=\"p\">([</span><span class=\"ss\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"ss\">&quot;Laurence Fishburne&quot;</span><span class=\"p\">]);</span>\n<span class=\"n\">trinity</span> <span class=\"o\">=</span> <span class=\"k\">g</span><span class=\"p\">.</span><span class=\"n\">addVertex</span><span class=\"p\">([</span><span class=\"ss\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"ss\">&quot;Carrie-Anne Moss&quot;</span><span class=\"p\">]);</span>\n\n<span class=\"n\">neo</span><span class=\"p\">.</span><span class=\"n\">addEdge</span><span class=\"p\">(</span><span class=\"ss\">&quot;actsIn&quot;</span><span class=\"p\">,</span> <span class=\"n\">matrix1</span><span class=\"p\">);</span> \n<span class=\"n\">neo</span><span class=\"p\">.</span><span class=\"n\">addEdge</span><span class=\"p\">(</span><span class=\"ss\">&quot;actsIn&quot;</span><span class=\"p\">,</span> <span class=\"n\">matrix2</span><span class=\"p\">);</span> \n<span class=\"n\">neo</span><span class=\"p\">.</span><span class=\"n\">addEdge</span><span class=\"p\">(</span><span class=\"ss\">&quot;actsIn&quot;</span><span class=\"p\">,</span> <span class=\"n\">matrix3</span><span class=\"p\">);</span> \n<span class=\"n\">morpheus</span><span class=\"p\">.</span><span class=\"n\">addEdge</span><span class=\"p\">(</span><span class=\"ss\">&quot;actsIn&quot;</span><span class=\"p\">,</span> <span class=\"n\">matrix1</span><span class=\"p\">);</span> \n<span class=\"n\">morpheus</span><span class=\"p\">.</span><span class=\"n\">addEdge</span><span class=\"p\">(</span><span class=\"ss\">&quot;actsIn&quot;</span><span class=\"p\">,</span> <span class=\"n\">matrix2</span><span class=\"p\">);</span> \n<span class=\"n\">morpheus</span><span class=\"p\">.</span><span class=\"n\">addEdge</span><span class=\"p\">(</span><span class=\"ss\">&quot;actsIn&quot;</span><span class=\"p\">,</span> <span class=\"n\">matrix3</span><span class=\"p\">);</span> \n<span class=\"n\">trinity</span><span class=\"p\">.</span><span class=\"n\">addEdge</span><span class=\"p\">(</span><span class=\"ss\">&quot;actsIn&quot;</span><span class=\"p\">,</span> <span class=\"n\">matrix1</span><span class=\"p\">);</span> \n<span class=\"n\">trinity</span><span class=\"p\">.</span><span class=\"n\">addEdge</span><span class=\"p\">(</span><span class=\"ss\">&quot;actsIn&quot;</span><span class=\"p\">,</span> <span class=\"n\">matrix2</span><span class=\"p\">);</span> \n<span class=\"n\">trinity</span><span class=\"p\">.</span><span class=\"n\">addEdge</span><span class=\"p\">(</span><span class=\"ss\">&quot;actsIn&quot;</span><span class=\"p\">,</span> <span class=\"n\">matrix3</span><span class=\"p\">);</span>\n</pre></div>\n\n<p>And execute a simple query.</p>\n<div class=\"highlight\"><pre><span class=\"k\">g</span><span class=\"p\">.</span><span class=\"n\">V</span><span class=\"p\">.</span><span class=\"n\">has</span><span class=\"p\">(</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Keanu Reeves&#39;</span><span class=\"p\">).</span><span class=\"k\">map</span>\n</pre></div>\n\n<p><code>gremlin&gt; g.V.has('name', 'Keanu Reeves').map\n==&gt;{name=Keanu Reeves}\ngremlin&gt;</code></p>\n<p>Quite similar to neo4j.</p>\n<h2>SPARQL</h2>\n<p>Let&#8217;s load our example (thanks to <a href=\"https://twitter.com/kendall\">Kendall G. Clark</a>). I used \n<a href=\"http://jena.apache.org/documentation/serving_data/\">Fuseki</a> to run these queries.</p>\n<div class=\"highlight\"><pre>@prefix :          <span class=\"nt\">&lt;http:</span><span class=\"err\">//example.org/matrix</span><span class=\"nt\">/&gt;</span> .\n\n :m1 a :Movie; :title &quot;The Matrix&quot;; :year &quot;1999-03-31&quot;.\n :m2 a :Movie; :title &quot;The Matrix Reloaded&quot;; :year &quot;2003-05-07&quot;.\n :m3 a :Movie; :title &quot;The Matrix Revolutions&quot;; :year &quot;2003-10-27&quot;.\n\n :neo a :Actor; :name &quot;Keanu Reeves&quot;.\n :morpheus a :Actor; :name &quot;Laurence Fishburne&quot;.\n :trinity a :Actor; :name &quot;Carrie-Anne Moss&quot;.\n\n :neo :hasRole [:as &quot;Neo&quot;; :in :m1].\n :neo :hasRole [:as &quot;Neo&quot;; :in :m2].\n :neo :hasRole [:as &quot;Neo&quot;; :in :m2].\n :morpheus :hasRole [:as &quot;Morpheus&quot;; :in :m1].\n :morpheus :hasRole [:as &quot;Morpheus&quot;; :in :m2].\n :morpheus :hasRole [:as &quot;Morpheus&quot;; :in :m2].\n :trinity :hasRole [:as &quot;Trinity&quot;; :in :m1].\n :trinity :hasRole [:as &quot;Trinity&quot;; :in :m2].\n :trinity :hasRole [:as &quot;Trinity&quot;; :in :m2].\n</pre></div>\n\n<p>And finally the SPARQL query.</p>\n<div class=\"highlight\"><pre><span class=\"k\">SELECT</span> <span class=\"o\">?</span><span class=\"n\">a</span> <span class=\"k\">WHERE</span> <span class=\"err\">{</span>\n   <span class=\"o\">?</span><span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"o\">&lt;</span><span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">example</span><span class=\"p\">.</span><span class=\"n\">org</span><span class=\"o\">/</span><span class=\"n\">matrix</span><span class=\"o\">/</span><span class=\"n\">Actor</span><span class=\"o\">&gt;</span> <span class=\"p\">.</span>\n   <span class=\"o\">?</span><span class=\"n\">a</span> <span class=\"o\">&lt;</span><span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">example</span><span class=\"p\">.</span><span class=\"n\">org</span><span class=\"o\">/</span><span class=\"n\">matrix</span><span class=\"o\">/</span><span class=\"n\">name</span><span class=\"o\">&gt;</span> <span class=\"o\">?</span><span class=\"n\">name</span> <span class=\"p\">.</span>\n   <span class=\"n\">FILTER</span><span class=\"p\">(</span><span class=\"o\">?</span><span class=\"n\">name</span>  <span class=\"o\">=</span> <span class=\"ss\">&quot;Keanu Reeves&quot;</span><span class=\"p\">)</span>\n<span class=\"err\">}</span>\n</pre></div>\n\n<p>Returning the Keanu Reeves actor instance.</p>\n<pre>-----------------------------------\n| a                               |\n===================================\n| &lt;http://example.org/matrix/neo&gt; |\n-----------------------------------</pre>\n\n<p>SPARQL supports inference (or I must say that OWL, RDFS and the reasoners do), \nbut it is easier to define the depth of a search in the graph using neo4j. As for \nGremlin, it has native support to Groovy and Java. There is a common denominator \nfor these three languages, but what makes them really powerful are their unique features. </p>\n<p>I hope you enjoyed, and that this post gave you a quick overview of some of the existing \ngraph languages. Make sure you ponder the pros and cons of each server/language, and \nmake the best decision for your project. Take a look at <a href=\"http://en.wikipedia.org/wiki/Graph_database#APIs_and_Graph_Query.2FProgramming_Languages\">other graph query languages</a> too.</p>\n<p>Happy hacking!</p>\n<hr />\n<p>This post has been updated as suggested by <a href=\"https://twitter.com/kendall\">@kendall</a> (Thank you!).\nYou can check the diff at <a href=\"https://github.com/kinow/kinoshita.eti.br/commits/master/site/_content/posts/2014-09-09_cypher-gremlin-and-sparql-graph-dialects.html\">GitHub</a></p></description>\n</item>\n\n<item>\n    <title>Strings transliteration in Java with Apache Commons Lang</title>\n    <pubDate>Aug 09, 2014</pubDate>\n    <link>/2014/08/09/strings-transliteration-in-java-with-apache-commons-lang</link>\n    <dc:creator></dc:creator>\n    <description><p><a href=\"http://rosalind.info\">Rosalind</a> is a website with a curated set of exercices for bioinformatics, organized hierarchily. \nIn some of these examples you are required to replace characters (nucleotides) by other characters. It is a rather common \ntask for developers, like when you need to replace special characters in user&#8217;s names.</p>\n<p>There are different ways of describing it, such as translate, replace, or <strong><a href=\"http://en.wikipedia.org/wiki/Transliteration\">transliterate</a></strong>. The latter being my favorite definition. </p>\n<p>In Python I know that there are several different ways of transliterating strings \n[<a href=\"https://pypi.python.org/pypi/transliterate\">1</a>][<a href=\"http://blog.lebowtech.com/blog/programming/python/transliterate-with-python.html\">2</a>]. But in Java I always ended up using a Map or a Enum and writing my own method in some <em>Util</em> class for that.</p>\n<p>Turns out that <a href=\"http://commons.apache.org\">Apache Commons Lang</a>, which I use in most of my projects, \nprovided this feature. What means that I will be able to reduce the length of my code, what also means \nless code to be tested (and one less place to look for bugs).</p>\n<div class=\"highlight\"><pre><span class=\"n\">String</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">StringUtils</span><span class=\"o\">.</span><span class=\"na\">replaceChars</span><span class=\"o\">(</span><span class=\"s\">&quot;ATGCATGC&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;GTCA&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;CAGT&quot;</span><span class=\"o\">);</span> <span class=\"c1\">// &quot;TACGTACG&quot;</span>\n<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">);</span>\n</pre></div>\n\n<p>What the code above does, is replace G by C, T by A, C by G and A by T. This process is part of finding the \n<a href=\"http://www.bioinformatics.org/sms/rev_comp.html\">DNA reverse complement</a>. But you can also use this for replacing \nspecial characters, spaces by _, and so it goes.</p>\n<p>Happy hacking!</p></description>\n</item>\n\n<item>\n    <title>Treemapping Jenkins Extension Points with R</title>\n    <pubDate>May 19, 2014</pubDate>\n    <link>/2014/05/19/treemapping-jenkins-extension-points-with-r</link>\n    <dc:creator></dc:creator>\n    <description><p>I have been playing with R and its packages for some time, and decided to study it a \nbit harder. Last week I started reading the <a href=\"http://adv-r.had.co.nz/\">Advanced R Programming</a> \nby Hadley Wickham. </p>\n<p>One of the first chapters talks about the basic data structures in R. In order to \nget my feet wet I thought about a simple example: <a href=\"http://en.wikipedia.org/wiki/Treemapping\">treemapping</a> \nJenkins extension points. </p>\n<p style=\"text-align: center;\"><a href=\"/2014/05/19/treemapping-jenkins-extension-points-with-r/extension_points.png\"><img src=\"/2014/05/19/treemapping-jenkins-extension-points-with-r/extension_points.png\" width=\"600px\" alt=\"Treemap graph\" /></a></p>\n\n<p>There is a <a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Extension+points\">Wiki page with the extension points in Jenkins</a> (what parts of Jenkins can be customized) \nand its implementations. That page is generated by a <a href=\"https://ci.jenkins-ci.org/view/Infrastructure/job/infra_extension-indexer/\">Jenkins job</a>. </p>\n<p>That job outputs a JSON file that contains each available extension points, as well as \nan array with its implementations. The R code below will produce two vectors, one with the \ncount of implementations of each extension point, and the other with the class name.</p>\n<div class=\"highlight\"><pre>nExtensionPoints <span class=\"o\">&lt;-</span> <span class=\"kp\">length</span><span class=\"p\">(</span>extensionPointsJson<span class=\"o\">$</span>extensionPoints<span class=\"p\">)</span>\nnumberOfImplementations <span class=\"o\">&lt;-</span> <span class=\"kt\">vector</span><span class=\"p\">(</span>length <span class=\"o\">=</span> nExtensionPoints<span class=\"p\">)</span>\nnamesOfTheExtensionPoints <span class=\"o\">&lt;-</span> <span class=\"kt\">vector</span><span class=\"p\">(</span>length <span class=\"o\">=</span> nExtensionPoints<span class=\"p\">)</span>\n<span class=\"kr\">for</span> <span class=\"p\">(</span>i <span class=\"kr\">in</span> <span class=\"kp\">seq_along</span><span class=\"p\">(</span>extensionPoints<span class=\"p\">))</span> <span class=\"p\">{</span>\n  extensionName <span class=\"o\">=</span> extensionPoints<span class=\"p\">[[</span>i<span class=\"p\">]]</span><span class=\"o\">$</span>className\n  lastIndexOfDot <span class=\"o\">=</span> <span class=\"kp\">regexpr</span><span class=\"p\">(</span><span class=\"s\">&quot;\\\\.[^\\\\.]*$&quot;</span><span class=\"p\">,</span> extensionName<span class=\"p\">)</span>\n  namesOfTheExtensionPoints<span class=\"p\">[[</span>i<span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kp\">substr</span><span class=\"p\">(</span>extensionName<span class=\"p\">,</span> lastIndexOfDot<span class=\"p\">[</span><span class=\"m\">1</span><span class=\"p\">]</span><span class=\"m\">+1</span><span class=\"p\">,</span> <span class=\"kp\">nchar</span><span class=\"p\">(</span>extensionName<span class=\"p\">))</span>\n  numberOfImplementations<span class=\"p\">[[</span>i<span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kp\">length</span><span class=\"p\">(</span>extensionPoints<span class=\"p\">[[</span>i<span class=\"p\">]]</span><span class=\"o\">$</span>implementations<span class=\"p\">)</span>\n  <span class=\"kp\">print</span><span class=\"p\">(</span><span class=\"kp\">paste</span><span class=\"p\">(</span>namesOfTheExtensionPoints<span class=\"p\">[[</span>i<span class=\"p\">]],</span> <span class=\"s\">&quot; -&gt; &quot;</span><span class=\"p\">,</span> numberOfImplementations<span class=\"p\">[[</span>i<span class=\"p\">]]))</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n<p>For creating the treemap I used the <strong><a href=\"http://flowingdata.com/2010/02/11/an-easy-way-to-make-a-treemap/\">portfolio package</a></strong>, and the <code>map.market</code> \nfunction. The structures previously created and the next snippet of code are all that is \nneeded to create the treemap of the Jenkins extension points.</p>\n<div class=\"highlight\"><pre>map.market<span class=\"p\">(</span>id<span class=\"o\">=</span><span class=\"kp\">seq_along</span><span class=\"p\">(</span>extensionPoints<span class=\"p\">),</span> area<span class=\"o\">=</span>numberOfImplementations<span class=\"p\">,</span> group<span class=\"o\">=</span>namesOfTheExtensionPoints<span class=\"p\">,</span> color<span class=\"o\">=</span>numberOfImplementations<span class=\"p\">,</span> main<span class=\"o\">=</span><span class=\"s\">&quot;Jenkins Extension Points&quot;</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>You can also use the <a href=\"https://wiki.jenkins-ci.org/display/JENKINS/R+Plugin\">Jenkins R Plug-in</a> to produce this graph, \nas in this <a href=\"http://builds.tupilabs.com/job/backend-extension-points-treemap/2/\">sample job</a>. \nYou can get the complete script in this <a href=\"https://gist.github.com/kinow/d5a2221c32dce3aa1076\">gist</a>, or just \ncopy it here.</p>\n<div class=\"highlight\"><pre><span class=\"kn\">library</span><span class=\"p\">(</span><span class=\"s\">&#39;rjson&#39;</span><span class=\"p\">)</span>\n<span class=\"kn\">library</span><span class=\"p\">(</span><span class=\"s\">&#39;portfolio&#39;</span><span class=\"p\">)</span>\n\ndownload.file<span class=\"p\">(</span>url<span class=\"o\">=</span><span class=\"s\">&quot;https://ci.jenkins-ci.org/view/Infrastructure/job/infra_extension-indexer/ws/extension-points.json&quot;</span><span class=\"p\">,</span> destfile<span class=\"o\">=</span><span class=\"s\">&quot;extension-points.json&quot;</span><span class=\"p\">,</span> method<span class=\"o\">=</span><span class=\"s\">&quot;wget&quot;</span><span class=\"p\">)</span>\nextensionPointsJson <span class=\"o\">&lt;-</span> fromJSON<span class=\"p\">(</span><span class=\"kp\">paste</span><span class=\"p\">(</span><span class=\"kp\">readLines</span><span class=\"p\">(</span><span class=\"s\">&quot;extension-points.json&quot;</span><span class=\"p\">),</span> collapse<span class=\"o\">=</span><span class=\"s\">&quot;&quot;</span><span class=\"p\">))</span>\nextensionPoints <span class=\"o\">&lt;-</span> extensionPointsJson<span class=\"o\">$</span>extensionPoints\nnExtensionPoints <span class=\"o\">&lt;-</span> <span class=\"kp\">length</span><span class=\"p\">(</span>extensionPointsJson<span class=\"o\">$</span>extensionPoints<span class=\"p\">)</span>\nnumberOfImplementations <span class=\"o\">&lt;-</span> <span class=\"kt\">vector</span><span class=\"p\">(</span>length <span class=\"o\">=</span> nExtensionPoints<span class=\"p\">)</span>\nnamesOfTheExtensionPoints <span class=\"o\">&lt;-</span> <span class=\"kt\">vector</span><span class=\"p\">(</span>length <span class=\"o\">=</span> nExtensionPoints<span class=\"p\">)</span>\n<span class=\"kr\">for</span> <span class=\"p\">(</span>i <span class=\"kr\">in</span> <span class=\"kp\">seq_along</span><span class=\"p\">(</span>extensionPoints<span class=\"p\">))</span> <span class=\"p\">{</span>\n  extensionName <span class=\"o\">=</span> extensionPoints<span class=\"p\">[[</span>i<span class=\"p\">]]</span><span class=\"o\">$</span>className\n  lastIndexOfDot <span class=\"o\">=</span> <span class=\"kp\">regexpr</span><span class=\"p\">(</span><span class=\"s\">&quot;\\\\.[^\\\\.]*$&quot;</span><span class=\"p\">,</span> extensionName<span class=\"p\">)</span>\n  namesOfTheExtensionPoints<span class=\"p\">[[</span>i<span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kp\">substr</span><span class=\"p\">(</span>extensionName<span class=\"p\">,</span> lastIndexOfDot<span class=\"p\">[</span><span class=\"m\">1</span><span class=\"p\">]</span><span class=\"m\">+1</span><span class=\"p\">,</span> <span class=\"kp\">nchar</span><span class=\"p\">(</span>extensionName<span class=\"p\">))</span>\n  numberOfImplementations<span class=\"p\">[[</span>i<span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kp\">length</span><span class=\"p\">(</span>extensionPoints<span class=\"p\">[[</span>i<span class=\"p\">]]</span><span class=\"o\">$</span>implementations<span class=\"p\">)</span>\n  <span class=\"kp\">print</span><span class=\"p\">(</span><span class=\"kp\">paste</span><span class=\"p\">(</span>namesOfTheExtensionPoints<span class=\"p\">[[</span>i<span class=\"p\">]],</span> <span class=\"s\">&quot; -&gt; &quot;</span><span class=\"p\">,</span> numberOfImplementations<span class=\"p\">[[</span>i<span class=\"p\">]]))</span>\n<span class=\"p\">}</span>\npng<span class=\"p\">(</span>filename<span class=\"o\">=</span><span class=\"s\">&quot;extension-points.png&quot;</span><span class=\"p\">,</span> width<span class=\"o\">=</span><span class=\"m\">2048</span><span class=\"p\">,</span> height<span class=\"o\">=</span><span class=\"m\">1536</span><span class=\"p\">,</span> units<span class=\"o\">=</span><span class=\"s\">&quot;px&quot;</span><span class=\"p\">,</span> bg<span class=\"o\">=</span><span class=\"s\">&quot;white&quot;</span><span class=\"p\">)</span>\nmap.market<span class=\"p\">(</span>id<span class=\"o\">=</span><span class=\"kp\">seq_along</span><span class=\"p\">(</span>extensionPoints<span class=\"p\">),</span> area<span class=\"o\">=</span>numberOfImplementations<span class=\"p\">,</span> group<span class=\"o\">=</span>namesOfTheExtensionPoints<span class=\"p\">,</span> color<span class=\"o\">=</span>numberOfImplementations<span class=\"p\">,</span> main<span class=\"o\">=</span><span class=\"s\">&quot;Jenkins Extension Points&quot;</span><span class=\"p\">)</span>\ndev.off<span class=\"p\">()</span>\n</pre></div></description>\n</item>\n\n<item>\n    <title>Writing a custom SchemaSpy command for Laravel 4</title>\n    <pubDate>Feb 11, 2014</pubDate>\n    <link>/2014/02/11/writing-a-custom-schemaspy-command-for-laravel-4</link>\n    <dc:creator></dc:creator>\n    <description><p>This week I had to write my first custom command for <a href=\"http://laravel.com/\">Laravel 4</a>. \nIn <a href=\"http://nestor-qa.org/\">Nestor-QA</a>, <a href=\"https://github.com/tooh\">Peter</a> and I thought it would be useful to have \nthe database schema being automatically generated with \n<a href=\"http://schemaspy.sourceforge.net/\">SchemaSpy</a> in our <a href=\"http://builds.tupilabs.com/view/Nestor-QA/\">Jenkins box</a>.</p>\n<p>Thanks to <a href=\"http://laravel.com/docs/artisan\">Artisan</a> this task is much simpler than I thought. \nThe following command creates the <code>schemaspy</code> command.</p>\n<pre><code>php artisan command:make SchemaSpyCommand --command=schemaspy\n</code></pre>\n<p>This will create the file <code>app/commands/SchemaSpyCommand.php</code>. And all I had to do was \njust fill in the options and write the exec command as the <a href=\"http://laravel.com/docs/commands\">Laravel 4 docs</a> explain. </p>\n<pre><code>$this-&gt;info('Creating SchemaSpy');\n\n$jar = $this-&gt;option(\"jar\");\n$dbtype = $this-&gt;option(\"dbtype\");\n$output = $this-&gt;option(\"output\");\n\n$commandLine = sprintf(\"java -jar %s -u none -t %s -o %s\", $jar, $dbtype, $output);\n\n$this-&gt;info(sprintf(\"Command line: [%s]\", $commandLine));\n\nexec($commandLine);\n</code></pre>\n<p>That&#8217;s how my final command looks. Now the final step is integrate it into the application by adding the line below to \n<code>app/start/artisan.php</code>.</p>\n<pre><code>Artisan::add(new SchemaSpyCommand);\n</code></pre>\n<p>And that&#8217;s it, running <code>php artisan schemaspy --jar=/opt/schemaspy/schemaSpy_5.0.0.jar \n--dbtype=app/database/sqlite.properties --output=database-schema</code> \ncreates the database schema docs in the <code>database-schema</code> directory. </p>\n<p>Check this <a href=\"https://gist.github.com/kinow/8936667\">gist</a> for the final code.</p>\n<p>Happy coding!</p></description>\n</item>\n\n<item>\n    <title>Missing menus in new installation of TestLink 1.9.8</title>\n    <pubDate>Oct 27, 2013</pubDate>\n    <link>/2013/10/27/missing-menus-in-new-installation-of-testlink</link>\n    <dc:creator></dc:creator>\n    <description><p>I recently installed TestLink 1.9.8 and noticed that the menus and some other parts \nof the UI we missing. Looking at <code>/var/log/testlink/userlog1.log</code> (the location \nmay change depending on your settings) I realized that there was something wrong \nwith my PHP installation. There were log messages like the below.</p>\n<pre><code>include_once(ADORecordSet_ext_empty.class.php): failed to open stream: No such file or directory - in /home/kinow/php/workspace/testlink-1.9.8/lib/functions/common.php - Line 92\n[13/Sep/18 12:51:09][WARNING][2o0h173pdgg5fjqh1pukr83og2][GUI]\nE_WARNING\ninclude_once(): Failed opening 'ADORecordSet_ext_empty.class.php' for inclusion (include_path='.:/usr/share/php:/usr/share/pear:.:/home/kinow/php/workspace/testlink-1.9.8/lib/functions/:/home/kinow/php/workspace/testlink-1.9.8/lib/issuet\n...\n</code></pre>\n<p>I found a post in a forum (but unfortunately I forgot to save the link) that suggested \nthese ADORecordSet were being caused by the module <strong>php5-adodb</strong>. Removing the module, and \ncleaning the templates cache directory (<code>$TESTLINK_HOME/gui/templates_c/*</code>) \nfixed the issue for me.</p>\n<p>Hope that helps.\nHappy testing!</p></description>\n</item>\n\n<item>\n    <title>The Apache Way and on writing software reviews</title>\n    <pubDate>Sep 29, 2013</pubDate>\n    <link>/2013/09/29/the-apache-way-and-on-writing-software-reviews</link>\n    <dc:creator></dc:creator>\n    <description><p>The <a href=\"http://www.apache.org/foundation/how-it-works.html\">Apache Way</a> is the philosophy behind \nApache Software Foundation and is shared by all of its projects. It is composed by a set of principles:</p>\n<ul>\n<li>Collaborative software development</li>\n<li>Commercial-friendly standard license</li>\n<li>Consistently high quality software</li>\n<li><strong>Respectful, honest, technical-based interaction</strong></li>\n<li>Faithful implementation of standards</li>\n<li>Security as a mandatory feature</li>\n</ul>\n<p>I have been part of <a href=\"http://commons.apache.org\">Apache Commons</a> for a while, and haven&#8217;t \nreally contributed much yet. Maybe because I had lots of projects related to \n<a href=\"http://tupilabs.com\">TupiLabs</a> as well as my own wedding this year. But I can \nassure that <em>respectful, honest, technical-based interaction</em> is quite right (not to discredit the \nother items, of course).</p>\n<p>Even though there are critics of the Apache Way (<a href=\"/2013/09/29/the-apache-way-and-on-writing-software-reviews%231\">1</a>, <a href=\"/2013/09/29/the-apache-way-and-on-writing-software-reviews%232\">2</a>, <a href=\"/2013/09/29/the-apache-way-and-on-writing-software-reviews%233\">3</a>), it still stands as an important \npillar for the Apache Software Foundation, and its principles help to create stable and \nproduction ready software, such as <a href=\"http://hadoop.apache.org\">Apache Hadoop</a>, \n<a href=\"http://httpd.apache.org\">Apache Httpd</a>, <a href=\"http://commons.apache.org/lang\">Apache Commons Lang</a>, \namong <a href=\"http://projects.apache.org\">others</a>.</p>\n<p>There are many reviews and comparisons on Apache software (as well as on \nother software, like JavaScript libraries, Java Web Frameworks, Ruby Web servers and so on). \nSometimes, though, these reviews or comparisons can be biased or not well founded. In \ncases like this, the developers of the tools may be frustrated, or users can be \nmisled and choose the software based on wrong assertions.</p>\n<p>I have just returned from honey moon, ready to start writing code again, but \nfirst I had to read all the unread messages in my inbox. Some were e-mails from <a href=\"https://www.apache.org/foundation/mailinglists.html\">Apache \nmailing lists</a>. <a href=\"http://markmail.org/thread/uoh5m55mh4qjybaw\">One of these e-mails</a> \nhad Phil Steitz comments on a post by Daniel Wu. </p>\n<p>Instead of publishing his performance benchmark results of \n<a href=\"http://commons.apache.org/pool\">Apache Commons Pool</a>, Daniel posted his \ncode to the commons-dev mailing list. Phil Steitz, one of Apache Commons Pool \ncommitters replied with questions and a few points that Daniel could use to \nenrich his bechmark tests.</p>\n<p>This kind of behavior happens a lot within Apache (at least in the mailing lists that \nI follow), and it produces a lot of benefits for different parts. </p>\n<ul>\n<li>The person writing a review or comparison can get the programmer opinion before actually \npublishing anything. </li>\n<li>The programmer can see how other people were testing his/her code.</li>\n<li>All other commons-pool committers and maintainers, the mailing list readers, and \npeople that found the mailing list archives will be able to read the conversation \nhistory.</li>\n<li>No misguided benchmark results were published (and lots of wrong decisions were avoided).</li>\n</ul>\n<p>I keep loving the Apache Way and the resulting community and code around it. There are \nalways lots of things to learn, the Open Source projects communities are healthy and you will always find \npeople willing to share their experience and time teaching you.</p>\n<p>\u2665 Open Source</p>\n<hr />\n<p><sup><a name=\"1\">1</a> \n<a href=\"http://www.infoworld.com/d/open-source-software/has-apache-lost-its-way-225267?page=0,2\">\nhttp://www.infoworld.com/d/open-source-software/has-apache-lost-its-way-225267?page=0,2</a></sup></p>\n<p><sup><a name=\"2\">2</a> \n<a href=\"http://www.futurealoof.com/posts/apache-considered-harmful.html\">\nhttp://www.futurealoof.com/posts/apache-considered-harmful.html</a></sup></p>\n<p><sup><a name=\"3\">3</a> \n<a href=\"http://www.itworld.com/it-managementstrategy/227477/has-open-source-outgrown-apache-way\">\nhttp://www.itworld.com/it-managementstrategy/227477/has-open-source-outgrown-apache-way</a></sup></p></description>\n</item>\n\n<item>\n    <title>Too many SQL variables exception in Graphite with SQLite3</title>\n    <pubDate>Jul 04, 2013</pubDate>\n    <link>/2013/07/04/too_many_sql_variables_in_graphite_with_sqlite3</link>\n    <dc:creator></dc:creator>\n    <description><p>Having run <a href=\"http://graphite.wikidot.com/\">Graphite</a> for a while, today I found a rather annoying issue. We were using \n<a href=\"https://code.launchpad.net/~lucio.torre/graphite/add-events/+merge/69142\">events</a>, and everything was working perfectly fine so far. But for the 24 last hours, \nthe graph was blank. </p>\n<p>Actually, in the dashboard, the graph was <em>missing</em>, being displayed as a gray box. \nEnabling the web inspector in Google Chrome I got the graph URL. Opening the link in \na new tab gave me the exception message: <strong>too many SQL variables</strong> (<sup>1</sup>).</p>\n<p>After some research, I found out this was a bug in SQLite. After trying to hack the code, \nand being concerned about using a patched version of Graphite and having to update it \nlater, I decided to switch database. </p>\n<p>But to avoid losing the graphs, users and other settings, including the events, I \nmigrated the SQLite database to a MySQL server. This MySQL server was already installed in \nthe server machine, since this machine hosted a <a href=\"http://www.zabbix.com/\">Zabbix</a> server too.</p>\n<p>Here are the steps required to migrate your database from SQLite to MySQL (<sup>2</sup>).</p>\n<ul>\n<li>Download <strong>sqlite3_mysql</strong> python script from <a href=\"http://www.redmine.org/boards/2/topics/12793\">http://www.redmine.org/boards/2/topics/12793</a></li>\n<li>Stop Apache/Nginx</li>\n<li>mysql -u user -p -e &#8220;create database redmine graphite set utf8;&#8221; </li>\n<li>sqlite3 graphite.db .dump | sqlite3-to-mysql.py | mysql -uroot -pyourpass graphite</li>\n<li>Start Apache again</li>\n</ul>\n<p>After tail&#8217;ing the Graphite webapp log file, </p>\n<div class=\"highlight\"><pre>tail f- storage/log/webapp/error.log\n</pre></div>\n\n<p>I noticed the Python MySQLdb wasn&#8217;t installed.</p>\n<div class=\"highlight\"><pre><span class=\"n\">ImproperlyConfigured</span><span class=\"p\">:</span> <span class=\"n\">Error</span> <span class=\"n\">loading</span> <span class=\"n\">MySQLdb</span> <span class=\"n\">module</span><span class=\"p\">:</span> <span class=\"n\">No</span> <span class=\"n\">module</span> <span class=\"n\">named</span> <span class=\"n\">MySQLdb</span>\n</pre></div>\n\n<p>My server was an Ubuntu 13.04, so I installed the module simply with the following \ncommand.</p>\n<div class=\"highlight\"><pre>apt-get install python-mysqldb\n</pre></div>\n\n<p>Hope that helps!</p>\n<p><small><sup>1</sup> You may have to enable *DEBUG* in your Django settings for seeing the exception in your browser</small></p>\n\n<p><small><sup>2</sup> Zabbix needed some minor tweaks in order to use [MariaDB](https://mariadb.org/), but probably you can give it a try too</small></p></description>\n</item>\n\n<item>\n    <title>Graphite: Broken images</title>\n    <pubDate>Apr 17, 2013</pubDate>\n    <link>/2013/04/17/graphite-broken-images</link>\n    <dc:creator></dc:creator>\n    <description><p>This morning I was setting up a <a href=\"http://graphite.wikidot.com/\" title=\"Graphite\">Graphite </a>server to collect metrics with <a href=\"https://github.com/etsy/statsd/\" title=\"statsd\">statsd</a>, <a href=\"http://logstash.net/\" title=\"LogStash\">LogStash </a>and <a href=\"https://github.com/jmxtrans/jmxtrans\" title=\"jmxtrans\">jmxtrans</a>. After following the instructions from @jgeurst, I&#8217;ve successfully installed Graphite.</p>\n\n<p>I had previously installed another test box, so I decided to take a deeper look at the settings, write a <a href=\"https://puppetlabs.com/\" title=\"Puppet\">puppet</a> manifest and prepare this new box to become a production server. However, after browsing the webapp, all graphs were broken.</p>\n\n<p>After googling a while, reading forums and bugs, I decided to open the <em>$GRAPHITE_HOME/webapp/graphite/render/views.py</em>, adding <em>log.rendering(&#8230;)</em> statements (not the most elegant solution, I know).</p>\n\n<p>By following the program workflow I found out it was entering a block after checking if it should remotely render the image. This feature is turned on/off by <strong>REMOTE_RENDERING</strong> = True/False, in local_settings.py.</p>\n\n<p>After setting this to <em>False</em> the problem was solved.</p></description>\n</item>\n\n</channel>\n</rss>"}, "pass_info": {"used_taxonomy_terms": [], "used_pagination": true, "pagination_has_more": true, "used_assets": false, "used_source_names": ["posts"]}}