{"segments": {"content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rss version=\"2.0\"\n    xmlns:content=\"http://purl.org/rss/1.0/modules/content/\"\n    xmlns:wfw=\"http://wellformedweb.org/CommentAPI/\"\n    xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n    xmlns:atom=\"http://www.w3.org/2005/Atom\"\n    xmlns:sy=\"http://purl.org/rss/1.0/modules/syndication/\"\n    xmlns:slash=\"http://purl.org/rss/1.0/modules/slash/\"\n>\n \n<channel>\n    <title>Bruno P. Kinoshita</title>\n    <atom:link href=\"/blog/feed.xml\" rel=\"self\" type=\"application/rss+xml\" />\n    <link>/</link>\n    <description></description>\n    <lastBuildDate>1461480017.3140304</lastBuildDate>\n    <language>en-US</language>\n    <generator>PieCrust 2.0.0b5</generator>\n \n\n<item>\n    <title>Usgin Active Choices with Role Strategy Plug-in</title>\n    <pubDate>Apr 24, 2016</pubDate>\n    <link>/2016/04/24/using-active-choices-with-role-strategy-plugin</link>\n    <dc:creator></dc:creator>\n    <description><p>Having worked in Open Source for a few years, one of my favorite things is when you can\nshare experience with other people that you meet. <a href=\"https://github.com/agray\">Andrew Gray</a>\nhas worked with .NET and Jenkins for years, and we met through some Open Source. He also\nwrites the blog <a href=\"http://jenkinsheaven.blogspot.co.nz/\">Jenkins.NET</a>.</p>\n<p>A couple of days ago he had an interesting question about using Active Choices Plug-in\nin Jenkins. He wanted to see if that would be possible to use the plug-in to show different\nparameters depending on the user permission.</p>\n<p>Another important point is that it needed to support the\n<a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Role+Strategy+Plugin\">Role Strategy Plug-in</a>. This plug-in\nlets you define roles, define which permissions a role has, and then assign users to the roles.</p>\n<h2>To the code</h2>\n<div class=\"highlight\"><pre><span class=\"kn\">import</span> <span class=\"nn\">hudson.model.User</span>\n<span class=\"kn\">import</span> <span class=\"nn\">hudson.model.Hudson</span>\n<span class=\"kn\">import</span> <span class=\"nn\">hudson.security.AuthorizationStrategy</span>\n<span class=\"kn\">import</span> <span class=\"nn\">hudson.security.Permission</span>\n<span class=\"kn\">import</span> <span class=\"nn\">com.michelin.cio.hudson.plugins.rolestrategy.RoleBasedAuthorizationStrategy</span>\n<span class=\"kn\">import</span> <span class=\"nn\">com.michelin.cio.hudson.plugins.rolestrategy.RoleMap</span>\n\n<span class=\"n\">AuthorizationStrategy</span> <span class=\"n\">strategy</span> <span class=\"o\">=</span> <span class=\"n\">Hudson</span><span class=\"o\">.</span><span class=\"na\">getInstance</span><span class=\"o\">().</span><span class=\"na\">getAuthorizationStrategy</span><span class=\"o\">();</span>\n\n<span class=\"n\">jobs</span> <span class=\"o\">=</span> <span class=\"o\">[]</span>\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"na\">current</span><span class=\"o\">()</span>\n<span class=\"n\">userId</span> <span class=\"o\">=</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"na\">getId</span><span class=\"o\">()</span>\n\n<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">strategy</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> \n    <span class=\"c1\">// not very straightforward to get the groups for a given user</span>\n    <span class=\"n\">roles</span> <span class=\"o\">=</span> <span class=\"n\">roleStrategy</span><span class=\"o\">.</span><span class=\"na\">getGrantedRoles</span><span class=\"o\">(</span><span class=\"s2\">&quot;globalRoles&quot;</span><span class=\"o\">)</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">entry</span> <span class=\"k\">in</span> <span class=\"n\">roles</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">role</span> <span class=\"o\">=</span> <span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"na\">key</span>\n        <span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"na\">value</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">role</span><span class=\"o\">.</span><span class=\"na\">getName</span><span class=\"o\">().</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"s2\">&quot;tester&quot;</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">userId</span> <span class=\"k\">in</span> <span class=\"n\">users</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">jobs</span> <span class=\"o\">=</span> <span class=\"o\">[</span><span class=\"s2\">&quot;PROJECT_FOR_TESTERS1&quot;</span><span class=\"o\">,</span> <span class=\"s2\">&quot;PROJECT_FOR_TESTERS2&quot;</span><span class=\"o\">]</span>\n                <span class=\"k\">break</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">role</span><span class=\"o\">.</span><span class=\"na\">getName</span><span class=\"o\">().</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"s2\">&quot;admin&quot;</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">userId</span> <span class=\"k\">in</span> <span class=\"n\">users</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">jobs</span> <span class=\"o\">=</span> <span class=\"o\">[</span><span class=\"s2\">&quot;PROJECT_FOR_ADMINS1&quot;</span><span class=\"o\">,</span> <span class=\"s2\">&quot;PROJECT_FOR_ADMINS2&quot;</span><span class=\"o\">]</span>\n                <span class=\"k\">break</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">return</span> <span class=\"n\">jobs</span>\n<span class=\"c1\">// TODO: handle anonymous user ;-)</span>\n</pre></div>\n\n<p>Let&#8217;s dissect the code.</p>\n<div class=\"highlight\"><pre><span class=\"kn\">import</span> <span class=\"nn\">hudson.model.User</span>\n<span class=\"kn\">import</span> <span class=\"nn\">hudson.model.Hudson</span>\n<span class=\"kn\">import</span> <span class=\"nn\">hudson.security.AuthorizationStrategy</span>\n<span class=\"kn\">import</span> <span class=\"nn\">hudson.security.Permission</span>\n<span class=\"kn\">import</span> <span class=\"nn\">com.michelin.cio.hudson.plugins.rolestrategy.RoleBasedAuthorizationStrategy</span>\n<span class=\"kn\">import</span> <span class=\"nn\">com.michelin.cio.hudson.plugins.rolestrategy.RoleMap</span>\n</pre></div>\n\n<p>You start by importing the classes that you need. If you are going to run the code against classes\nthat may exist only on slaves, you may have to write some more logic to import classes accordingly.</p>\n<div class=\"highlight\"><pre><span class=\"n\">AuthorizationStrategy</span> <span class=\"n\">strategy</span> <span class=\"o\">=</span> <span class=\"n\">Hudson</span><span class=\"o\">.</span><span class=\"na\">getInstance</span><span class=\"o\">().</span><span class=\"na\">getAuthorizationStrategy</span><span class=\"o\">();</span>\n\n<span class=\"n\">jobs</span> <span class=\"o\">=</span> <span class=\"o\">[]</span>\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"na\">current</span><span class=\"o\">()</span>\n<span class=\"n\">userId</span> <span class=\"o\">=</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"na\">getId</span><span class=\"o\">()</span>\n</pre></div>\n\n<p>The first line gets the current <a href=\"https://github.com/jenkinsci/jenkins/blob/f6e431b80c4d162560419fa51633224a9724bb0d/core/src/main/java/hudson/security/AuthorizationStrategy.java\">AuthorizationStrategy</a>\nused in Jenkins.</p>\n<p>Then we create an empty array of jobs, which is the value returned by default. And get the current\nlogged in user ID.</p>\n<div class=\"highlight\"><pre><span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">strategy</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> \n    <span class=\"c1\">// not very straightforward to get the groups for a given user</span>\n    <span class=\"n\">roles</span> <span class=\"o\">=</span> <span class=\"n\">roleStrategy</span><span class=\"o\">.</span><span class=\"na\">getGrantedRoles</span><span class=\"o\">(</span><span class=\"s2\">&quot;globalRoles&quot;</span><span class=\"o\">)</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">entry</span> <span class=\"k\">in</span> <span class=\"n\">roles</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">role</span> <span class=\"o\">=</span> <span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"na\">key</span>\n        <span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"na\">value</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">role</span><span class=\"o\">.</span><span class=\"na\">getName</span><span class=\"o\">().</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"s2\">&quot;tester&quot;</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">userId</span> <span class=\"k\">in</span> <span class=\"n\">users</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">jobs</span> <span class=\"o\">=</span> <span class=\"o\">[</span><span class=\"s2\">&quot;PROJECT_FOR_TESTERS1&quot;</span><span class=\"o\">,</span> <span class=\"s2\">&quot;PROJECT_FOR_TESTERS2&quot;</span><span class=\"o\">]</span>\n                <span class=\"k\">break</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">role</span><span class=\"o\">.</span><span class=\"na\">getName</span><span class=\"o\">().</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"s2\">&quot;admin&quot;</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">userId</span> <span class=\"k\">in</span> <span class=\"n\">users</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">jobs</span> <span class=\"o\">=</span> <span class=\"o\">[</span><span class=\"s2\">&quot;PROJECT_FOR_ADMINS1&quot;</span><span class=\"o\">,</span> <span class=\"s2\">&quot;PROJECT_FOR_ADMINS2&quot;</span><span class=\"o\">]</span>\n                <span class=\"k\">break</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">return</span> <span class=\"n\">jobs</span>\n<span class=\"c1\">// TODO: handle anonymous user ;-)</span>\n</pre></div>\n\n<p>The final part simply iterates through each existing role, and then through the\nusers in that role. I could not find a more ellegant way of doing that, but in case\nyou would like to maybe optimize the code, here are the main classes that I\nused from Jenkins to write the script.</p>\n<ul>\n<li><a href=\"https://github.com/jenkinsci/role-strategy-plugin/blob/b6dca7904ce1c83b3afef0995ef5f42823171b0b/src/main/java/com/michelin/cio/hudson/plugins/rolestrategy/RoleBasedAuthorizationStrategy.java\">RoleBasedAuthorizationStrategy.java</a></li>\n<li><a href=\"https://github.com/jenkinsci/role-strategy-plugin/blob/master/src/main/java/com/michelin/cio/hudson/plugins/rolestrategy/Role.java\">Role.java</a></li>\n<li><a href=\"https://github.com/jenkinsci/role-strategy-plugin/blob/b6dca7904ce1c83b3afef0995ef5f42823171b0b/src/main/java/com/michelin/cio/hudson/plugins/rolestrategy/RoleMap.java\">RoleMap</a></li>\n<li><a href=\"https://github.com/jenkinsci/jenkins/blob/f6e431b80c4d162560419fa51633224a9724bb0d/core/src/main/java/hudson/model/User.java\">User.java</a></li>\n</ul>\n<h2>What the code does</h2>\n<p>In this section we have just simple screenshots, showing the script in the job configuration.</p>\n<div class='row'>\n<div class=\"ui container\" style='text-align: center;'>\n<figure>\n<a href=\"/2016/04/24/using-active-choices-with-role-strategy-plugin/screenshot01.png\" rel=\"prettyPhoto\" class=\"thumbnail\" title=\"Screen shot 01\">\n<img class=\"ui fluid image\" src=\"/2016/04/24/using-active-choices-with-role-strategy-plugin/screenshot01.png\" alt=\"Screen shot 01\" />\n</a>\n<figcaption>Screen shot 01</figcaption>\n</figure>\n</div>\n</div>\n\n<p>And the resulting screen. The parameter <strong>DeployApp</strong> will be available during the build,\nand can be used to trigger other jobs or pipelines.</p>\n<div class='row'>\n<div class=\"ui container\" style='text-align: center;'>\n<figure>\n<a href=\"/2016/04/24/using-active-choices-with-role-strategy-plugin/screenshot02.png\" rel=\"prettyPhoto\" class=\"thumbnail\" title=\"Screen shot 02\">\n<img class=\"ui fluid image\" src=\"/2016/04/24/using-active-choices-with-role-strategy-plugin/screenshot02.png\" alt=\"Screen shot 02\" />\n</a>\n<figcaption>Screen shot 02</figcaption>\n</figure>\n</div>\n</div>\n\n<h2>Where can you find this script?</h2>\n<p>This blog has a copy of the script, but in case you forget the address, I have submitted\na pull request to a <a href=\"https://github.com/imoutsatsos/jenkins-scriptlets\">repository</a>\nmaintained by another friend, <a href=\"https://github.com/imoutsatsos\">Ioannis Moutsatsos</a>. Ioannis\nmaintains a Jenkins installation in Novartis, and is probably the most skillful user\nof the Active Choices Plug-in.</p>\n<p>Another advantage of this other copy, is that it may be updated with time, in case there are\nbugs or improvements. So watch Ioannis&#8217; repository for updates!</p>\n<p>Happy hacking!</p></description>\n</item>\n\n<item>\n    <title>Drawing vector art: Kumamoto Kenjinkai mascot</title>\n    <pubDate>Apr 19, 2016</pubDate>\n    <link>/2016/04/19/drawing-kumamoto-kenjinkai-mascot</link>\n    <dc:creator></dc:creator>\n    <description><div class='row'>\n<div class=\"ui container\" style='text-align: center;'>\n<figure>\n<a href=\"/2016/04/19/drawing-kumamoto-kenjinkai-mascot/mascot.png\" rel=\"prettyPhoto\" class=\"thumbnail\" title=\"Kumamoto Kenjinkai mascot\">\n<img class=\"ui fluid image\" src=\"/2016/04/19/drawing-kumamoto-kenjinkai-mascot/mascot.png\" alt=\"Kumamoto Kenjinkai mascot\" />\n</a>\n<figcaption>Kumamoto Kenjinkai mascot</figcaption>\n</figure>\n</div>\n</div>\n\n<p>For Brazilian Kumamoto Kenjinkai. Done with Macromedia Freehand MX, some long time ago.</p></description>\n</item>\n\n<item>\n    <title>Trying SaltStack with Docker</title>\n    <pubDate>Apr 17, 2016</pubDate>\n    <link>/2016/04/17/trying-saltstack-with-docker</link>\n    <dc:creator></dc:creator>\n    <description><p>Some weeks ago I started learning <a href=\"http://saltstack.com/\">SaltStack</a> for a project at work. But I couldn&#8217;t\nfind a good Docker image for that and I had to ask the Ops team for some VM&#8217;s. We\nare having a rainy weekend in Auckland, so I decided to have another look at the\n<a href=\"https://wiki.jenkins-ci.org/display/JENKINS/saltstack-plugin\">Jenkins SaltStack Plug-in</a>.</p>\n<p>But now since I was at home, I couldn&#8217;t use the VM&#8217;s that I had access to at\nwork. So decided to look again at Docker or Vagrant images. After playing\nwith a few images, I found <a href=\"https://hub.docker.com/r/bbinet/salt-master/\">bbinet/salt-master</a>.\nIt not only sets up a master, but also provides an easy way to enable the cherrypy\nAPI (necessary for the Jenkins plug-in).</p>\n<p>This post describes the steps that I took to have a running Salt Master with the API\nenabled. First you need to create some directories and files to use with the image.</p>\n<div class=\"highlight\"><pre>shell<span class=\"nv\">$ </span>mkdir ~/master <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">cd</span> ~/master\nshell<span class=\"nv\">$ </span>mkdir -p config/master.d/\nshell<span class=\"nv\">$ </span>vim config/master.d/api.conf\n</pre></div>\n\n<p>The api.conf contains the SaltStack API configuration. You can change port, user\nand other settings if necessary. Just remember to add a credential in Jenkins\nfor the plug-in.</p>\n<div class=\"highlight\"><pre><span class=\"c\"># File: api.conf</span>\nexternal_auth:\n  pam:\n    saltapiuser:\n      - .*\n      - <span class=\"s1\">&#39;@runner&#39;</span>\n      - <span class=\"s1\">&#39;@wheel&#39;</span>\n      - <span class=\"s1\">&#39;@jobs&#39;</span>\nrest_cherrypy:\n  port: 8000\n  host: 0.0.0.0\n  disable_ssl: True\n  static: /opt/molten\n  static_path: /assets\n  app: /opt/molten/index.html\n  app_path: /molten\n</pre></div>\n\n<p>The image also conveniently provides a script that is executed before the\nentry point (if provided). So we can also create a user for the API automatically\nwhen the image is created.</p>\n<div class=\"highlight\"><pre>shell<span class=\"nv\">$ </span>vim config/before-exec.sh\n</pre></div>\n\n<div class=\"highlight\"><pre><span class=\"c\">#!/bin/bash</span>\n<span class=\"c\"># File: before-exec.sh</span>\nuseradd saltapiuser\n<span class=\"nb\">echo</span> -e <span class=\"s2\">&quot;nosecret\\nnosecret\\n&quot;</span> <span class=\"p\">|</span> passwd saltapiuser\n<span class=\"nb\">exit </span>0\n</pre></div>\n\n<p>Also make the script executable.</p>\n<div class=\"highlight\"><pre>chmod +x config/before-exec.sh\n</pre></div>\n\n<p>And finally start the container.</p>\n<div class=\"highlight\"><pre>docker run --name salt-master -v <span class=\"nv\">$PWD</span>/config:/config <span class=\"se\">\\</span>\n    -p 4505:4505 -p 4506:4506 -p 443:443 -p 8000:8000 <span class=\"se\">\\</span>\n    bbinet/salt-master\n</pre></div>\n\n<p>Once the container is running, you can go to http://localhost:8000 and\nlog in as saltapiuser:nosecret, and also configure your plug-in\nin Jenkins.</p>\n<p>Happy hacking!</p></description>\n</item>\n\n<item>\n    <title>Geek Vacation 2016</title>\n    <pubDate>Apr 08, 2016</pubDate>\n    <link>/2016/04/08/geek-vacation-2016</link>\n    <dc:creator></dc:creator>\n    <description><p>I just had a two week vacation, and I tried to use my time to rest, play some music, and\ncomplete a geek todo-list. </p>\n<p>The list included things that I used some time ago but wanted to\nrefresh my memory, things that I already used but never spent time reading the manuals, and\nother things that I saw somewhere but never actually used in any project.</p>\n<p>Here the complete list, with the items that were completed highlighted. Some links with\npointers to what I used to study.</p>\n<ul>\n<li>gdb, strace, ptrace, etc, sysdig, dtrace (looked for links at <a href=\"https://news.ycombinator.com/\">HackerNews</a> and <a href=\"https://www.reddit.com/\">reddit</a>) \u2714</li>\n<li>geodesy (<a href=\"https://en.wikipedia.org/wiki/Geodesy\">Wikipedia</a>, some PDF&#8217;s) \u2714</li>\n<li>QGIS (<a href=\"http://www.bostongis.com/?content_name=qgis\">Boston GIS docs</a> and <a href=\"http://youtube.com\">YouTube</a> videos) \u2714</li>\n<li>SRS &amp; CRS (<a href=\"https://en.wikipedia.org/wiki/Spatial_reference_system\">Wikipedia</a>) \u2714</li>\n<li>BioPython (<a href=\"http://biopython.org/\">project page</a>) \u2714</li>\n<li>BioConda (<a href=\"https://bioconda.github.io/\">project page</a>) \u2714</li>\n<li>Weaver &amp; asm (<a href=\"https://commons.apache.org/proper/commons-weaver/\">project page</a> and <a href=\"https://en.wikipedia.org/wiki/ObjectWeb_ASM\">Wikipedia</a>) \u2714</li>\n<li>afl (project page, and some <a href=\"http://kinoshita.eti.br/2016/02/27/learning-afl-and-testing-mapserver.html\">tests with MapServer</a>) \u2714</li>\n<li>WFS (<a href=\"https://en.wikipedia.org/wiki/Web_Feature_Service\">Wikipedia</a>, <a href=\"http://docs.geoserver.org/latest/en/user/services/wfs/reference.html\">GeoServer</a> and <a href=\"http://mapserver.org/ogc/wfs_server.html\">MapServer</a>) \u2714</li>\n<li>SaltStack (<a href=\"http://saltstack.com/\">project page</a>, <a href=\"https://wiki.jenkins-ci.org/display/JENKINS/saltstack-plugin\">Jenkins Plug-ins for SaltStack</a>, and a few tests with VM&#8217;s and Docker) \u2714</li>\n<li>InfluxDB (<a href=\"https://influxdata.com/\">project page</a>) \u2714</li>\n<li>rr (<a href=\"http://rr-project.org/\">project page</a> and some local tests) \u2714</li>\n<li>ZeroMQ (<a href=\"http://zeromq.org/\">project page</a>, <a href=\"https://github.com/saltstack/salt/blob/90b0a42a21dc11ca118ffbb679e0871f234c17bc/salt/transport/zeromq.py\">SaltStack source code</a>) \u2714</li>\n<li>netty (<a href=\"http://netty.io/\">project page</a>) \u2714</li>\n<li>RethinkDB (<a href=\"https://rethinkdb.com/\">project page</a>, and a <a href=\"https://github.com/kinow/jira-rethinkdb\">test project</a>) \u2714</li>\n<li>C++ (templates, abstractions in C++, etc) (<a href=\"http://www.codeproject.com/Articles/257589/An-Idiots-Guide-to-Cplusplus-Templates-Part\">just this article to remember syntax</a>) \u2714</li>\n<li>Linear programming (<a href=\"http://benalexkeen.com/linear-programming-with-python-and-pulp/\">PuLP docs</a>) \u2714</li>\n<li>AKKA (<a href=\"http://akka.io/\">project page</a>) \u2714</li>\n<li>Frege (<a href=\"https://github.com/Frege/frege\">project page</a> (reading their <a href=\"https://www.gitbook.com/book/dierk/fregegoodness/details\">new book</a>))</li>\n<li>JVM internals (played a little with <a href=\"http://asm.ow2.org/\">asm</a>, <a href=\"http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javap.html\">javap</a>)</li>\n<li>Java Concurrency (started re-reading <a href=\"http://jcip.net/\">Java Concurrency in Practice</a>, but still in the initial chapters)</li>\n<li>PostGIS (<a href=\"postgis.net/\">project page</a>)</li>\n<li>Krita (<a href=\"https://krita.org/\">project page</a> and <a href=\"http://www.davidrevoy.com/article193/guide-building-krita-on-linux-for-cats\">David Revoy&#8217;s tutorials</a>)</li>\n<li>Scala (<a href=\"http://www.scala-lang.org/\">project page</a>)</li>\n<li>Minecraft Forge (<a href=\"http://www.minecraftforge.net/forum/\">project forum</a>)</li>\n<li>Graphs in Jenkins, cylc, Spark, Jena and clue/graph (didn&#8217;t have time for this one)</li>\n</ul>\n<p>Going to have less spare time now for Open Source and learning the rest of the stuff on this list,\nbut there&#8217;s always some books to read, and things to learn anyway right \u00af\\<em>(\u30c4)</em>/\u00af</p></description>\n</item>\n\n<item>\n    <title>Deploying WAR files to Tomcat with Jenkins</title>\n    <pubDate>Mar 20, 2016</pubDate>\n    <link>/2016/03/20/deploying-war-files-to-tomcat-with-jenkins</link>\n    <dc:creator></dc:creator>\n    <description><p><strong>Table of Contents</strong></p>\n<ul>\n<li><a href=\"#1-deploying-with-custom-scripts\">Deploying with custom scripts</a></li>\n<li><a href=\"#2-deploying-with-a-build-tool\">Deploying with a build tool</a></li>\n<li><a href=\"#3-deploying-with-a-build-server\">Deploying with a build server</a></li>\n<li><a href=\"#final-thoughts\">Final thoughts</a></li>\n</ul>\n<p>A co-worker asked me this week about how to deploy a WAR file to Tomcat with Jenkins. In my team we are\ncurrently maintaining and deploying about 10 Java web systems, but we have no consistent way of deploying\nthe applications to Tomcat yet. In the past I used Ant, Maven, Cargo, Grunt, and Jenkins, so I\ndecided to write this short post to show a few different ways it can be achieved, &agrave; la\n<a href=\"https://en.wikipedia.org/wiki/There's_more_than_one_way_to_do_it\">Perl&#8217;s TMTOWTDI</a> motto.</p>\n<h2><a name=\"1-deploying-with-custom-scripts\" style=\"color: #222222;\">#1 Deploying with custom scripts</a></h2>\n\n<p>At first you may be tempted to write your own script to deploy to Tomcat with some Shell, Perl, Python\nor Java. But I think I would choose this option only because either I needed some feature that is not\navailable in the other options, or in order to call other tasks or debug some problem.</p>\n<p>Example:</p>\n<div class=\"highlight\"><pre><span class=\"nv\">$ </span>docker run -d -p 8888:8080 jeanblanchard/tomcat:8\n<span class=\"nv\">$ </span>git clone https://github.com/spring-projects/spring-petclinic.git <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">cd </span>spring-petclinic <span class=\"o\">&amp;&amp;</span> mvn package\n<span class=\"nv\">$ </span>curl --upload-file target/petclinic.war <span class=\"s2\">&quot;http://admin:admin@localhost:8888/manager/text/deploy?path=/spring-petclinic&amp;update=true&quot;</span>\nOK - Deployed application at context path /spring-petclinic\n</pre></div>\n\n</description>\n</item>\n\n<item>\n    <title>Drawing sketch: Cheese</title>\n    <pubDate>Mar 20, 2016</pubDate>\n    <link>/2016/03/20/drawing-sketch-cheese</link>\n    <dc:creator></dc:creator>\n    <description><div class='row'>\n<div class=\"ui container\" style='text-align: center;'>\n<figure>\n<a href=\"/2016/03/20/drawing-sketch-cheese/cheese.png\" rel=\"prettyPhoto\" class=\"thumbnail\" title=\"Cheese\">\n<img class=\"ui fluid image\" src=\"/2016/03/20/drawing-sketch-cheese/cheese.png\" alt=\"Cheese\" />\n</a>\n<figcaption>Cheese</figcaption>\n</figure>\n</div>\n</div>\n\n<p>For <a href=\"https://www.reddit.com/r/redditgetsdrawn/comments/42izou/this_is_me_with_my_favourite_food_its_cheese/\">redditgetsdrawn</a></p></description>\n</item>\n\n<item>\n    <title>Learning afl and testing MapServer</title>\n    <pubDate>Feb 27, 2016</pubDate>\n    <link>/2016/02/27/learning-afl-and-testing-mapserver</link>\n    <dc:creator></dc:creator>\n    <description><p><a href=\"http://lcamtuf.coredump.cx/afl/\">afl</a> is a fuzzer, an application that combines a series of algorithms\nin order to try invoking programs with several different input values. It then analyses the application\nexecution flow given different test case scenarios. \nYou can read more about fuzzing at <a href=\"https://www.owasp.org/index.php/Fuzzing\">this OWASP page</a>, or in other\nblogs that I also used while learning about afl\n<a href=\"/2016/02/27/using-afl-to-test-mapserver%231\">1</a>\n<a href=\"/2016/02/27/using-afl-to-test-mapserver%232\">2</a></p>\n<p>At work we are using MapServer for serving WFS and WMS. And I am using it for the\n<a href=\"http://maps.nzoss.org.nz\">NZ OpenStreetMap maps</a> too. MapServer is written in C++ and is normally\nexposed as a CGI script, so I thought it was worth learning about afl and trying it on MapServer,\nas in case it finds any interesting bug I can submit it to the MapServer project.</p>\n</description>\n</item>\n\n<item>\n    <title>How does the Jenkins Credentials Plug-in store passwords?</title>\n    <pubDate>Sep 07, 2015</pubDate>\n    <link>/2015/09/07/how_does_the_jenkins_credentials_plugin_store_passwords</link>\n    <dc:creator></dc:creator>\n    <description><p><a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Credentials+Plugin\">Jenkins Credentials Plug-in</a> manages credentials stored in Jenkins. These credentials can be used in many jobs and by plug-ins for executing SSH commands, authenticating to systems, or running other commands that need some sort of authentication or authorisation.</p>\n<p>I recently used its API for the first time in the <a href=\"https://github.com/biouno/figshare-plugin\">BioUno figshare Plug-in</a> to store OAuth 1.0 credentials (consumer key, consumer secret, token key, token secret). This <a href=\"http://biouno.org/2015/09/05/using_jenkins_credentials_plugin_to_create_the_biouno_figshare_plugin/\">blog post</a> has more details about how we used the plug-in, but this post is specifically on how the passwords are stored by Jenkins.</p>\n<h2>Secret and ciphers</h2>\n<p>Jenkins stores its configuration on disk as XML using the XStream library. Plug-in developers using the Credentials Plug-in API must use the <strong>Secret</strong> class to encrypt sensitive information.</p>\n<p>The <code>Secret.fromString</code> method is responsible for creating a cipher from a given String. As in the Secret Javadoc,  <em>&#8220;this is not meant as a protection against code running in the same VM, nor against an attacker who has local file system access on Jenkins master&#8221;</em>. But at least makes things more complicated :-)</p>\n<ul>\n<li><a href=\"http://javadoc.jenkins-ci.org/hudson/util/Secret.html\">Secret Javadoc</a></li>\n<li><a href=\"https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/hudson/util/Secret.java\">Secret source code</a></li>\n</ul>\n<div class=\"highlight\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"n\">Secret</span> <span class=\"nf\">fromString</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">data</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">Util</span><span class=\"o\">.</span><span class=\"na\">fixNull</span><span class=\"o\">(</span><span class=\"n\">data</span><span class=\"o\">);</span>\n    <span class=\"n\">Secret</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">decrypt</span><span class=\"o\">(</span><span class=\"n\">data</span><span class=\"o\">);</span>\n    <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">==</span><span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"n\">Secret</span><span class=\"o\">(</span><span class=\"n\">data</span><span class=\"o\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">s</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n<p>The first line simply replaces a null string by an empty &#8220;&#8221;, or keeps the current value of not null.</p>\n<p>After that, the decrypt method is called.</p>\n<div class=\"highlight\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"n\">Secret</span> <span class=\"nf\">decrypt</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">data</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">data</span><span class=\"o\">==</span><span class=\"kc\">null</span><span class=\"o\">)</span>      <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n    <span class=\"k\">try</span> <span class=\"o\">{</span>\n        <span class=\"kt\">byte</span><span class=\"o\">[]</span> <span class=\"n\">in</span> <span class=\"o\">=</span> <span class=\"n\">Base64</span><span class=\"o\">.</span><span class=\"na\">decode</span><span class=\"o\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"na\">toCharArray</span><span class=\"o\">());</span>\n        <span class=\"n\">Secret</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">tryDecrypt</span><span class=\"o\">(</span><span class=\"n\">KEY</span><span class=\"o\">.</span><span class=\"na\">decrypt</span><span class=\"o\">(),</span> <span class=\"n\">in</span><span class=\"o\">);</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">!=</span><span class=\"kc\">null</span><span class=\"o\">)</span>    <span class=\"k\">return</span> <span class=\"n\">s</span><span class=\"o\">;</span>\n\n        <span class=\"c1\">// try our historical key for backward compatibility</span>\n        <span class=\"n\">Cipher</span> <span class=\"n\">cipher</span> <span class=\"o\">=</span> <span class=\"n\">getCipher</span><span class=\"o\">(</span><span class=\"s\">&quot;AES&quot;</span><span class=\"o\">);</span>\n        <span class=\"n\">cipher</span><span class=\"o\">.</span><span class=\"na\">init</span><span class=\"o\">(</span><span class=\"n\">Cipher</span><span class=\"o\">.</span><span class=\"na\">DECRYPT_MODE</span><span class=\"o\">,</span> <span class=\"n\">getLegacyKey</span><span class=\"o\">());</span>\n        <span class=\"k\">return</span> <span class=\"n\">tryDecrypt</span><span class=\"o\">(</span><span class=\"n\">cipher</span><span class=\"o\">,</span> <span class=\"n\">in</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">GeneralSecurityException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">UnsupportedEncodingException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"n\">Error</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">);</span> <span class=\"c1\">// impossible</span>\n    <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">IOException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n<p>The <code>KEY.decrypt()</code> call will return a <a href=\"http://docs.oracle.com/javase/8/docs/api/javax/crypto/Cipher.html\"><code>javax.crypto.Cipher</code></a>. The Cipher class is handled in <a href=\"https://github.com/jenkinsci/jenkins/blob/93dfe3377ec8d430818f5b9073f16c677343adb4/core/src/main/java/jenkins/security/CryptoConfidentialKey.java\">CryptoConfidentialKey</a> in Jenkins API, where it defines the algorithm used to create the cipher: <a href=\"https://en.wikipedia.org/wiki/Advanced_Encryption_Standard\">AES</a>.</p>\n<p>Jenkins has also a <a href=\"https://github.com/jenkinsci/jenkins/blob/93dfe3377ec8d430818f5b9073f16c677343adb4/core/src/main/java/jenkins/security/ConfidentialStore.java#L63\">ConfidentialStore</a>, that is required to create the cipher. This class must be initialized before someone tries to create or read a cipher. This extra step also increases security, though access to the JVM is still a problem.</p>\n<p>It is a bit late, so it is all for today. In summary: the credentials plug-in gives you a central place to manage credentials, but it is up to plug-in developers to use it. Sensitive values can be encrypted with AES on disk. So it is important that your file permissions, ACL and system auditing processes are in place and well maintained and monitored.</p>\n<p>Happy hacking!</p></description>\n</item>\n\n<item>\n    <title>Modeling observation data in SOS (Sensor Observation Service)</title>\n    <pubDate>Jun 23, 2015</pubDate>\n    <link>/2015/06/23/modeling-observation-data-in-sos</link>\n    <dc:creator></dc:creator>\n    <description><p>This week NZ Herald published an <a href=\"http://www.nzherald.co.nz/technology/news/article.cfm?c_id=5&amp;objectid=11469418\">article</a>\nabout a device created by an Irish farmer enterpreneur that sends a message to a farmer when the cow is about to give birth.\nThe device monitors &#8220;heightened tail moviment&#8221;.</p>\n<p>In this post I will try to apply what I am learning following the <a href=\"http://www.ogcnetwork.net/SOS_2_0/tutorial\">SOS Tutorial</a>\n(the Open Geospatial Consortium standard for Sensor Observation Service). Feel free to drop me a message via\n<a href=\"https://twitter.com/kinow\">@kinow</a> if you find any mistakes or have any suggestions.</p>\n<h2>Modeling the tail moviment observation data in SOS</h2>\n<p>SOS is a standard designed to provide access to observation data. There are several server implementations, such as Kisters KiWIS, \nistSOS and 52North SOS.</p>\n<p>The standard mentions and utilises several other standards, such as SensorML, WFS, XML, WMS, etc. The SOS Tutorial on\nhow to model your observation data for SOS starts by defining <em>procedure</em>, <em>observed property</em>, <em>feature of interest</em>,\n<em>phenomenon and result times</em>, and the <em>result value</em>.</p>\n<p>Let&#8217;s try to model the data from the tail moviment sensors in the following table.</p>\n<table class=\"table table-bordered\">\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n<th>Our example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<th>Procedure</th>\n<td>The process that has generated the observation, such as a sensor, from the O&M specification. In our example that could be a sensor identification</td>\n<td>moocall_001</td>\n</tr>\n<tr>\n<th>Observed Property</th>\n<td>A property which is observed (look at NASA SWEET ontology for existing values)</td>\n<td>Heightned tail moviment</td>\n</tr>\n<tr>\n<th>Feature of Interest</th>\n<td>A feature that carries the property which is observed</td>\n<td>Pregnant cow</td>\n</tr>\n<tr>\n<th>Phenomenon and Result Times</th>\n<td>The phenomenon time is when the data has been taken, and the result time when it has been created. If both are the same, the resultTime can point to the phenomenonTime</td>\n<td>20150623142000</td>\n</tr>\n<tr>\n<th>Result value</th>\n<td>This is the result of the observation. Can be a OM_Measurement if numeric, OM_TruthObservation, etc (O&M)</td>\n<td>3 (supposing we have a scale from 1 to 5)</td>\n</tr>\n</tbody>\n</table>\n\n<p>In the next post I will try to show how to load this model and some dummy data into a fresh installation of\n52North SOS server.</p></description>\n</item>\n\n<item>\n    <title>Groovy Hooks in Jenkins for increasing logging level</title>\n    <pubDate>Apr 12, 2015</pubDate>\n    <link>/2015/04/12/groovy-hooks-in-jenkins-for-increasing-logging-level</link>\n    <dc:creator></dc:creator>\n    <description><p>Yesterday, while debugging a problem we had in the <a href=\"http://biouno.org\">BioUno</a> update center, \nI realized that after <a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Logging\">increasing the logging level in the WEB interface</a>, \nthe messages that I needed weren&#8217;t being displayed in the logs.</p>\n<p>It happened because some of the logging happened during Jenkins initialization, and before I could adjust the log level.</p>\n<p>The solution was to use a <a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Groovy+Hook+Script\">Groovy Hook Script</a>. \nIf you are familiar with Linux init scripts, the idea is quite similar. </p>\n<p>A Groovy script in the <code>$JENKINS_ROOT_DIR/init.groovy.d/</code> directory is executed during\nJenkins initialization. This way you can increase the global logger level with a script\nas the following below.</p>\n<div class=\"highlight\"><pre><span class=\"kn\">import</span> <span class=\"nn\">java.util.logging.ConsoleHandler</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.logging.LogManager</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.logging.Logger</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.logging.Level</span>\n\n<span class=\"n\">def</span> <span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">Logger</span><span class=\"o\">.</span><span class=\"na\">getLogger</span><span class=\"o\">(</span><span class=\"s\">&quot;&quot;</span><span class=\"o\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"na\">setLevel</span><span class=\"o\">(</span><span class=\"n\">Level</span><span class=\"o\">.</span><span class=\"na\">FINEST</span><span class=\"o\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"na\">addHandler</span> <span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">ConsoleHandler</span><span class=\"o\">())</span>\n</pre></div>\n\n<p>Happy logging!</p></description>\n</item>\n\n</channel>\n</rss>"}, "pass_info": {"used_taxonomy_terms": [], "used_pagination": true, "pagination_has_more": true, "used_assets": false, "used_source_names": ["posts"]}}