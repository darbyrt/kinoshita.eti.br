{"segments": {"content": "<p>When I was younger and my older brother was living in Germany, I asked him if he \nhad learned German. He said that he did, and explained that there are several \ndialects, and he was quite proud for some people told him that he was using the \nBavarian dialect correctly.</p>\n<p>Even though <a href=\"http://www.neo4j.org/learn/cypher\">Cypher</a>, \n<a href=\"http://gremlindocs.com/\">Gremlin</a> and <a href=\"http://en.wikipedia.org/wiki/SPARQL\">SPARQL</a> \nare all query languages, I think we can consider them dialects of a common graph language. \nCypher is the query language used in <a href=\"http://www.neo4j.org/\">neo4j</a>, a graph database. \nGremlin is part of the <a href=\"http://www.tinkerpop.com/\">Tinkerpop</a>, an open source project \nthat contains graph server, graph algorithms, graph language, among other sub-projects. \nAnd last but not least, SPARQL is used to query <a href=\"http://en.wikipedia.org/wiki/Resource_Description_Framework\">RDF documents</a>.</p>\n<p>Let&#8217;s use the example of the Matrix movie provided by neo4j to take a look at the \nthree languages.</p>\n<h2>Cypher</h2>\n<p>First we create the graph.</p>\n<div class=\"highlight\"><pre><span class=\"k\">create</span> <span class=\"p\">(</span><span class=\"n\">matrix1</span><span class=\"p\">:</span><span class=\"n\">Movie</span> <span class=\"err\">{</span><span class=\"n\">id</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;603&#39;</span><span class=\"p\">,</span> <span class=\"n\">title</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;The Matrix&#39;</span><span class=\"p\">,</span> <span class=\"k\">year</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;1999-03-31&#39;</span><span class=\"err\">}</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"n\">matrix2</span><span class=\"p\">:</span><span class=\"n\">Movie</span> <span class=\"err\">{</span><span class=\"n\">id</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;604&#39;</span><span class=\"p\">,</span> <span class=\"n\">title</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;The Matrix Reloaded&#39;</span><span class=\"p\">,</span> <span class=\"k\">year</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;2003-05-07&#39;</span><span class=\"err\">}</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"n\">matrix3</span><span class=\"p\">:</span><span class=\"n\">Movie</span> <span class=\"err\">{</span><span class=\"n\">id</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;605&#39;</span><span class=\"p\">,</span> <span class=\"n\">title</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;The Matrix Revolutions&#39;</span><span class=\"p\">,</span> <span class=\"k\">year</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;2003-10-27&#39;</span><span class=\"err\">}</span><span class=\"p\">),</span>\n\n <span class=\"p\">(</span><span class=\"n\">neo</span><span class=\"p\">:</span><span class=\"n\">Actor</span> <span class=\"err\">{</span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"s1\">&#39;Keanu Reeves&#39;</span><span class=\"err\">}</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"n\">morpheus</span><span class=\"p\">:</span><span class=\"n\">Actor</span> <span class=\"err\">{</span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"s1\">&#39;Laurence Fishburne&#39;</span><span class=\"err\">}</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"n\">trinity</span><span class=\"p\">:</span><span class=\"n\">Actor</span> <span class=\"err\">{</span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"s1\">&#39;Carrie-Anne Moss&#39;</span><span class=\"err\">}</span><span class=\"p\">),</span>\n\n <span class=\"p\">(</span><span class=\"n\">matrix1</span><span class=\"p\">)</span><span class=\"o\">&lt;-</span><span class=\"p\">[:</span><span class=\"n\">ACTS_IN</span> <span class=\"err\">{</span><span class=\"k\">role</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;Neo&#39;</span><span class=\"err\">}</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"p\">(</span><span class=\"n\">neo</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"n\">matrix2</span><span class=\"p\">)</span><span class=\"o\">&lt;-</span><span class=\"p\">[:</span><span class=\"n\">ACTS_IN</span> <span class=\"err\">{</span><span class=\"k\">role</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;Neo&#39;</span><span class=\"err\">}</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"p\">(</span><span class=\"n\">neo</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"n\">matrix3</span><span class=\"p\">)</span><span class=\"o\">&lt;-</span><span class=\"p\">[:</span><span class=\"n\">ACTS_IN</span> <span class=\"err\">{</span><span class=\"k\">role</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;Neo&#39;</span><span class=\"err\">}</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"p\">(</span><span class=\"n\">neo</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"n\">matrix1</span><span class=\"p\">)</span><span class=\"o\">&lt;-</span><span class=\"p\">[:</span><span class=\"n\">ACTS_IN</span> <span class=\"err\">{</span><span class=\"k\">role</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;Morpheus&#39;</span><span class=\"err\">}</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"p\">(</span><span class=\"n\">morpheus</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"n\">matrix2</span><span class=\"p\">)</span><span class=\"o\">&lt;-</span><span class=\"p\">[:</span><span class=\"n\">ACTS_IN</span> <span class=\"err\">{</span><span class=\"k\">role</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;Morpheus&#39;</span><span class=\"err\">}</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"p\">(</span><span class=\"n\">morpheus</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"n\">matrix3</span><span class=\"p\">)</span><span class=\"o\">&lt;-</span><span class=\"p\">[:</span><span class=\"n\">ACTS_IN</span> <span class=\"err\">{</span><span class=\"k\">role</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;Morpheus&#39;</span><span class=\"err\">}</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"p\">(</span><span class=\"n\">morpheus</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"n\">matrix1</span><span class=\"p\">)</span><span class=\"o\">&lt;-</span><span class=\"p\">[:</span><span class=\"n\">ACTS_IN</span> <span class=\"err\">{</span><span class=\"k\">role</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;Trinity&#39;</span><span class=\"err\">}</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"p\">(</span><span class=\"n\">trinity</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"n\">matrix2</span><span class=\"p\">)</span><span class=\"o\">&lt;-</span><span class=\"p\">[:</span><span class=\"n\">ACTS_IN</span> <span class=\"err\">{</span><span class=\"k\">role</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;Trinity&#39;</span><span class=\"err\">}</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"p\">(</span><span class=\"n\">trinity</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"n\">matrix3</span><span class=\"p\">)</span><span class=\"o\">&lt;-</span><span class=\"p\">[:</span><span class=\"n\">ACTS_IN</span> <span class=\"err\">{</span><span class=\"k\">role</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;Trinity&#39;</span><span class=\"err\">}</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"p\">(</span><span class=\"n\">trinity</span><span class=\"p\">)</span>\n</pre></div>\n\n<p><code>Added 6 labels, created 6 nodes, set 21 properties, created 9 relationships, returned 0 rows in 2791 ms</code></p>\n<p>And execute a simple query.</p>\n<div class=\"highlight\"><pre><span class=\"k\">MATCH</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span><span class=\"n\">Actor</span> <span class=\"err\">{</span> <span class=\"n\">name</span><span class=\"p\">:</span><span class=\"ss\">&quot;Keanu Reeves&quot;</span> <span class=\"err\">}</span><span class=\"p\">)</span>\n<span class=\"k\">RETURN</span> <span class=\"n\">a</span>\n</pre></div>\n\n<p><code>(9:Actor {name:\"Keanu Reeves\"})</code></p>\n<h2>Gremlin</h2>\n<p>Again, let&#8217;s start by creating our graph.</p>\n<div class=\"highlight\"><pre><span class=\"k\">g</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">TinkerGraph</span><span class=\"p\">();</span>\n<span class=\"n\">matrix1</span> <span class=\"o\">=</span> <span class=\"k\">g</span><span class=\"p\">.</span><span class=\"n\">addVertex</span><span class=\"p\">([</span><span class=\"ss\">&quot;_id&quot;</span><span class=\"p\">:</span><span class=\"mi\">603</span><span class=\"p\">,</span><span class=\"ss\">&quot;title&quot;</span><span class=\"p\">:</span><span class=\"ss\">&quot;The Matrix&quot;</span><span class=\"p\">,</span> <span class=\"ss\">&quot;year&quot;</span><span class=\"p\">:</span> <span class=\"ss\">&quot;1999-03-31&quot;</span><span class=\"p\">]);</span>\n<span class=\"n\">matrix2</span> <span class=\"o\">=</span> <span class=\"k\">g</span><span class=\"p\">.</span><span class=\"n\">addVertex</span><span class=\"p\">([</span><span class=\"ss\">&quot;_id&quot;</span><span class=\"p\">:</span><span class=\"mi\">604</span><span class=\"p\">,</span><span class=\"ss\">&quot;title&quot;</span><span class=\"p\">:</span><span class=\"ss\">&quot;The Matrix Reloaded&quot;</span><span class=\"p\">,</span> <span class=\"ss\">&quot;year&quot;</span><span class=\"p\">:</span> <span class=\"ss\">&quot;2003-05-07&quot;</span><span class=\"p\">]);</span>\n<span class=\"n\">matrix3</span> <span class=\"o\">=</span> <span class=\"k\">g</span><span class=\"p\">.</span><span class=\"n\">addVertex</span><span class=\"p\">([</span><span class=\"ss\">&quot;_id&quot;</span><span class=\"p\">:</span><span class=\"mi\">605</span><span class=\"p\">,</span><span class=\"ss\">&quot;title&quot;</span><span class=\"p\">:</span><span class=\"ss\">&quot;The Matrix Revolutions&quot;</span><span class=\"p\">,</span> <span class=\"ss\">&quot;year&quot;</span><span class=\"p\">:</span> <span class=\"ss\">&quot;2003-10-27&quot;</span><span class=\"p\">]);</span>\n\n<span class=\"n\">neo</span> <span class=\"o\">=</span> <span class=\"k\">g</span><span class=\"p\">.</span><span class=\"n\">addVertex</span><span class=\"p\">([</span><span class=\"ss\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"ss\">&quot;Keanu Reeves&quot;</span><span class=\"p\">]);</span>\n<span class=\"n\">morpheus</span> <span class=\"o\">=</span> <span class=\"k\">g</span><span class=\"p\">.</span><span class=\"n\">addVertex</span><span class=\"p\">([</span><span class=\"ss\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"ss\">&quot;Laurence Fishburne&quot;</span><span class=\"p\">]);</span>\n<span class=\"n\">trinity</span> <span class=\"o\">=</span> <span class=\"k\">g</span><span class=\"p\">.</span><span class=\"n\">addVertex</span><span class=\"p\">([</span><span class=\"ss\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"ss\">&quot;Carrie-Anne Moss&quot;</span><span class=\"p\">]);</span>\n\n<span class=\"n\">neo</span><span class=\"p\">.</span><span class=\"n\">addEdge</span><span class=\"p\">(</span><span class=\"ss\">&quot;actsIn&quot;</span><span class=\"p\">,</span> <span class=\"n\">matrix1</span><span class=\"p\">);</span> \n<span class=\"n\">neo</span><span class=\"p\">.</span><span class=\"n\">addEdge</span><span class=\"p\">(</span><span class=\"ss\">&quot;actsIn&quot;</span><span class=\"p\">,</span> <span class=\"n\">matrix2</span><span class=\"p\">);</span> \n<span class=\"n\">neo</span><span class=\"p\">.</span><span class=\"n\">addEdge</span><span class=\"p\">(</span><span class=\"ss\">&quot;actsIn&quot;</span><span class=\"p\">,</span> <span class=\"n\">matrix3</span><span class=\"p\">);</span> \n<span class=\"n\">morpheus</span><span class=\"p\">.</span><span class=\"n\">addEdge</span><span class=\"p\">(</span><span class=\"ss\">&quot;actsIn&quot;</span><span class=\"p\">,</span> <span class=\"n\">matrix1</span><span class=\"p\">);</span> \n<span class=\"n\">morpheus</span><span class=\"p\">.</span><span class=\"n\">addEdge</span><span class=\"p\">(</span><span class=\"ss\">&quot;actsIn&quot;</span><span class=\"p\">,</span> <span class=\"n\">matrix2</span><span class=\"p\">);</span> \n<span class=\"n\">morpheus</span><span class=\"p\">.</span><span class=\"n\">addEdge</span><span class=\"p\">(</span><span class=\"ss\">&quot;actsIn&quot;</span><span class=\"p\">,</span> <span class=\"n\">matrix3</span><span class=\"p\">);</span> \n<span class=\"n\">trinity</span><span class=\"p\">.</span><span class=\"n\">addEdge</span><span class=\"p\">(</span><span class=\"ss\">&quot;actsIn&quot;</span><span class=\"p\">,</span> <span class=\"n\">matrix1</span><span class=\"p\">);</span> \n<span class=\"n\">trinity</span><span class=\"p\">.</span><span class=\"n\">addEdge</span><span class=\"p\">(</span><span class=\"ss\">&quot;actsIn&quot;</span><span class=\"p\">,</span> <span class=\"n\">matrix2</span><span class=\"p\">);</span> \n<span class=\"n\">trinity</span><span class=\"p\">.</span><span class=\"n\">addEdge</span><span class=\"p\">(</span><span class=\"ss\">&quot;actsIn&quot;</span><span class=\"p\">,</span> <span class=\"n\">matrix3</span><span class=\"p\">);</span>\n</pre></div>\n\n<p>And execute a simple query.</p>\n<div class=\"highlight\"><pre><span class=\"k\">g</span><span class=\"p\">.</span><span class=\"n\">V</span><span class=\"p\">.</span><span class=\"n\">has</span><span class=\"p\">(</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Keanu Reeves&#39;</span><span class=\"p\">).</span><span class=\"k\">map</span>\n</pre></div>\n\n<p><code>gremlin&gt; g.V.has('name', 'Keanu Reeves').map\n==&gt;{name=Keanu Reeves}\ngremlin&gt;</code></p>\n<p>Quite similar to neo4j.</p>\n<h2>SPARQL</h2>\n<p>Let&#8217;s load our example (thanks to <a href=\"https://twitter.com/kendall\">Kendall G. Clark</a>). I used \n<a href=\"http://jena.apache.org/documentation/serving_data/\">Fuseki</a> to run these queries.</p>\n<div class=\"highlight\"><pre>@prefix :          <span class=\"nt\">&lt;http:</span><span class=\"err\">//example.org/matrix</span><span class=\"nt\">/&gt;</span> .\n\n :m1 a :Movie; :title &quot;The Matrix&quot;; :year &quot;1999-03-31&quot;.\n :m2 a :Movie; :title &quot;The Matrix Reloaded&quot;; :year &quot;2003-05-07&quot;.\n :m3 a :Movie; :title &quot;The Matrix Revolutions&quot;; :year &quot;2003-10-27&quot;.\n\n :neo a :Actor; :name &quot;Keanu Reeves&quot;.\n :morpheus a :Actor; :name &quot;Laurence Fishburne&quot;.\n :trinity a :Actor; :name &quot;Carrie-Anne Moss&quot;.\n\n :neo :hasRole [:as &quot;Neo&quot;; :in :m1].\n :neo :hasRole [:as &quot;Neo&quot;; :in :m2].\n :neo :hasRole [:as &quot;Neo&quot;; :in :m2].\n :morpheus :hasRole [:as &quot;Morpheus&quot;; :in :m1].\n :morpheus :hasRole [:as &quot;Morpheus&quot;; :in :m2].\n :morpheus :hasRole [:as &quot;Morpheus&quot;; :in :m2].\n :trinity :hasRole [:as &quot;Trinity&quot;; :in :m1].\n :trinity :hasRole [:as &quot;Trinity&quot;; :in :m2].\n :trinity :hasRole [:as &quot;Trinity&quot;; :in :m2].\n</pre></div>\n\n<p>And finally the SPARQL query.</p>\n<div class=\"highlight\"><pre><span class=\"k\">SELECT</span> <span class=\"o\">?</span><span class=\"n\">a</span> <span class=\"k\">WHERE</span> <span class=\"err\">{</span>\n   <span class=\"o\">?</span><span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"o\">&lt;</span><span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">example</span><span class=\"p\">.</span><span class=\"n\">org</span><span class=\"o\">/</span><span class=\"n\">matrix</span><span class=\"o\">/</span><span class=\"n\">Actor</span><span class=\"o\">&gt;</span> <span class=\"p\">.</span>\n   <span class=\"o\">?</span><span class=\"n\">a</span> <span class=\"o\">&lt;</span><span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">example</span><span class=\"p\">.</span><span class=\"n\">org</span><span class=\"o\">/</span><span class=\"n\">matrix</span><span class=\"o\">/</span><span class=\"n\">name</span><span class=\"o\">&gt;</span> <span class=\"o\">?</span><span class=\"n\">name</span> <span class=\"p\">.</span>\n   <span class=\"n\">FILTER</span><span class=\"p\">(</span><span class=\"o\">?</span><span class=\"n\">name</span>  <span class=\"o\">=</span> <span class=\"ss\">&quot;Keanu Reeves&quot;</span><span class=\"p\">)</span>\n<span class=\"err\">}</span>\n</pre></div>\n\n<p>Returning the Keanu Reeves actor instance.</p>\n<pre>-----------------------------------\n| a                               |\n===================================\n| &lt;http://example.org/matrix/neo&gt; |\n-----------------------------------</pre>\n\n<p>SPARQL supports inference (or I must say that OWL, RDFS and the reasoners do), \nbut it is easier to define the depth of a search in the graph using neo4j. As for \nGremlin, it has native support to Groovy and Java. There is a common denominator \nfor these three languages, but what makes them really powerful are their unique features. </p>\n<p>I hope you enjoyed, and that this post gave you a quick overview of some of the existing \ngraph languages. Make sure you ponder the pros and cons of each server/language, and \nmake the best decision for your project. Take a look at <a href=\"http://en.wikipedia.org/wiki/Graph_database#APIs_and_Graph_Query.2FProgramming_Languages\">other graph query languages</a> too.</p>\n<p>Happy hacking!</p>\n<hr />\n<p>This post has been updated as suggested by <a href=\"https://twitter.com/kendall\">@kendall</a> (Thank you!).\nYou can check the diff at <a href=\"https://github.com/kinow/kinoshita.eti.br/commits/master/site/_content/posts/2014-09-09_cypher-gremlin-and-sparql-graph-dialects.html\">GitHub</a></p>"}, "pass_info": {"used_taxonomy_terms": [], "used_pagination": false, "pagination_has_more": false, "used_assets": false, "used_source_names": []}}