{"segments": {"content.abstract": "<p><em>It is the first post about <strong>bioinformatics tools</strong>, but I will try to post more about other tools such as MrBayes, Structure, maybe some next generation sequencing tools too, and Bioperl, Biojava, and so on.</em></p>\n\n<p><em>As I am more a computer geek, rather than a bioinformatics one, I will focus on requirements for running these tools on clusters and the requirements to install them on your machine. The instructions require that you have an intermediary knowledge on *nix OS and sometimes a bit of programming experience.</em></p>\n\n<p><em>I will be using tutorials available on the Internet and hosting my code in <a href=\"http://www.github.com/kinow\" alt=\"GitHub kinow\" title=\"GitHub kinow\">GitHub/kinow</a>. Hammer time!</em></p>\n\n", "content": "<p><em>It is the first post about <strong>bioinformatics tools</strong>, but I will try to post more about other tools such as MrBayes, Structure, maybe some next generation sequencing tools too, and Bioperl, Biojava, and so on.</em></p>\n\n<p><em>As I am more a computer geek, rather than a bioinformatics one, I will focus on requirements for running these tools on clusters and the requirements to install them on your machine. The instructions require that you have an intermediary knowledge on *nix OS and sometimes a bit of programming experience.</em></p>\n\n<p><em>I will be using tutorials available on the Internet and hosting my code in <a href=\"http://www.github.com/kinow\" alt=\"GitHub kinow\" title=\"GitHub kinow\">GitHub/kinow</a>. Hammer time!</em></p>\n\n<!-- more -->\n\n<hr />\n\n<p style=\"text-align: center\"><a href=\"/2012/09/25/bioinformatic-tools-series-stacks/stacks_logo_300_156.png\"><img src=\"/2012/09/25/bioinformatic-tools-series-stacks/stacks_logo_300_156.png\" alt=\"\" title=\"stacks_logo\" width=\"300\" height=\"156\" class=\"aligncenter size-medium wp-image-1058\" /></a></p>\n\n<p><strong>Stacks</strong> is hosted at <a href=\"http://www.uoregon.edu/\" alt=\"Oregon University\" title=\"Oregon University\">Oregon University</a>, so if you are googling about it right now, probably a query including both &#8216;stacks&#8217; and &#8216;oregon&#8217; may give you better results (it&#8217;s good to know when you forget the web address). This is the stacks homepage: <a href=\"http://creskolab.uoregon.edu/stacks/\">http://creskolab.uoregon.edu/stacks/</a>.</p>\n\n<blockquote cite=\"http://creskolab.uoregon.edu/stacks/\">&#8220;Stacks is a software pipeline for building loci out of a set of short-read sequenced samples. Stacks was developed for the purpose of building genetic maps from RAD-Tag Illumina sequence data, but can also be readily applied to population studies, and phylogeography.&#8221;</blockquote>\n\n<p>I will follow the tutorial <a href=\"http://creskolab.uoregon.edu/stacks/pe_tut.php\" alt=\"Stacks tutorial\" title=\"Stacks tutorial\">&#8220;building mini-contigs from paired-end sequences&#8221;</a> to demonstrate how to use Stacks, and for each step executed I&#8217;ll post the directory and database sizes, as well as the processing time. My hardware is an Intel i5 quad core 2.30 GHz with 6GB of memory, running Debian 6.</p>\n\n<!--more-->\n\n<h2>Installing on your local computer</h2>\n\n<p>The installation is quite simple. However, Stacks come with a Web application, and during its pipeline analysis sometimes it uploads data to a database. So in our set up I&#8217;m going to use an Apache HTTP web server and MySQL database. Here&#8217;s a list of things you should have installed in your machine: </p>\n\n<ul>\n<li><a href=\"http://httpd.apache.org\" title=\"Apache httpd\">Apache HTTP web server</a> (you could try NGINX, or others too, but you would need a PHP interpreter) - my version: Apache/2.2.22 (Debian)</li>\n<li><a href=\"http://www.php.net\" title=\"PHP\">PHP</a> (not sure if 5> is required) - my version: Ver 14.14 Distrib 5.5.24, for debian-linux-gnu (x86_64) using readline 6.2</li>\n<li>PHP MDB2 module installed (pear install MDB2 does the trick most of the times)</li>\n<li><a href=\"http://www.mysql.org/\" title=\"MySQL\">MySQL</a> database (stacks come with a SQL script for MySQL, not sure how hard it would be to adapt this script and the perl utilities to use Oracle, DB2, etc) - my version: Ver 14.14 Distrib 5.5.24, for debian-linux-gnu (x86_64) using readline 6.2</li>\n<li><a href=\"http://www.perl.org\" title=\"Perl\">Perl</a> (5 is fine, didn&#8217;t test with 6) - This is perl 5, version 14, subversion 2 (v5.14.2) built for x86_64-linux-gnu-thread-multi</li>\n<li>DBD::mysql and SPREADSHEET::WriteExcel modules (<a href=\"http://www.cpan.org\" title=\"CPAN\">CPAN</a>, yay!)</li>\n<li><a href=\"http://www.ebi.ac.uk/~zerbino/velvet/\" title=\"Velvet\">Velvet</a> (for contigs) - my version: 1.2.07</li>\n<li>A gcc compiler with OpenMP for multi-threading. My version: \nUsing built-in specs.\nCOLLECT_GCC=gcc\nCOLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/4.7/lto-wrapper\nTarget: x86_64-linux-gnu\nConfigured with: ../src/configure -v &#8212;with-pkgversion=&#8217;Debian 4.7.1-8&#8217; &#8212;with-bugurl=file:///usr/share/doc/gcc-4.7/README.Bugs &#8212;enable-languages=c,c++,go,fortran,objc,obj-c++ &#8212;prefix=/usr &#8212;program-suffix=-4.7 &#8212;enable-shared &#8212;enable-linker-build-id &#8212;with-system-zlib &#8212;libexecdir=/usr/lib &#8212;without-included-gettext &#8212;enable-threads=posix &#8212;with-gxx-include-dir=/usr/include/c++/4.7 &#8212;libdir=/usr/lib &#8212;enable-nls &#8212;with-sysroot=/ &#8212;enable-clocale=gnu &#8212;enable-libstdcxx-debug &#8212;enable-libstdcxx-time=yes &#8212;enable-gnu-unique-object &#8212;enable-plugin &#8212;enable-objc-gc &#8212;with-arch-32=i586 &#8212;with-tune=generic &#8212;enable-checking=release &#8212;build=x86_64-linux-gnu &#8212;host=x86_64-linux-gnu &#8212;target=x86_64-linux-gnu\nThread model: posix\ngcc version 4.7.1 (Debian 4.7.1-8)</li>\n</ul>\n\n<p>Install Stacks with the classic <em>./configure</em>, <em>make</em>, <em>make install</em>. It will put several utilities and Perl scripts in your PATH. For testing if the installation worked, try running <em>ustacks</em>. You may need to update your Apache HTTP settings to include a virtual directory to the stacks web folder. In my computer this folder is located at <em>/usr/local/share/stacks/php</em>.</p>\n\n<h2>Installing on your cluster</h2>\n\n<p>Stacks uses <strong>OpenMP</strong> for running over multiple CPU&#8217;s. I have a small commodity-hardware cluster that is quite handy for MapReduce and MPI processing, but for this case I will have to use only one machine. So I&#8217;m using my notebook with four cores, and using <a href=\"http://ganglia.sourceforge.net\" title=\"Ganglia\">Ganglia</a> and htop/free for monitoring CPU and memory usage.</p>\n\n<h2>Following the Stacks tutorial</h2>\n\n<p>The tutorial requires that you download samples and create some directories and a database. Here&#8217;s the status of my system before the analysis.</p>\n\n<p><strong>Database size: 880KB</strong></p>\n\n<p><strong>Directory size: 2.6 GB</strong></p>\n\n<p><code>kinow@chuva:~/Desktop/pe_tut$ du -h\n4.0K    ./stacks\n4.0K    ./assembled\n2.6G    ./samples\n4.0K    ./raw\n4.0K    ./pairs\n2.6G    .</code></p>\n<p>After these steps, you start your pipeline with the <em>denovo_map.pl</em> script. The denovo_map.pl script took 23 minutes to finish, and here&#8217;s the new status of my system.</p>\n\n<p><strong>Database size: 1.7 GB</strong></p>\n\n<p><strong>Directory size: 3.5 GB</strong></p>\n\n<p><code>kinow@chuva:~/Desktop/pe_tut$ du -h\n971M    ./stacks\n4.0K    ./assembled\n2.6G    ./samples\n4.0K    ./raw\n4.0K    ./pairs\n3.5G    .</code></p>\n<p>The next step is the <em>export_sql.pl</em> script. It took 31 minutes to finish.</p>\n\n<p><strong>Database size: 1.7 GB</strong></p>\n\n<p><strong>Directory size: 3.5 GB</strong></p>\n\n<p><code>kinow@chuva:~/Desktop/pe_tut$ du -h\n971M    ./stacks\n4.0K    ./assembled\n2.6G    ./samples\n4.0K    ./raw\n4.0K    ./pairs\n3.5G    .</code></p>\n<p>Half way to go. Now execute the <em>sort_read_pairs.pl</em> script. This was the longest and the one that consumed more memory, it took 49 minutes to finish.</p>\n\n<p><strong>Database size: 1.7 GB</strong></p>\n\n<p><strong>Directory size: 3.7 GB</strong></p>\n\n<p><code>kinow@chuva:~/Desktop/pe_tut$ du -h\n971M    ./stacks\n4.0K    ./assembled\n2.6G    ./samples\n4.0K    ./raw\n170M    ./pairs\n3.7G    .</code></p>\n<p>It&#8217;s time to get the contigs with Velvet now with <em>exec_velvet.pl</em>. Don&#8217;t worry, this one is faster, only 15 minutes.</p>\n\n<p><strong>Database size: 1.7 GB</strong></p>\n\n<p><strong>Directory size: 3.7 GB</strong></p>\n\n<p><code>kinow@chuva:~/Desktop/pe_tut$ du -h\n971M    ./stacks\n3.4M    ./assembled\n2.6G    ./samples\n4.0K    ./raw\n170M    ./pairs\n3.7G    .</code></p>\n<p>Last two scripts to execute. First <em>load_sequences.pl</em>, that apparently loads some data into the database. It took 3 minutes to finish.</p>\n\n<p><strong>Database size: 1.8 GB</strong></p>\n\n<p><strong>Directory size: 3.7 GB</strong></p>\n\n<p><code>kinow@chuva:~/Desktop/pe_tut$ du -h\n971M    ./stacks\n3.4M    ./assembled\n2.6G    ./samples\n4.0K    ./raw\n170M    ./pairs\n3.7G    .</code></p>\n<p>And finally <em>index_radtags.pl</em> which took only 1 minute.</p>\n\n<p><strong>Database size: 1.8 GB</strong></p>\n\n<p><strong>Directory size: 3.7 GB</strong></p>\n\n<p><code>kinow@chuva:~/Desktop/pe_tut$ du -h\n971M    ./stacks\n3.4M    ./assembled\n2.6G    ./samples\n4.0K    ./raw\n170M    ./pairs\n3.7G    .</code></p>\n<h2>CPU, memory and disk usage</h2>\n\n<p>I was using Ganglia for monitoring Hadoop jobs, so I saved the graphs for the timeframe of the pipeline execution. I started to execute this analysis at 10AM, and finished about 2 and a half hours later (the process is not automated, so sometimes I had to check the output and documentation before executing the next step).</p>\n\n<p>Following you&#8217;ll find the raw graphs and another version with legends to help understand what was being executed.</p>\n\n<h3>CPU usage</h3>\n\n<p style=\"text-align: center\"><a href=\"/2012/09/25/bioinformatic-tools-series-stacks/cpu.png\"><img src=\"/2012/09/25/bioinformatic-tools-series-stacks/cpu.png\" alt=\"\" title=\"CPU usage\" width=\"747\" height=\"418\" class=\"aligncenter size-full wp-image-1043\" /></a></p>\n\n<p style=\"text-align: center\"><a href=\"/2012/09/25/bioinformatic-tools-series-stacks/cpu_legends.png\"><img src=\"/2012/09/25/bioinformatic-tools-series-stacks/cpu_legends.png\" alt=\"\" title=\"CPU usage with legends\" width=\"747\" height=\"418\" class=\"aligncenter size-full wp-image-1050\" /></a></p>\n\n<h3>Memory usage</h3>\n\n<p style=\"text-align: center\"><a href=\"/2012/09/25/bioinformatic-tools-series-stacks/memory.png\"><img src=\"/2012/09/25/bioinformatic-tools-series-stacks/memory.png\" alt=\"\" title=\"Memory usage\" width=\"747\" height=\"430\" class=\"aligncenter size-full wp-image-1048\" /></a></p>\n\n<p style=\"text-align: center\"><a href=\"/2012/09/25/bioinformatic-tools-series-stacks/memory_legends.png\"><img src=\"/2012/09/25/bioinformatic-tools-series-stacks/memory_legends.png\" alt=\"\" title=\"Memory usage with legends\" width=\"747\" height=\"430\" class=\"aligncenter size-full wp-image-1052\" /></a></p>\n\n<h3>Disk usage</h3>\n\n<p>I thought the disk graphs from Ganglia wouldn&#8217;t represent the disk usage very well, specially since my disk has about 500GB, so it&#8217;s harder to see the changes. So I used some R to plot a graph that I hope can demonstrate the usage for this tutorial. <strong>It is important to highlight that we are using samples from a tutorial, and your analysis may produce high or lower disk usage.</strong></p>\n\n<p style=\"text-align: center\"><a href=\"/2012/09/25/bioinformatic-tools-series-stacks/disk.png\"><img src=\"/2012/09/25/bioinformatic-tools-series-stacks/disk.png\" alt=\"\" title=\"Disk Usage\" width=\"824\" height=\"630\" class=\"aligncenter size-full wp-image-1055\" /></a></p>\n\n<p>Hope it helps you using Stacks. Kudos to all developers and contributors of this great tool.</p>\n\n<div class=\"highlight\"><pre>disk<span class=\"o\">=</span><span class=\"kt\">c</span><span class=\"p\">(</span><span class=\"m\">2.6</span><span class=\"p\">,</span><span class=\"m\">3.5</span><span class=\"p\">,</span><span class=\"m\">3.5</span><span class=\"p\">,</span><span class=\"m\">3.7</span><span class=\"p\">,</span><span class=\"m\">3.7</span><span class=\"p\">,</span><span class=\"m\">3.7</span><span class=\"p\">,</span><span class=\"m\">3.7</span><span class=\"p\">)</span>\ndb<span class=\"o\">=</span><span class=\"kt\">c</span><span class=\"p\">(</span><span class=\"m\">0.0008</span><span class=\"p\">,</span><span class=\"m\">1.7</span><span class=\"p\">,</span><span class=\"m\">1.7</span><span class=\"p\">,</span><span class=\"m\">1.7</span><span class=\"p\">,</span><span class=\"m\">1.7</span><span class=\"p\">,</span><span class=\"m\">1.8</span><span class=\"p\">,</span><span class=\"m\">1.8</span><span class=\"p\">)</span>\nx<span class=\"o\">=</span><span class=\"p\">(</span><span class=\"m\">1</span><span class=\"o\">:</span><span class=\"m\">7</span><span class=\"p\">)</span>\nplot<span class=\"p\">(</span>x<span class=\"o\">=</span>x<span class=\"p\">,</span> xlab<span class=\"o\">=</span><span class=\"s\">&quot;Tutorial Step (1 to 7)&quot;</span><span class=\"p\">,</span> y<span class=\"o\">=</span>disk<span class=\"p\">,</span> ylab<span class=\"o\">=</span><span class=\"s\">&quot;Disk Usage (GB)&quot;</span><span class=\"p\">,</span> col<span class=\"o\">=</span><span class=\"s\">&quot;red&quot;</span><span class=\"p\">,</span> type<span class=\"o\">=</span><span class=\"s\">&quot;o&quot;</span><span class=\"p\">,</span>ylim<span class=\"o\">=</span><span class=\"kt\">c</span><span class=\"p\">(</span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"m\">6</span><span class=\"p\">),</span>xlim<span class=\"o\">=</span><span class=\"kt\">c</span><span class=\"p\">(</span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"m\">8</span><span class=\"p\">))</span>\nlines<span class=\"p\">(</span>x<span class=\"o\">=</span>x<span class=\"p\">,</span> y<span class=\"o\">=</span>db<span class=\"p\">,</span> type<span class=\"o\">=</span><span class=\"s\">&quot;o&quot;</span><span class=\"p\">,</span> pch<span class=\"o\">=</span><span class=\"m\">22</span><span class=\"p\">,</span> lty<span class=\"o\">=</span><span class=\"m\">2</span><span class=\"p\">,</span> col<span class=\"o\">=</span><span class=\"s\">&quot;blue&quot;</span><span class=\"p\">)</span>\ntitle<span class=\"p\">(</span>main<span class=\"o\">=</span><span class=\"s\">&quot;Disk Usage&quot;</span><span class=\"p\">,</span> font.main<span class=\"o\">=</span><span class=\"m\">2</span><span class=\"p\">)</span>\nabline<span class=\"p\">(</span>v<span class=\"o\">=</span><span class=\"kt\">c</span><span class=\"p\">(</span><span class=\"m\">0</span><span class=\"o\">:</span><span class=\"m\">8</span><span class=\"p\">),</span> col<span class=\"o\">=</span><span class=\"s\">&quot;grey40&quot;</span><span class=\"p\">,</span> lty<span class=\"o\">=</span><span class=\"s\">&quot;dotted&quot;</span><span class=\"p\">)</span>\nabline<span class=\"p\">(</span>h<span class=\"o\">=</span><span class=\"kt\">c</span><span class=\"p\">(</span><span class=\"m\">0</span><span class=\"o\">:</span><span class=\"m\">5</span><span class=\"p\">),</span> col<span class=\"o\">=</span><span class=\"s\">&quot;grey10&quot;</span><span class=\"p\">,</span> lty<span class=\"o\">=</span><span class=\"s\">&quot;dotted&quot;</span><span class=\"p\">)</span>\ndf <span class=\"o\">=</span> <span class=\"kt\">data.frame</span><span class=\"p\">(</span>disk<span class=\"p\">,</span>db<span class=\"p\">)</span>\ntotals<span class=\"o\">=</span><span class=\"kp\">rowSums</span><span class=\"p\">(</span>df<span class=\"p\">,</span>na.rm<span class=\"o\">=</span><span class=\"bp\">T</span><span class=\"p\">)</span>\nlines<span class=\"p\">(</span>x<span class=\"o\">=</span>x<span class=\"p\">,</span> y<span class=\"o\">=</span>totals<span class=\"p\">,</span> type<span class=\"o\">=</span><span class=\"s\">&quot;o&quot;</span><span class=\"p\">,</span> pch<span class=\"o\">=</span><span class=\"m\">22</span><span class=\"p\">,</span> lty<span class=\"o\">=</span><span class=\"m\">2</span><span class=\"p\">,</span> col<span class=\"o\">=</span><span class=\"s\">&quot;green&quot;</span><span class=\"p\">)</span> \nlegend<span class=\"p\">(</span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"m\">6</span><span class=\"p\">,</span><span class=\"kt\">c</span><span class=\"p\">(</span><span class=\"s\">&quot;DB&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;Disk&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;Total&quot;</span><span class=\"p\">),</span> cex<span class=\"o\">=</span><span class=\"m\">0.6</span><span class=\"p\">,</span>col<span class=\"o\">=</span><span class=\"kt\">c</span><span class=\"p\">(</span><span class=\"s\">&quot;red&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;blue&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;green&quot;</span><span class=\"p\">),</span>pch<span class=\"o\">=</span><span class=\"m\">21</span><span class=\"o\">:</span><span class=\"m\">23</span><span class=\"p\">,</span>lty<span class=\"o\">=</span><span class=\"m\">1</span><span class=\"p\">,</span>y.intersp<span class=\"o\">=</span><span class=\"m\">0.2</span><span class=\"p\">,</span>x.intersp<span class=\"o\">=</span><span class=\"m\">0.2</span><span class=\"p\">,</span>pt.lwd<span class=\"o\">=</span><span class=\"m\">1</span><span class=\"p\">,</span>adj<span class=\"o\">=</span><span class=\"m\">0</span><span class=\"p\">,</span>inset<span class=\"o\">=</span><span class=\"kt\">c</span><span class=\"p\">(</span><span class=\"m\">0.5</span><span class=\"p\">,</span><span class=\"m\">0.5</span><span class=\"p\">))</span>\n</pre></div>\n\n<h4>References</h4>\n\n<ul>\n<li>Stacks - <a href=\"http://creskolab.uoregon.edu/stacks/\">http://creskolab.uoregon.edu/stacks/</a></li>\n<li>Tutorial: building mini-contigs from paired-end sequences - <a href=\"http://creskolab.uoregon.edu/stacks/pe_tut.php\">http://creskolab.uoregon.edu/stacks/pe_tut.php</a></li>\n</ul>"}, "pass_info": {"used_taxonomy_terms": [], "used_pagination": false, "pagination_has_more": false, "used_assets": true, "used_source_names": []}}