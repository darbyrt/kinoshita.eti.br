{"content": {"content": [{"o": 194, "f": null, "c": "[Rosalind](http://rosalind.info) is a website with a curated set of exercices for bioinformatics, organized hierarchily. \nIn some of these examples you are required to replace characters (nucleotides) by other characters. It is a rather common \ntask for developers, like when you need to replace special characters in user's names.\n\nThere are different ways of describing it, such as translate, replace, or **[transliterate](http://en.wikipedia.org/wiki/Transliteration)**. The latter being my favorite definition. \n\nIn Python I know that there are several different ways of transliterating strings \n\\[[1](https://pypi.python.org/pypi/transliterate)\\]\\[[2](http://blog.lebowtech.com/blog/programming/python/transliterate-with-python.html)\\]. But in Java I always ended up using a Map or a Enum and writing my own method in some *Util* class for that.\n\nTurns out that [Apache Commons Lang](http://commons.apache.org), which I use in most of my projects, \nprovided this feature. What means that I will be able to reduce the length of my code, what also means \nless code to be tested (and one less place to look for bugs).\n\n{% geshi 'java' %}\nString s = StringUtils.replaceChars(\"ATGCATGC\", \"GTCA\", \"CAGT\"); // \"TACGTACG\"\nSystem.out.println(s);\n{% endgeshi %}\n\nWhat the code above does, is replace G by C, T by A, C by G and A by T. This process is part of finding the \n[DNA reverse complement](http://www.bioinformatics.org/sms/rev_comp.html). But you can also use this for replacing \nspecial characters, spaces by _, and so it goes.\n\nHappy hacking!", "l": 10}]}, "config": {"title": "Strings transliteration in Java with Apache Commons Lang", "author": "kinow", "tags": ["java", "apache software foundation", "bioinformatics"], "category": "blog", "time": "12:49:33", "format": null, "content_type": "html", "segments": ["content"]}}