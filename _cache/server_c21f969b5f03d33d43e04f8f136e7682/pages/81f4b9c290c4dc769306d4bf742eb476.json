{"content": {"content": [{"o": 131, "f": null, "c": "This week I had to write my first custom command for [Laravel 4](http://laravel.com/). \nIn [Nestor-QA](http://nestor-qa.org/), [Peter](https://github.com/tooh) and I thought it would be useful to have \nthe database schema being automatically generated with \n[SchemaSpy](http://schemaspy.sourceforge.net/) in our [Jenkins box](http://builds.tupilabs.com/view/Nestor-QA/).\n\nThanks to [Artisan](http://laravel.com/docs/artisan) this task is much simpler than I thought. \nThe following command creates the <code>schemaspy</code> command.\n\n    php artisan command:make SchemaSpyCommand --command=schemaspy\n\nThis will create the file <code>app/commands/SchemaSpyCommand.php</code>. And all I had to do was \njust fill in the options and write the exec command as the [Laravel 4 docs](http://laravel.com/docs/commands) explain. \n\n    $this->info('Creating SchemaSpy');\n\n\t$jar = $this->option(\"jar\");\n\t$dbtype = $this->option(\"dbtype\");\n\t$output = $this->option(\"output\");\n\n\t$commandLine = sprintf(\"java -jar %s -u none -t %s -o %s\", $jar, $dbtype, $output);\n\n\t$this->info(sprintf(\"Command line: [%s]\", $commandLine));\n\n\texec($commandLine);\n\nThat's how my final command looks. Now the final step is integrate it into the application by adding the line below to \n<code>app/start/artisan.php</code>.\n\n    Artisan::add(new SchemaSpyCommand);\n\nAnd that's it, running <code>php artisan schemaspy --jar=/opt/schemaspy/schemaSpy_5.0.0.jar \n--dbtype=app/database/sqlite.properties --output=database-schema</code> \ncreates the database schema docs in the <code>database-schema</code> directory. \n\nCheck this [gist](https://gist.github.com/kinow/8936667) for the final code.\n\nHappy coding!", "l": 8}]}, "config": {"title": "Writing a custom SchemaSpy command for Laravel 4", "author": "kinow", "tags": ["php"], "category": "blog", "time": "13:15:33", "format": null, "content_type": "html", "segments": ["content"]}}