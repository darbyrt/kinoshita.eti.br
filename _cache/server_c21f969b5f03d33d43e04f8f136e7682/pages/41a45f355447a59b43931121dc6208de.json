{"content": {"content": [{"o": 182, "f": null, "c": "[afl](http://lcamtuf.coredump.cx/afl/) is a fuzzer, an application that combines a series of algorithms\nin order to try invoking programs with several different input values. It then analyses the application\nexecution flow given different test case scenarios. \nYou can read more about fuzzing at [this OWASP page](https://www.owasp.org/index.php/Fuzzing), or in other\nblogs that I also used while learning about afl\n[1]({{pcposturl(2016, 2, 27, \"using-afl-to-test-mapserver#1\")}})\n[2]({{pcposturl(2016, 2, 27, \"using-afl-to-test-mapserver#2\")}})\n\nAt work we are using MapServer for serving WFS and WMS. And I am using it for the\n[NZ OpenStreetMap maps](http://maps.nzoss.org.nz) too. MapServer is written in C++ and is normally\nexposed as a CGI script, so I thought it was worth learning about afl and trying it on MapServer,\nas in case it finds any interesting bug I can submit it to the MapServer project.\n\n<!--more-->\n\n## Download and build MapServer source code\n\nMapServer code is hosted on [GitHub](https://github.com/mapserver/mapserver) and once you have cloned it a look\nat the Travis CI configuration file will give you some hints on which dependencies you must have\ninstalled on your operating system in order to build it. I will omit the steps to make this post shorter.\n\nOnce you have successfully built mapserv binary you will need to remove the generated files, and execute\nCMake again but now using afl's compiler. This way the application will be instrumented and afl can\nanalyse its execution flow.\n\nYou can do that by exporting these two variables before running CMake.\n\n{% geshi 'shell' %}\nexport CXX=/opt/afl-2.05b/afl-g++\nexport CC=/opt/afl-2.05b/afl-gcc\n{% endgeshi %}\n\nAfter this you can run CMake and GNU make again. That should create a binary instrumented mapserv,\nthat can be tested with afl.\n\n{% geshi 'shell' %}\ncd /home/kinow/Development/cpp/workspace/mapserver/\nmkdir build && cd build\ncmake ..\nmake\n./mapserv -v\n{% endgeshi %}\n\n## Creating a shapefile mapfile\n\nThe easiest way to test MapServer locally, without Postgres or Postgis, is probably by\ncreating a single layer mapfile. LINZ provides shapefiles for New Zealand\n([here's an example](https://data.linz.govt.nz/layer/1153-nz-coastlines-and-islands-polygons-topo-150k/))\nthat I used for this experiment.\n\n<div class='row'>\n<div class=\"span6 offset3\" style='text-align: center;'>\n<figure>\n<a href=\"{{assets.qgis_settings}}\" rel=\"prettyPhoto\" class=\"thumbnail\" title=\"QGIS Bounding Area settings\">\n<img class=\"span12\" src=\"{{assets.qgis_settings}}\" alt=\"QGIS Bounding Area settings\" />\n</a>\n<figcaption>QGIS Bounding Area settings</i></figcaption>\n</figure>\n</div>\n</div>\n\nI used [QGIS](http://www.qgis.org/en/site/) to load the shapefile, take a look at the map,\nand get the bounding area and projection. Here's the final mapfile.\n\n{% geshi 'shell' %}\nMAP\n  IMAGETYPE      JPEG\n  EXTENT         -97.238976 41.619778 -82.122902 49.385620\n  SIZE           400 300\n  SHAPEPATH      \"/home/kinow/Downloads/linz-shp\"\n  IMAGECOLOR     255 255 255\n\n  WEB\n    METADATA\n      \"wms_title\"           \"WMS Fake Server\"\n      \"wms_onlineresource\"  \"http://127.0.0.1/cgi-bin/mapserv?map=wms.map&\"\n      \"wms_srs\"             \"EPSG:4167\"\n      \"wms_enable_request\"  \"*\"\n    END\n  END\n\n  PROJECTION\n    \"init=epsg:4167\"\n  END\n\n  LAYER # States polygon layer begins here\n    NAME         nz-coastlines-and-islands-polygons-topo-150k\n    DATA         nz-coastlines-and-islands-polygons-topo-150k\n    STATUS       OFF\n    TYPE         POLYGON\n\n    CLASS\n      NAME       \"NZ Topo LINZ map\"\n\n      STYLE\n        COLOR        232 232 232\n        OUTLINECOLOR 32 32 32\n      END\n    END\n  END\nEND\n{% endgeshi %}\n\nThen you can finally execute MapServer binary program and output to a local image file.\n\n{% geshi 'shell' %}\nexport MS_ERRORFILE=\"stderr\"\nexport MS_MAPFILE=/home/kinow/Development/cpp/workspace/mapserver/nztopo1.map\n\n./mapserv -nh QUERY_STRING=\"VERSION=1.1.0&REQUEST=GetMap&LAYERS=nz-coastlines-and-islands-polygons-topo-150k&SRS=EPSG:4167&SERVICE=WMS&TEMPLATE=OpenLayers&BBOX=165.869,-52.6209,183.846,-29.2313&FORMAT=image/jpeg&HEIGHT=800&WIDTH=800\" 2>/dev/null > /tmp/nzmap.jpg\n{% endgeshi %}\n\n## Running afl\n\nI decided to use a RAM disk while running afl as suggested\n[in this blog post](http://www.cipherdyne.org/blog/2014/12/ram-disks-and-saving-your-ssd-from-afl-fuzzing.html)\nto avoid a lot of writes in my SSD disk. Then moved MapServer there and fired afl.\n\n{% geshi 'shell' %}\ncd /tmp/afl-ramdisk/mapserver\nmkdir fuzz-input fuzz-output\n\n/opt/afl-2.05b/afl-fuzz -m 500 -i fuzz-input/ -o fuzz-output/ -t 2000 ./mapserv QUERY_STRING=\"VERSION=1.1.0&REQUEST=GetMap&LAYERS=nz-coastlines-and-islands-polygons-topo-150k&SRS=EPSG:4167&SERVICE=WMS&TEMPLATE=OpenLayers&BBOX=165.869,-52.6209,183.846,-29.2313&FORMAT=image/jpeg&HEIGHT=800&WIDTH=800\"\n{% endgeshi %}\n\n<div class='row'>\n<div class=\"span6 offset3\" style='text-align: center;'>\n<figure>\n<a href=\"{{assets.afl_testing_mapserver}}\" rel=\"prettyPhoto\" class=\"thumbnail\" title=\"afl testing MapServer\">\n<img class=\"span12\" src=\"{{assets.afl_testing_mapserver}}\" alt=\"afl testing MapServer\" />\n</a>\n<figcaption>afl testing MapServer</figcaption>\n</figure>\n</div>\n</div>\n\nHowever, it is not mutating the program input as I didn't use \"@@\" nor a dictionary. When you use @@, afl will replace\nit by the location of a file that it generated. Or by using \"-x\" you can provide a dictionary used to generate\nvariations of parameters.\n\nDuring the next days I will give it another go at work, and will investigate how to test MapServer without having to write\na wrapper in Shell or C/C++. You can still test other programs that are shipped with MapServer though.\n\n{% geshi 'shell' %}\ncd /tmp/afl-ramdisk/mapserver\n\n/opt/afl-2.05b/afl-fuzz -m 512 -i fuzz-input -o fuzz-output -f /tmp/afl-ramdisk/input ./shp2img -m @@ -l nz-coastlines-and-islands-polygons-topo-150k -i image/jpeg -o /tmp/afl-ramdisk/nzmap.jpg -e 165.869 -52.6209 183.846 -29.2313\n{% endgeshi %}\n\nI hope it helps you get started with afl in case you are learning about it too :-) Happy hacking!\n\n<br/>\n<br/>\n<sup><a name=\"1\">1</a> \n<a href=\"https://fuzzing-project.org/tutorial3.html\">\nhttps://fuzzing-project.org/tutorial3.html</a></sup>\n\n<sup><a name=\"2\">2</a> \n<a href=\"https://www.nettitude.co.uk/fuzzing-with-american-fuzzy-lop-afl/\">\nhttps://www.nettitude.co.uk/fuzzing-with-american-fuzzy-lop-afl/</a></sup>\n\n", "l": 11}]}, "config": {"title": "Learning afl and testing MapServer", "author": "kinow", "tags": ["software quality", "fuzzers", "security", "software quality"], "category": "blog", "time": "23:21:03", "format": null, "content_type": "html", "segments": ["content"]}}