{"content": {"content": [{"o": 167, "f": null, "c": "When I was younger and my older brother was living in Germany, I asked him if he \nhad learned German. He said that he did, and explained that there are several \ndialects, and he was quite proud for some people told him that he was using the \nBavarian dialect correctly.\n\nEven though [Cypher](http://www.neo4j.org/learn/cypher), \n[Gremlin](http://gremlindocs.com/) and [SPARQL](http://en.wikipedia.org/wiki/SPARQL) \nare all query languages, I think we can consider them dialects of a common graph language. \nCypher is the query language used in [neo4j](http://www.neo4j.org/), a graph database. \nGremlin is part of the [Tinkerpop](http://www.tinkerpop.com/), an open source project \nthat contains graph server, graph algorithms, graph language, among other sub-projects. \nAnd last but not least, SPARQL is used to query [RDF documents](http://en.wikipedia.org/wiki/Resource_Description_Framework).\n\nLet's use the example of the Matrix movie provided by neo4j to take a look at the \nthree languages.\n\n## Cypher\n\nFirst we create the graph.\n\n{% geshi 'SQL' %}\ncreate (matrix1:Movie {id : '603', title : 'The Matrix', year : '1999-03-31'}),\n (matrix2:Movie {id : '604', title : 'The Matrix Reloaded', year : '2003-05-07'}),\n (matrix3:Movie {id : '605', title : 'The Matrix Revolutions', year : '2003-10-27'}),\n\n (neo:Actor {name:'Keanu Reeves'}),\n (morpheus:Actor {name:'Laurence Fishburne'}),\n (trinity:Actor {name:'Carrie-Anne Moss'}),\n\n (matrix1)<-[:ACTS_IN {role : 'Neo'}]-(neo),\n (matrix2)<-[:ACTS_IN {role : 'Neo'}]-(neo),\n (matrix3)<-[:ACTS_IN {role : 'Neo'}]-(neo),\n (matrix1)<-[:ACTS_IN {role : 'Morpheus'}]-(morpheus),\n (matrix2)<-[:ACTS_IN {role : 'Morpheus'}]-(morpheus),\n (matrix3)<-[:ACTS_IN {role : 'Morpheus'}]-(morpheus),\n (matrix1)<-[:ACTS_IN {role : 'Trinity'}]-(trinity),\n (matrix2)<-[:ACTS_IN {role : 'Trinity'}]-(trinity),\n (matrix3)<-[:ACTS_IN {role : 'Trinity'}]-(trinity)\n{% endgeshi %}\n\n<code>Added 6 labels, created 6 nodes, set 21 properties, created 9 relationships, returned 0 rows in 2791 ms</code>\n\nAnd execute a simple query.\n\n{% geshi 'SQL' %}\nMATCH (a:Actor { name:\"Keanu Reeves\" })\nRETURN a\n{% endgeshi %}\n\n<code>(9:Actor {name:\"Keanu Reeves\"})</code>\n\n## Gremlin\n\nAgain, let's start by creating our graph.\n\n{% geshi 'sql' %}\ng = new TinkerGraph();\nmatrix1 = g.addVertex([\"_id\":603,\"title\":\"The Matrix\", \"year\": \"1999-03-31\"]);\nmatrix2 = g.addVertex([\"_id\":604,\"title\":\"The Matrix Reloaded\", \"year\": \"2003-05-07\"]);\nmatrix3 = g.addVertex([\"_id\":605,\"title\":\"The Matrix Revolutions\", \"year\": \"2003-10-27\"]);\n\nneo = g.addVertex([\"name\": \"Keanu Reeves\"]);\nmorpheus = g.addVertex([\"name\": \"Laurence Fishburne\"]);\ntrinity = g.addVertex([\"name\": \"Carrie-Anne Moss\"]);\n\nneo.addEdge(\"actsIn\", matrix1); \nneo.addEdge(\"actsIn\", matrix2); \nneo.addEdge(\"actsIn\", matrix3); \nmorpheus.addEdge(\"actsIn\", matrix1); \nmorpheus.addEdge(\"actsIn\", matrix2); \nmorpheus.addEdge(\"actsIn\", matrix3); \ntrinity.addEdge(\"actsIn\", matrix1); \ntrinity.addEdge(\"actsIn\", matrix2); \ntrinity.addEdge(\"actsIn\", matrix3); \n{% endgeshi %}\n\nAnd execute a simple query.\n\n{% geshi 'sql' %}\ng.V.has('name', 'Keanu Reeves').map\n{% endgeshi %}\n\n<code>gremlin> g.V.has('name', 'Keanu Reeves').map\n==>{name=Keanu Reeves}\ngremlin></code>\n\nQuite similar to neo4j.\n\n## SPARQL\n\nLet's load our example (thanks to [Kendall G. Clark](https://twitter.com/kendall)). I used \n[Fuseki](http://jena.apache.org/documentation/serving_data/) to run these queries.\n\n{% geshi 'xml' %}\n@prefix :          <http://example.org/matrix/> .\n\n :m1 a :Movie; :title \"The Matrix\"; :year \"1999-03-31\".\n :m2 a :Movie; :title \"The Matrix Reloaded\"; :year \"2003-05-07\".\n :m3 a :Movie; :title \"The Matrix Revolutions\"; :year \"2003-10-27\".\n \n :neo a :Actor; :name \"Keanu Reeves\".\n :morpheus a :Actor; :name \"Laurence Fishburne\".\n :trinity a :Actor; :name \"Carrie-Anne Moss\".\n \n :neo :hasRole [:as \"Neo\"; :in :m1].\n :neo :hasRole [:as \"Neo\"; :in :m2].\n :neo :hasRole [:as \"Neo\"; :in :m2].\n :morpheus :hasRole [:as \"Morpheus\"; :in :m1].\n :morpheus :hasRole [:as \"Morpheus\"; :in :m2].\n :morpheus :hasRole [:as \"Morpheus\"; :in :m2].\n :trinity :hasRole [:as \"Trinity\"; :in :m1].\n :trinity :hasRole [:as \"Trinity\"; :in :m2].\n :trinity :hasRole [:as \"Trinity\"; :in :m2].\n{% endgeshi %}\n\nAnd finally the SPARQL query.\n\n{% geshi 'sql' %}\nSELECT ?a WHERE {\n   ?a a <http://example.org/matrix/Actor> .\n   ?a <http://example.org/matrix/name> ?name .\n   FILTER(?name  = \"Keanu Reeves\")\n}\n{% endgeshi %}\n\nReturning the Keanu Reeves actor instance.\n\n<pre>-----------------------------------\n| a                               |\n===================================\n| &lt;http://example.org/matrix/neo&gt; |\n-----------------------------------</pre>\n\nSPARQL supports inference (or I must say that OWL, RDFS and the reasoners do), \nbut it is easier to define the depth of a search in the graph using neo4j. As for \nGremlin, it has native support to Groovy and Java. There is a common denominator \nfor these three languages, but what makes them really powerful are their unique features. \n\nI hope you enjoyed, and that this post gave you a quick overview of some of the existing \ngraph languages. Make sure you ponder the pros and cons of each server/language, and \nmake the best decision for your project. Take a look at [other graph query languages](http://en.wikipedia.org/wiki/Graph_database#APIs_and_Graph_Query.2FProgramming_Languages) too.\n\nHappy hacking!\n\n---\n\nThis post has been updated as suggested by [@kendall](https://twitter.com/kendall) (Thank you!).\nYou can check the diff at [GitHub](https://github.com/kinow/kinoshita.eti.br/commits/master/site/_content/posts/2014-09-09_cypher-gremlin-and-sparql-graph-dialects.html)", "l": 11}]}, "config": {"title": "Cypher, Gremlin and SPARQL: Graph dialects", "author": "kinow", "tags": ["graphs", "neo4j", "gremlin", "sparql"], "category": "blog", "time": "10:14:33", "format": null, "content_type": "html", "segments": ["content"]}}