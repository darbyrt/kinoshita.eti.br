<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
    xmlns:content="http://purl.org/rss/1.0/modules/content/"
    xmlns:wfw="http://wellformedweb.org/CommentAPI/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
    xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
>
 
<channel>
    <title>Bruno P. Kinoshita</title>
    <atom:link href="http://kinoshita.eti.br/blog/feed.xml" rel="self" type="application/rss+xml" />
    <link>http://kinoshita.eti.br/</link>
    <description></description>
    <lastBuildDate>Sat, 03 Oct 2015 13:20:43 +1300</lastBuildDate>
    <language>en-US</language>
    <generator>PieCrust 1.2.0</generator>
 
<item>
    <title>How does the Jenkins Credentials Plug-in store passwords?</title>
    <pubDate>Mon, 07 Sep 2015 00:00:00 +1200</pubDate>
    <link>/2015/09/07/how_does_the_jenkins_credentials_plugin_store_passwords.html</link>
    <dc:creator>Bruno P. Kinoshita</dc:creator>
    <description>&lt;p&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Credentials+Plugin&quot;&gt;Jenkins Credentials Plug-in&lt;/a&gt; manages credentials stored in Jenkins. These credentials can be used in many jobs and by plug-ins for executing SSH commands, authenticating to systems, or running other commands that need some sort of authentication or authorisation.&lt;/p&gt;

&lt;p&gt;I recently used its API for the first time in the &lt;a href=&quot;https://github.com/biouno/figshare-plugin&quot;&gt;BioUno figshare Plug-in&lt;/a&gt; to store OAuth 1.0 credentials (consumer key, consumer secret, token key, token secret). This &lt;a href=&quot;http://biouno.org/2015/09/05/using_jenkins_credentials_plugin_to_create_the_biouno_figshare_plugin/&quot;&gt;blog post&lt;/a&gt; has more details about how we used the plug-in, but this post is specifically on how the passwords are stored by Jenkins.&lt;/p&gt;

&lt;h2&gt;Secret and ciphers&lt;/h2&gt;

&lt;p&gt;Jenkins stores its configuration on disk as XML using the XStream library. Plug-in developers using the Credentials Plug-in API must use the &lt;strong&gt;Secret&lt;/strong&gt; class to encrypt sensitive information.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Secret.fromString&lt;/code&gt; method is responsible for creating a cipher from a given String. As in the Secret Javadoc,  &lt;em&gt;&amp;#8220;this is not meant as a protection against code running in the same VM, nor against an attacker who has local file system access on Jenkins master&amp;#8221;&lt;/em&gt;. But at least makes things more complicated :-)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://javadoc.jenkins-ci.org/hudson/util/Secret.html&quot;&gt;Secret Javadoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/hudson/util/Secret.java&quot;&gt;Secret source code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class=&quot;java&quot; style=&quot;font-family:monospace;&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;static&lt;/span&gt; Secret fromString&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;a href=&quot;http://www.google.com/search?hl=en&amp;amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+string&quot;&gt;&lt;span style=&quot;color: #003399;&quot;&gt;String&lt;/span&gt;&lt;/a&gt; data&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;
    data &lt;span style=&quot;color: #339933;&quot;&gt;=&lt;/span&gt; &lt;a href=&quot;http://www.google.com/search?hl=en&amp;amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+util&quot;&gt;&lt;span style=&quot;color: #003399;&quot;&gt;Util&lt;/span&gt;&lt;/a&gt;.&lt;span style=&quot;color: #006633;&quot;&gt;fixNull&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;data&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;
    Secret s &lt;span style=&quot;color: #339933;&quot;&gt;=&lt;/span&gt; decrypt&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;data&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;
    &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;s&lt;span style=&quot;color: #339933;&quot;&gt;==&lt;/span&gt;&lt;span style=&quot;color: #000066; font-weight: bold;&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt; s&lt;span style=&quot;color: #339933;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;new&lt;/span&gt; Secret&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;data&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;
    &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;return&lt;/span&gt; s&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;
&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;The first line simply replaces a null string by an empty &amp;#8220;&amp;#8221;, or keeps the current value of not null.&lt;/p&gt;

&lt;p&gt;After that, the decrypt method is called.&lt;/p&gt;

&lt;pre class=&quot;java&quot; style=&quot;font-family:monospace;&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;static&lt;/span&gt; Secret decrypt&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;a href=&quot;http://www.google.com/search?hl=en&amp;amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+string&quot;&gt;&lt;span style=&quot;color: #003399;&quot;&gt;String&lt;/span&gt;&lt;/a&gt; data&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;
    &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;data&lt;span style=&quot;color: #339933;&quot;&gt;==&lt;/span&gt;&lt;span style=&quot;color: #000066; font-weight: bold;&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;      &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #000066; font-weight: bold;&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;
    &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;
        &lt;span style=&quot;color: #000066; font-weight: bold;&quot;&gt;byte&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#91;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#93;&lt;/span&gt; in &lt;span style=&quot;color: #339933;&quot;&gt;=&lt;/span&gt; Base64.&lt;span style=&quot;color: #006633;&quot;&gt;decode&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;data.&lt;span style=&quot;color: #006633;&quot;&gt;toCharArray&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;
        Secret s &lt;span style=&quot;color: #339933;&quot;&gt;=&lt;/span&gt; tryDecrypt&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;KEY.&lt;span style=&quot;color: #006633;&quot;&gt;decrypt&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;, in&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;
        &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;s&lt;span style=&quot;color: #339933;&quot;&gt;!=&lt;/span&gt;&lt;span style=&quot;color: #000066; font-weight: bold;&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;    &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;return&lt;/span&gt; s&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;
&amp;nbsp;
        &lt;span style=&quot;color: #666666; font-style: italic;&quot;&gt;// try our historical key for backward compatibility&lt;/span&gt;
        Cipher cipher &lt;span style=&quot;color: #339933;&quot;&gt;=&lt;/span&gt; getCipher&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;quot;AES&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;
        cipher.&lt;span style=&quot;color: #006633;&quot;&gt;init&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;Cipher.&lt;span style=&quot;color: #006633;&quot;&gt;DECRYPT_MODE&lt;/span&gt;, getLegacyKey&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;
        &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;return&lt;/span&gt; tryDecrypt&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;cipher, in&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;
    &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;catch&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;a href=&quot;http://www.google.com/search?hl=en&amp;amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+generalsecurityexception&quot;&gt;&lt;span style=&quot;color: #003399;&quot;&gt;GeneralSecurityException&lt;/span&gt;&lt;/a&gt; e&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;
        &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #000066; font-weight: bold;&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;
    &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;catch&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;a href=&quot;http://www.google.com/search?hl=en&amp;amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+unsupportedencodingexception&quot;&gt;&lt;span style=&quot;color: #003399;&quot;&gt;UnsupportedEncodingException&lt;/span&gt;&lt;/a&gt; e&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;
        &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;throw&lt;/span&gt; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;new&lt;/span&gt; &lt;a href=&quot;http://www.google.com/search?hl=en&amp;amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+error&quot;&gt;&lt;span style=&quot;color: #003399;&quot;&gt;Error&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;e&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt; &lt;span style=&quot;color: #666666; font-style: italic;&quot;&gt;// impossible&lt;/span&gt;
    &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;catch&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;a href=&quot;http://www.google.com/search?hl=en&amp;amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+ioexception&quot;&gt;&lt;span style=&quot;color: #003399;&quot;&gt;IOException&lt;/span&gt;&lt;/a&gt; e&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;
        &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #000066; font-weight: bold;&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;
    &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;
&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;KEY.decrypt()&lt;/code&gt; call will return a &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/javax/crypto/Cipher.html&quot;&gt;&lt;code&gt;javax.crypto.Cipher&lt;/code&gt;&lt;/a&gt;. The Cipher class is handled in &lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/93dfe3377ec8d430818f5b9073f16c677343adb4/core/src/main/java/jenkins/security/CryptoConfidentialKey.java&quot;&gt;CryptoConfidentialKey&lt;/a&gt; in Jenkins API, where it defines the algorithm used to create the cipher: &lt;a href=&quot;https://en.wikipedia.org/wiki/Advanced_Encryption_Standard&quot;&gt;AES&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Jenkins has also a &lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/93dfe3377ec8d430818f5b9073f16c677343adb4/core/src/main/java/jenkins/security/ConfidentialStore.java#L63&quot;&gt;ConfidentialStore&lt;/a&gt;, that is required to create the cipher. This class must be initialized before someone tries to create or read a cipher. This extra step also increases security, though access to the JVM is still a problem.&lt;/p&gt;

&lt;p&gt;It is a bit late, so it is all for today. In summary: the credentials plug-in gives you a central place to manage credentials, but it is up to plug-in developers to use it. Sensitive values can be encrypted with AES on disk. So it is important that your file permissions, ACL and system auditing processes are in place and well maintained and monitored.&lt;/p&gt;

&lt;p&gt;Happy hacking!&lt;/p&gt;
</description>
</item>
<item>
    <title>Modeling observation data in SOS (Sensor Observation Service)</title>
    <pubDate>Tue, 23 Jun 2015 00:00:00 +1200</pubDate>
    <link>/2015/06/23/modeling-observation-data-in-sos.html</link>
    <dc:creator>Bruno P. Kinoshita</dc:creator>
    <description>&lt;p&gt;This week NZ Herald published an &lt;a href=&quot;http://www.nzherald.co.nz/technology/news/article.cfm?c_id=5&amp;amp;objectid=11469418&quot;&gt;article&lt;/a&gt;
about a device created by an Irish farmer enterpreneur that sends a message to a farmer when the cow is about to give birth.
The device monitors &amp;#8220;heightened tail moviment&amp;#8221;.&lt;/p&gt;

&lt;p&gt;In this post I will try to apply what I am learning following the &lt;a href=&quot;http://www.ogcnetwork.net/SOS_2_0/tutorial&quot;&gt;SOS Tutorial&lt;/a&gt;
(the Open Geospatial Consortium standard for Sensor Observation Service). Feel free to drop me a message via
&lt;a href=&quot;https://twitter.com/kinow&quot;&gt;@kinow&lt;/a&gt; if you find any mistakes or have any suggestions.&lt;/p&gt;

&lt;h2&gt;Modeling the tail moviment observation data in SOS&lt;/h2&gt;

&lt;p&gt;SOS is a standard designed to provide access to observation data. There are several server implementations, such as Kisters KiWIS, 
istSOS and 52North SOS.&lt;/p&gt;

&lt;p&gt;The standard mentions and utilises several other standards, such as SensorML, WFS, XML, WMS, etc. The SOS Tutorial on
how to model your observation data for SOS starts by defining &lt;em&gt;procedure&lt;/em&gt;, &lt;em&gt;observed property&lt;/em&gt;, &lt;em&gt;feature of interest&lt;/em&gt;,
&lt;em&gt;phenomenon and result times&lt;/em&gt;, and the &lt;em&gt;result value&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s try to model the data from the tail moviment sensors in the following table.&lt;/p&gt;

&lt;table class=&quot;table table-bordered&quot;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Our example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th&gt;Procedure&lt;/th&gt;
&lt;td&gt;The process that has generated the observation, such as a sensor, from the O&amp;M specification. In our example that could be a sensor identification&lt;/td&gt;
&lt;td&gt;moocall_001&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Observed Property&lt;/th&gt;
&lt;td&gt;A property which is observed (look at NASA SWEET ontology for existing values)&lt;/td&gt;
&lt;td&gt;Heightned tail moviment&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Feature of Interest&lt;/th&gt;
&lt;td&gt;A feature that carries the property which is observed&lt;/td&gt;
&lt;td&gt;Pregnant cow&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Phenomenon and Result Times&lt;/th&gt;
&lt;td&gt;The phenomenon time is when the data has been taken, and the result time when it has been created. If both are the same, the resultTime can point to the phenomenonTime&lt;/td&gt;
&lt;td&gt;20150623142000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Result value&lt;/th&gt;
&lt;td&gt;This is the result of the observation. Can be a OM_Measurement if numeric, OM_TruthObservation, etc (O&amp;M)&lt;/td&gt;
&lt;td&gt;3 (supposing we have a scale from 1 to 5)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;In the next post I will try to show how to load this model and some dummy data into a fresh installation of
52North SOS server.&lt;/p&gt;
</description>
</item>
<item>
    <title>Groovy Hooks in Jenkins for increasing logging level</title>
    <pubDate>Sun, 12 Apr 2015 00:00:00 +1200</pubDate>
    <link>/2015/04/12/groovy-hooks-in-jenkins-for-increasing-logging-level.html</link>
    <dc:creator>Bruno P. Kinoshita</dc:creator>
    <description>&lt;p&gt;Yesterday, while debugging a problem we had in the &lt;a href=&quot;http://biouno.org&quot;&gt;BioUno&lt;/a&gt; update center, 
I realized that after &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Logging&quot;&gt;increasing the logging level in the WEB interface&lt;/a&gt;, 
the messages that I needed weren&amp;#8217;t being displayed in the logs.&lt;/p&gt;

&lt;p&gt;It happened because some of the logging happened during Jenkins initialization, and before I could adjust the log level.&lt;/p&gt;

&lt;p&gt;The solution was to use a &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Groovy+Hook+Script&quot;&gt;Groovy Hook Script&lt;/a&gt;. 
If you are familiar with Linux init scripts, the idea is quite similar. &lt;/p&gt;

&lt;p&gt;A Groovy script in the &lt;code&gt;$JENKINS_ROOT_DIR/init.groovy.d/&lt;/code&gt; directory is executed during
Jenkins initialization. This way you can increase the global logger level with a script
as the following below.&lt;/p&gt;

&lt;pre class=&quot;java&quot; style=&quot;font-family:monospace;&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #006699;&quot;&gt;java.util.logging.ConsoleHandler&lt;/span&gt;
&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #006699;&quot;&gt;java.util.logging.LogManager&lt;/span&gt;
&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #006699;&quot;&gt;java.util.logging.Logger&lt;/span&gt;
&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #006699;&quot;&gt;java.util.logging.Level&lt;/span&gt;
&amp;nbsp;
def logger &lt;span style=&quot;color: #339933;&quot;&gt;=&lt;/span&gt; Logger.&lt;span style=&quot;color: #006633;&quot;&gt;getLogger&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;
logger.&lt;span style=&quot;color: #006633;&quot;&gt;setLevel&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;Level.&lt;span style=&quot;color: #006633;&quot;&gt;FINEST&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;
logger.&lt;span style=&quot;color: #006633;&quot;&gt;addHandler&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;new&lt;/span&gt; ConsoleHandler&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;Happy logging!&lt;/p&gt;
</description>
</item>
<item>
    <title>Contributing to Apache Jena</title>
    <pubDate>Thu, 01 Jan 2015 00:00:00 +1300</pubDate>
    <link>/2015/01/01/contributing-to-apache-jena.html</link>
    <dc:creator>Bruno P. Kinoshita</dc:creator>
    <description>&lt;p&gt;As I mentioned in my &lt;a href=&quot;2014/10/11/basic-workflow-of-a-sparql-query-in-fuseki.html&quot;&gt;previous post&lt;/a&gt;, 
I am using &lt;a href=&quot;http://jena.apache.org&quot;&gt;Apache Jena&lt;/a&gt; for a project of a customer. I had never used 
any triple store, nor a SPARQL Endpoint server before. But for being involved with the Apache 
Software Foundation, and since the company itself is using several Apache components, it was only 
natural Jena to be our first choice.&lt;/p&gt;

&lt;p&gt;It has served us very well so far. At the moment we have less than 100 queries per day, but the 
project is still under development and we expect 1000 queries per day by the first quarter of 
2015 and 1000000 near the end of 2015. We also have few entries in TDB, but expect to grow this 
number to a few million before 2016.&lt;/p&gt;

&lt;p&gt;When I work for companies and we use Open Source Software (OSS) in a project, I always 
prepare assessment reports to include in the deliveries. In this report I justify the choice 
of Open Source Software (as well as commercial software). Sometimes I 
am lucky to work for a company that asks me to include hours to work on OSS :-)&lt;/p&gt;

&lt;p&gt;I use &lt;a href=&quot;http://trello.com&quot;&gt;Trello&lt;/a&gt; to triage issues in OSS projects (and for several other 
things). I have a board with several cards for Open Source. About a month ago I set up one 
for Jena and listed the issues that I thought I could contribute to. &lt;/p&gt;

&lt;div class=&#039;row&#039;&gt;
&lt;div class=&quot;span6 offset3&quot; style=&#039;text-align: center;&#039;&gt;
&lt;figure&gt;
&lt;a href=&quot;/2015/01/01/contributing-to-apache-jena/jena_trello.png&quot; rel=&quot;prettyPhoto&quot; class=&quot;thumbnail&quot; title=&quot;Jena Trello card&quot;&gt;
&lt;img src=&quot;/2015/01/01/contributing-to-apache-jena/jena_trello.png&quot; alt=&quot;Jena Trello card&quot; /&gt;
&lt;/a&gt;
&lt;figcaption&gt;Jena Trello card&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;I annotate easy issues with a &amp;#8220;lhf&amp;#8221; suffix for Low Hanging Fruit issues, and delete issues from 
the card once I submit a patch or update it (and include it in another card for the 
&lt;a href=&quot;http://tupilabs.com/tag/tupilabs-report.html&quot;&gt;TupiLabs reports&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Most of the issues I included in the card for Jena had been created over two years ago, and hadn&amp;#8217;t 
been updated in a while. When you test these issues against the current code, usually you find that 
some of them have already been fixed. Other issues included documentation problems, and minor features. I didn&amp;#8217;t find any blocker issue that would impede us to use Jena in production.&lt;/p&gt;

&lt;div class=&#039;row&#039;&gt;
&lt;div class=&quot;span6 offset3&quot; style=&#039;text-align: center;&#039;&gt;
&lt;figure&gt;
&lt;a href=&quot;/2015/01/01/contributing-to-apache-jena/jena_jira.png&quot; rel=&quot;prettyPhoto&quot; class=&quot;thumbnail&quot; title=&quot;Jena JIRA activity summary&quot;&gt;
&lt;img src=&quot;/2015/01/01/contributing-to-apache-jena/jena_jira.png&quot; alt=&quot;Jena JIRA activity summary&quot; /&gt;
&lt;/a&gt;
&lt;figcaption&gt;Jena JIRA activity summary&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The picture above shows the past 30 days activity summary in JIRA for Jena. The red line shows 
issues created, and the green line issues resolved. &lt;a href=&quot;https://github.com/afs&quot;&gt;Andy Seaborne&lt;/a&gt; 
was very active in the past days and fixed several issues that were too old and had already been fixed in the trunk, and kindly merged patches and pull requests.&lt;/p&gt;

&lt;p&gt;Some issues like &lt;a href=&quot;https://issues.apache.org/jira/browse/JENA-632&quot;&gt;JENA-632&lt;/a&gt; will take a 
longer time to fix, but I&amp;#8217;m getting used to Jena&amp;#8217;s source code, and at the same getting more 
confident to use it in production - especially with a supportive OSS community. We are using 
Jena for RDF with Hadoop, and I learned that I can replace some custom Writables by others 
in the Jena Hadoop submodule.&lt;/p&gt;

&lt;p&gt;By the way, even though this project ends in April, I intend to continue contributing to Jena. 
There is a lot of parts of the code that I would love to be able to understand and contribute, 
in special the Graph database, optimization techniques for SPARQL queries, the grammars used 
in the project, Fuseki v2 and enhance its testing harness (as well as the test coverage).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you are looking for a interesting project to get you started with semantics, linked data, 
RDF, and even graphs and database querying, try contributing to Jena. I bet you&amp;#8217;ll have a lot 
of fun!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Happy hacking and happy 2015!&lt;/p&gt;
</description>
</item>
<item>
    <title>Basic workflow of a SPARQL query in Fuseki</title>
    <pubDate>Sat, 11 Oct 2014 00:00:00 +1300</pubDate>
    <link>/2014/10/11/basic-workflow-of-a-sparql-query-in-fuseki.html</link>
    <dc:creator>Bruno P. Kinoshita</dc:creator>
    <description>&lt;p&gt;Before using any library or tool in a customer project, specially when it is an Open Source one, 
there are many things that I like to look at before deploying it. Basically, I look at the 
features, documentation, community, open issues (in special blockers or criticals), the time 
to release fixes and new features and, obviously, the license.&lt;/p&gt;

&lt;p&gt;At the moment I&amp;#8217;m using &lt;a href=&quot;http://jena.apache.org&quot;&gt;Apache Jena&lt;/a&gt; to work with ontologies, SPARQL 
and data matching and enrichment for a customer. &lt;/p&gt;

&lt;p&gt;Jena is fantastic, and similar tools include &lt;a href=&quot;http://www.w3.org/wiki/VirtuosoUniversalServer&quot;&gt;Virtuoso&lt;/a&gt;, 
&lt;a href=&quot;http://stardog.com/&quot;&gt;StarDog&lt;/a&gt;, &lt;a href=&quot;http://www.ontotext.com/products/ontotext-graphdb-owlim/&quot;&gt;GraphDB&lt;/a&gt;, 
&lt;a href=&quot;http://4store.org/&quot;&gt;4Store&lt;/a&gt; and others. From looking at the code and its community and documentation, 
Jena seems like a great choice. &lt;/p&gt;

&lt;p&gt;I&amp;#8217;m still investigating if/how we gonna need to use inference and reasoners, looking 
at the issues, and learning my way through its code base. The following is my initial mapping 
of what happens when you submit a SPARQL query to Fuseki.&lt;/p&gt;

&lt;div class=&#039;row&#039;&gt;
&lt;div class=&quot;span6 offset3&quot; style=&#039;text-align: center;&#039;&gt;
&lt;figure&gt;
&lt;a href=&quot;/2014/10/11/basic-workflow-of-a-sparql-query-in-fuseki/drawing1.png&quot; rel=&quot;prettyPhoto&quot; class=&quot;thumbnail&quot; title=&quot;Fuseki SPARQL query work flow&quot;&gt;
&lt;img src=&quot;/2014/10/11/basic-workflow-of-a-sparql-query-in-fuseki/drawing1.png&quot; alt=&quot;Fuseki SPARQL query work flow&quot; /&gt;
&lt;/a&gt;
&lt;figcaption&gt;Jena JDBC&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;My understanding is that Fuseki is just a web layer, handling a bunch of validations, logging, 
error handling, and relying on the ARQ module, that is who actually handles the requests. 
I also think a new Fuseki server is baking in the project git repo, so stay tuned for an 
updated version of this graph soon.&lt;/p&gt;

&lt;p&gt;Happy hacking!&lt;/p&gt;
</description>
</item>
<item>
    <title>Cypher, Gremlin and SPARQL: Graph dialects</title>
    <pubDate>Tue, 09 Sep 2014 00:00:00 +1200</pubDate>
    <link>/2014/09/09/cypher-gremlin-and-sparql-graph-dialects.html</link>
    <dc:creator>Bruno P. Kinoshita</dc:creator>
    <description>&lt;p&gt;When I was younger and my older brother was living in Germany, I asked him if he 
had learned German. He said that he did, and explained that there are several 
dialects, and he was quite proud for some people told him that he was using the 
Bavarian dialect correctly.&lt;/p&gt;

&lt;p&gt;Even though &lt;a href=&quot;http://www.neo4j.org/learn/cypher&quot;&gt;Cypher&lt;/a&gt;, 
&lt;a href=&quot;http://gremlindocs.com/&quot;&gt;Gremlin&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/SPARQL&quot;&gt;SPARQL&lt;/a&gt; 
are all query languages, I think we can consider them dialects of a common graph language. 
Cypher is the query language used in &lt;a href=&quot;http://www.neo4j.org/&quot;&gt;neo4j&lt;/a&gt;, a graph database. 
Gremlin is part of the &lt;a href=&quot;http://www.tinkerpop.com/&quot;&gt;Tinkerpop&lt;/a&gt;, an open source project 
that contains graph server, graph algorithms, graph language, among other sub-projects. 
And last but not least, SPARQL is used to query &lt;a href=&quot;http://en.wikipedia.org/wiki/Resource_Description_Framework&quot;&gt;RDF documents&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s use the example of the Matrix movie provided by neo4j to take a look at the 
three languages.&lt;/p&gt;

&lt;h2&gt;Cypher&lt;/h2&gt;

&lt;p&gt;First we create the graph.&lt;/p&gt;

&lt;pre class=&quot;sql&quot; style=&quot;font-family:monospace;&quot;&gt;&lt;span style=&quot;color: #993333; font-weight: bold;&quot;&gt;CREATE&lt;/span&gt; &lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#40;&lt;/span&gt;matrix1:Movie &lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#123;&lt;/span&gt;id : &lt;span style=&quot;color: #ff0000;&quot;&gt;&#039;603&#039;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;,&lt;/span&gt; title : &lt;span style=&quot;color: #ff0000;&quot;&gt;&#039;The Matrix&#039;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #993333; font-weight: bold;&quot;&gt;YEAR&lt;/span&gt; : &lt;span style=&quot;color: #ff0000;&quot;&gt;&#039;1999-03-31&#039;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;,&lt;/span&gt;
 &lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#40;&lt;/span&gt;matrix2:Movie &lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#123;&lt;/span&gt;id : &lt;span style=&quot;color: #ff0000;&quot;&gt;&#039;604&#039;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;,&lt;/span&gt; title : &lt;span style=&quot;color: #ff0000;&quot;&gt;&#039;The Matrix Reloaded&#039;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #993333; font-weight: bold;&quot;&gt;YEAR&lt;/span&gt; : &lt;span style=&quot;color: #ff0000;&quot;&gt;&#039;2003-05-07&#039;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;,&lt;/span&gt;
 &lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#40;&lt;/span&gt;matrix3:Movie &lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#123;&lt;/span&gt;id : &lt;span style=&quot;color: #ff0000;&quot;&gt;&#039;605&#039;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;,&lt;/span&gt; title : &lt;span style=&quot;color: #ff0000;&quot;&gt;&#039;The Matrix Revolutions&#039;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #993333; font-weight: bold;&quot;&gt;YEAR&lt;/span&gt; : &lt;span style=&quot;color: #ff0000;&quot;&gt;&#039;2003-10-27&#039;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;,&lt;/span&gt;
&amp;nbsp;
 &lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#40;&lt;/span&gt;neo:Actor &lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#123;&lt;/span&gt;name:&lt;span style=&quot;color: #ff0000;&quot;&gt;&#039;Keanu Reeves&#039;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;,&lt;/span&gt;
 &lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#40;&lt;/span&gt;morpheus:Actor &lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#123;&lt;/span&gt;name:&lt;span style=&quot;color: #ff0000;&quot;&gt;&#039;Laurence Fishburne&#039;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;,&lt;/span&gt;
 &lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#40;&lt;/span&gt;trinity:Actor &lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#123;&lt;/span&gt;name:&lt;span style=&quot;color: #ff0000;&quot;&gt;&#039;Carrie-Anne Moss&#039;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;,&lt;/span&gt;
&amp;nbsp;
 &lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#40;&lt;/span&gt;matrix1&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#91;&lt;/span&gt;:ACTS_IN &lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span style=&quot;color: #993333; font-weight: bold;&quot;&gt;ROLE&lt;/span&gt; : &lt;span style=&quot;color: #ff0000;&quot;&gt;&#039;Neo&#039;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#93;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#40;&lt;/span&gt;neo&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;,&lt;/span&gt;
 &lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#40;&lt;/span&gt;matrix2&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#91;&lt;/span&gt;:ACTS_IN &lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span style=&quot;color: #993333; font-weight: bold;&quot;&gt;ROLE&lt;/span&gt; : &lt;span style=&quot;color: #ff0000;&quot;&gt;&#039;Neo&#039;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#93;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#40;&lt;/span&gt;neo&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;,&lt;/span&gt;
 &lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#40;&lt;/span&gt;matrix3&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#91;&lt;/span&gt;:ACTS_IN &lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span style=&quot;color: #993333; font-weight: bold;&quot;&gt;ROLE&lt;/span&gt; : &lt;span style=&quot;color: #ff0000;&quot;&gt;&#039;Neo&#039;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#93;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#40;&lt;/span&gt;neo&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;,&lt;/span&gt;
 &lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#40;&lt;/span&gt;matrix1&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#91;&lt;/span&gt;:ACTS_IN &lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span style=&quot;color: #993333; font-weight: bold;&quot;&gt;ROLE&lt;/span&gt; : &lt;span style=&quot;color: #ff0000;&quot;&gt;&#039;Morpheus&#039;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#93;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#40;&lt;/span&gt;morpheus&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;,&lt;/span&gt;
 &lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#40;&lt;/span&gt;matrix2&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#91;&lt;/span&gt;:ACTS_IN &lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span style=&quot;color: #993333; font-weight: bold;&quot;&gt;ROLE&lt;/span&gt; : &lt;span style=&quot;color: #ff0000;&quot;&gt;&#039;Morpheus&#039;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#93;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#40;&lt;/span&gt;morpheus&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;,&lt;/span&gt;
 &lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#40;&lt;/span&gt;matrix3&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#91;&lt;/span&gt;:ACTS_IN &lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span style=&quot;color: #993333; font-weight: bold;&quot;&gt;ROLE&lt;/span&gt; : &lt;span style=&quot;color: #ff0000;&quot;&gt;&#039;Morpheus&#039;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#93;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#40;&lt;/span&gt;morpheus&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;,&lt;/span&gt;
 &lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#40;&lt;/span&gt;matrix1&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#91;&lt;/span&gt;:ACTS_IN &lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span style=&quot;color: #993333; font-weight: bold;&quot;&gt;ROLE&lt;/span&gt; : &lt;span style=&quot;color: #ff0000;&quot;&gt;&#039;Trinity&#039;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#93;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#40;&lt;/span&gt;trinity&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;,&lt;/span&gt;
 &lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#40;&lt;/span&gt;matrix2&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#91;&lt;/span&gt;:ACTS_IN &lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span style=&quot;color: #993333; font-weight: bold;&quot;&gt;ROLE&lt;/span&gt; : &lt;span style=&quot;color: #ff0000;&quot;&gt;&#039;Trinity&#039;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#93;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#40;&lt;/span&gt;trinity&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;,&lt;/span&gt;
 &lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#40;&lt;/span&gt;matrix3&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#91;&lt;/span&gt;:ACTS_IN &lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span style=&quot;color: #993333; font-weight: bold;&quot;&gt;ROLE&lt;/span&gt; : &lt;span style=&quot;color: #ff0000;&quot;&gt;&#039;Trinity&#039;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#93;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#40;&lt;/span&gt;trinity&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Added 6 labels, created 6 nodes, set 21 properties, created 9 relationships, returned 0 rows in 2791 ms&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And execute a simple query.&lt;/p&gt;

&lt;pre class=&quot;sql&quot; style=&quot;font-family:monospace;&quot;&gt;&lt;span style=&quot;color: #993333; font-weight: bold;&quot;&gt;MATCH&lt;/span&gt; &lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#40;&lt;/span&gt;a:Actor &lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#123;&lt;/span&gt; name:&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;Keanu Reeves&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#41;&lt;/span&gt;
&lt;span style=&quot;color: #993333; font-weight: bold;&quot;&gt;RETURN&lt;/span&gt; a&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;(9:Actor {name:&quot;Keanu Reeves&quot;})&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;Gremlin&lt;/h2&gt;

&lt;p&gt;Again, let&amp;#8217;s start by creating our graph.&lt;/p&gt;

&lt;pre class=&quot;sql&quot; style=&quot;font-family:monospace;&quot;&gt;g &lt;span style=&quot;color: #66cc66;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #993333; font-weight: bold;&quot;&gt;NEW&lt;/span&gt; TinkerGraph&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#41;&lt;/span&gt;;
matrix1 &lt;span style=&quot;color: #66cc66;&quot;&gt;=&lt;/span&gt; g&lt;span style=&quot;color: #66cc66;&quot;&gt;.&lt;/span&gt;addVertex&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#91;&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;_id&amp;quot;&lt;/span&gt;:&lt;span style=&quot;color: #cc66cc;&quot;&gt;603&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;:&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;The Matrix&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;year&amp;quot;&lt;/span&gt;: &lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;1999-03-31&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#93;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#41;&lt;/span&gt;;
matrix2 &lt;span style=&quot;color: #66cc66;&quot;&gt;=&lt;/span&gt; g&lt;span style=&quot;color: #66cc66;&quot;&gt;.&lt;/span&gt;addVertex&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#91;&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;_id&amp;quot;&lt;/span&gt;:&lt;span style=&quot;color: #cc66cc;&quot;&gt;604&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;:&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;The Matrix Reloaded&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;year&amp;quot;&lt;/span&gt;: &lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;2003-05-07&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#93;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#41;&lt;/span&gt;;
matrix3 &lt;span style=&quot;color: #66cc66;&quot;&gt;=&lt;/span&gt; g&lt;span style=&quot;color: #66cc66;&quot;&gt;.&lt;/span&gt;addVertex&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#91;&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;_id&amp;quot;&lt;/span&gt;:&lt;span style=&quot;color: #cc66cc;&quot;&gt;605&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;:&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;The Matrix Revolutions&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;year&amp;quot;&lt;/span&gt;: &lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;2003-10-27&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#93;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#41;&lt;/span&gt;;
&amp;nbsp;
neo &lt;span style=&quot;color: #66cc66;&quot;&gt;=&lt;/span&gt; g&lt;span style=&quot;color: #66cc66;&quot;&gt;.&lt;/span&gt;addVertex&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#91;&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;Keanu Reeves&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#93;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#41;&lt;/span&gt;;
morpheus &lt;span style=&quot;color: #66cc66;&quot;&gt;=&lt;/span&gt; g&lt;span style=&quot;color: #66cc66;&quot;&gt;.&lt;/span&gt;addVertex&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#91;&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;Laurence Fishburne&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#93;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#41;&lt;/span&gt;;
trinity &lt;span style=&quot;color: #66cc66;&quot;&gt;=&lt;/span&gt; g&lt;span style=&quot;color: #66cc66;&quot;&gt;.&lt;/span&gt;addVertex&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#91;&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;Carrie-Anne Moss&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#93;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#41;&lt;/span&gt;;
&amp;nbsp;
neo&lt;span style=&quot;color: #66cc66;&quot;&gt;.&lt;/span&gt;addEdge&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;actsIn&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;,&lt;/span&gt; matrix1&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#41;&lt;/span&gt;; 
neo&lt;span style=&quot;color: #66cc66;&quot;&gt;.&lt;/span&gt;addEdge&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;actsIn&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;,&lt;/span&gt; matrix2&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#41;&lt;/span&gt;; 
neo&lt;span style=&quot;color: #66cc66;&quot;&gt;.&lt;/span&gt;addEdge&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;actsIn&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;,&lt;/span&gt; matrix3&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#41;&lt;/span&gt;; 
morpheus&lt;span style=&quot;color: #66cc66;&quot;&gt;.&lt;/span&gt;addEdge&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;actsIn&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;,&lt;/span&gt; matrix1&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#41;&lt;/span&gt;; 
morpheus&lt;span style=&quot;color: #66cc66;&quot;&gt;.&lt;/span&gt;addEdge&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;actsIn&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;,&lt;/span&gt; matrix2&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#41;&lt;/span&gt;; 
morpheus&lt;span style=&quot;color: #66cc66;&quot;&gt;.&lt;/span&gt;addEdge&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;actsIn&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;,&lt;/span&gt; matrix3&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#41;&lt;/span&gt;; 
trinity&lt;span style=&quot;color: #66cc66;&quot;&gt;.&lt;/span&gt;addEdge&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;actsIn&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;,&lt;/span&gt; matrix1&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#41;&lt;/span&gt;; 
trinity&lt;span style=&quot;color: #66cc66;&quot;&gt;.&lt;/span&gt;addEdge&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;actsIn&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;,&lt;/span&gt; matrix2&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#41;&lt;/span&gt;; 
trinity&lt;span style=&quot;color: #66cc66;&quot;&gt;.&lt;/span&gt;addEdge&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;actsIn&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;,&lt;/span&gt; matrix3&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#41;&lt;/span&gt;;&lt;/pre&gt;

&lt;p&gt;And execute a simple query.&lt;/p&gt;

&lt;pre class=&quot;sql&quot; style=&quot;font-family:monospace;&quot;&gt;g&lt;span style=&quot;color: #66cc66;&quot;&gt;.&lt;/span&gt;V&lt;span style=&quot;color: #66cc66;&quot;&gt;.&lt;/span&gt;has&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&#039;name&#039;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #ff0000;&quot;&gt;&#039;Keanu Reeves&#039;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;.&lt;/span&gt;map&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;gremlin&gt; g.V.has(&#039;name&#039;, &#039;Keanu Reeves&#039;).map
==&gt;{name=Keanu Reeves}
gremlin&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Quite similar to neo4j.&lt;/p&gt;

&lt;h2&gt;SPARQL&lt;/h2&gt;

&lt;p&gt;Let&amp;#8217;s load our example (thanks to &lt;a href=&quot;https://twitter.com/kendall&quot;&gt;Kendall G. Clark&lt;/a&gt;). I used 
&lt;a href=&quot;http://jena.apache.org/documentation/serving_data/&quot;&gt;Fuseki&lt;/a&gt; to run these queries.&lt;/p&gt;

&lt;pre class=&quot;xml&quot; style=&quot;font-family:monospace;&quot;&gt;@prefix :          &lt;span style=&quot;color: #009900;&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;&amp;lt;http:&lt;/span&gt;//example.org/matrix&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt; .
&amp;nbsp;
 :m1 a :Movie; :title &amp;quot;The Matrix&amp;quot;; :year &amp;quot;1999-03-31&amp;quot;.
 :m2 a :Movie; :title &amp;quot;The Matrix Reloaded&amp;quot;; :year &amp;quot;2003-05-07&amp;quot;.
 :m3 a :Movie; :title &amp;quot;The Matrix Revolutions&amp;quot;; :year &amp;quot;2003-10-27&amp;quot;.
&amp;nbsp;
 :neo a :Actor; :name &amp;quot;Keanu Reeves&amp;quot;.
 :morpheus a :Actor; :name &amp;quot;Laurence Fishburne&amp;quot;.
 :trinity a :Actor; :name &amp;quot;Carrie-Anne Moss&amp;quot;.
&amp;nbsp;
 :neo :hasRole [:as &amp;quot;Neo&amp;quot;; :in :m1].
 :neo :hasRole [:as &amp;quot;Neo&amp;quot;; :in :m2].
 :neo :hasRole [:as &amp;quot;Neo&amp;quot;; :in :m2].
 :morpheus :hasRole [:as &amp;quot;Morpheus&amp;quot;; :in :m1].
 :morpheus :hasRole [:as &amp;quot;Morpheus&amp;quot;; :in :m2].
 :morpheus :hasRole [:as &amp;quot;Morpheus&amp;quot;; :in :m2].
 :trinity :hasRole [:as &amp;quot;Trinity&amp;quot;; :in :m1].
 :trinity :hasRole [:as &amp;quot;Trinity&amp;quot;; :in :m2].
 :trinity :hasRole [:as &amp;quot;Trinity&amp;quot;; :in :m2].&lt;/pre&gt;

&lt;p&gt;And finally the SPARQL query.&lt;/p&gt;

&lt;pre class=&quot;sql&quot; style=&quot;font-family:monospace;&quot;&gt;&lt;span style=&quot;color: #993333; font-weight: bold;&quot;&gt;SELECT&lt;/span&gt; ?a &lt;span style=&quot;color: #993333; font-weight: bold;&quot;&gt;WHERE&lt;/span&gt; &lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#123;&lt;/span&gt;
   ?a a &lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;lt;&lt;/span&gt;http:&lt;span style=&quot;color: #66cc66;&quot;&gt;//&lt;/span&gt;example&lt;span style=&quot;color: #66cc66;&quot;&gt;.&lt;/span&gt;org&lt;span style=&quot;color: #66cc66;&quot;&gt;/&lt;/span&gt;matrix&lt;span style=&quot;color: #66cc66;&quot;&gt;/&lt;/span&gt;Actor&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #66cc66;&quot;&gt;.&lt;/span&gt;
   ?a &lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;lt;&lt;/span&gt;http:&lt;span style=&quot;color: #66cc66;&quot;&gt;//&lt;/span&gt;example&lt;span style=&quot;color: #66cc66;&quot;&gt;.&lt;/span&gt;org&lt;span style=&quot;color: #66cc66;&quot;&gt;/&lt;/span&gt;matrix&lt;span style=&quot;color: #66cc66;&quot;&gt;/&lt;/span&gt;name&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;gt;&lt;/span&gt; ?name &lt;span style=&quot;color: #66cc66;&quot;&gt;.&lt;/span&gt;
   &lt;span style=&quot;color: #993333; font-weight: bold;&quot;&gt;FILTER&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#40;&lt;/span&gt;?name  &lt;span style=&quot;color: #66cc66;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;Keanu Reeves&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#41;&lt;/span&gt;
&lt;span style=&quot;color: #66cc66;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;Returning the Keanu Reeves actor instance.&lt;/p&gt;

&lt;pre&gt;-----------------------------------
| a                               |
===================================
| &amp;lt;http://example.org/matrix/neo&amp;gt; |
-----------------------------------&lt;/pre&gt;

&lt;p&gt;SPARQL supports inference (or I must say that OWL, RDFS and the reasoners do), 
but it is easier to define the depth of a search in the graph using neo4j. As for 
Gremlin, it has native support to Groovy and Java. There is a common denominator 
for these three languages, but what makes them really powerful are their unique features. &lt;/p&gt;

&lt;p&gt;I hope you enjoyed, and that this post gave you a quick overview of some of the existing 
graph languages. Make sure you ponder the pros and cons of each server/language, and 
make the best decision for your project. Take a look at &lt;a href=&quot;http://en.wikipedia.org/wiki/Graph_database#APIs_and_Graph_Query.2FProgramming_Languages&quot;&gt;other graph query languages&lt;/a&gt; too.&lt;/p&gt;

&lt;p&gt;Happy hacking!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;This post has been updated as suggested by &lt;a href=&quot;https://twitter.com/kendall&quot;&gt;@kendall&lt;/a&gt; (Thank you!).
You can check the diff at &lt;a href=&quot;https://github.com/kinow/kinoshita.eti.br/commits/master/site/_content/posts/2014-09-09_cypher-gremlin-and-sparql-graph-dialects.html&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
</description>
</item>
<item>
    <title>Strings transliteration in Java with Apache Commons Lang</title>
    <pubDate>Sat, 09 Aug 2014 00:00:00 +1200</pubDate>
    <link>/2014/08/09/strings-transliteration-in-java-with-apache-commons-lang.html</link>
    <dc:creator>Bruno P. Kinoshita</dc:creator>
    <description>&lt;p&gt;&lt;a href=&quot;http://rosalind.info&quot;&gt;Rosalind&lt;/a&gt; is a website with a curated set of exercices for bioinformatics, organized hierarchily. 
In some of these examples you are required to replace characters (nucleotides) by other characters. It is a rather common 
task for developers, like when you need to replace special characters in user&amp;#8217;s names.&lt;/p&gt;

&lt;p&gt;There are different ways of describing it, such as translate, replace, or &lt;strong&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Transliteration&quot;&gt;transliterate&lt;/a&gt;&lt;/strong&gt;. The latter being my favorite definition. &lt;/p&gt;

&lt;p&gt;In Python I know that there are several different ways of transliterating strings 
&amp;#91;&lt;a href=&quot;https://pypi.python.org/pypi/transliterate&quot;&gt;1&lt;/a&gt;&amp;#93;&amp;#91;&lt;a href=&quot;http://blog.lebowtech.com/blog/programming/python/transliterate-with-python.html&quot;&gt;2&lt;/a&gt;&amp;#93;. But in Java I always ended up using a Map or a Enum and writing my own method in some &lt;em&gt;Util&lt;/em&gt; class for that.&lt;/p&gt;

&lt;p&gt;Turns out that &lt;a href=&quot;http://commons.apache.org&quot;&gt;Apache Commons Lang&lt;/a&gt;, which I use in most of my projects, 
provided this feature. What means that I will be able to reduce the length of my code, what also means 
less code to be tested (and one less place to look for bugs).&lt;/p&gt;

&lt;pre class=&quot;java&quot; style=&quot;font-family:monospace;&quot;&gt;&lt;a href=&quot;http://www.google.com/search?hl=en&amp;amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+string&quot;&gt;&lt;span style=&quot;color: #003399;&quot;&gt;String&lt;/span&gt;&lt;/a&gt; s &lt;span style=&quot;color: #339933;&quot;&gt;=&lt;/span&gt; StringUtils.&lt;span style=&quot;color: #006633;&quot;&gt;replaceChars&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;quot;ATGCATGC&amp;quot;&lt;/span&gt;, &lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;quot;GTCA&amp;quot;&lt;/span&gt;, &lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;quot;CAGT&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt; &lt;span style=&quot;color: #666666; font-style: italic;&quot;&gt;// &amp;quot;TACGTACG&amp;quot;&lt;/span&gt;
&lt;a href=&quot;http://www.google.com/search?hl=en&amp;amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+system&quot;&gt;&lt;span style=&quot;color: #003399;&quot;&gt;System&lt;/span&gt;&lt;/a&gt;.&lt;span style=&quot;color: #006633;&quot;&gt;out&lt;/span&gt;.&lt;span style=&quot;color: #006633;&quot;&gt;println&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;s&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;What the code above does, is replace G by C, T by A, C by G and A by T. This process is part of finding the 
&lt;a href=&quot;http://www.bioinformatics.org/sms/rev_comp.html&quot;&gt;DNA reverse complement&lt;/a&gt;. But you can also use this for replacing 
special characters, spaces by _, and so it goes.&lt;/p&gt;

&lt;p&gt;Happy hacking!&lt;/p&gt;
</description>
</item>
<item>
    <title>Treemapping Jenkins Extension Points with R</title>
    <pubDate>Mon, 19 May 2014 00:00:00 +1200</pubDate>
    <link>/2014/05/19/treemapping-jenkins-extension-points-with-r.html</link>
    <dc:creator>Bruno P. Kinoshita</dc:creator>
    <description>&lt;p&gt;I have been playing with R and its packages for some time, and decided to study it a 
bit harder. Last week I started reading the &lt;a href=&quot;http://adv-r.had.co.nz/&quot;&gt;Advanced R Programming&lt;/a&gt; 
by Hadley Wickham. &lt;/p&gt;

&lt;p&gt;One of the first chapters talks about the basic data structures in R. In order to 
get my feet wet I thought about a simple example: &lt;a href=&quot;http://en.wikipedia.org/wiki/Treemapping&quot;&gt;treemapping&lt;/a&gt; 
Jenkins extension points. &lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;/2014/05/19/treemapping-jenkins-extension-points-with-r/extension_points.png&quot;&gt;&lt;img src=&quot;/2014/05/19/treemapping-jenkins-extension-points-with-r/extension_points.png&quot; width=&quot;600px&quot; alt=&quot;Treemap graph&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is a &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Extension+points&quot;&gt;Wiki page with the extension points in Jenkins&lt;/a&gt; (what parts of Jenkins can be customized) 
and its implementations. That page is generated by a &lt;a href=&quot;https://ci.jenkins-ci.org/view/Infrastructure/job/infra_extension-indexer/&quot;&gt;Jenkins job&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;That job outputs a JSON file that contains each available extension points, as well as 
an array with its implementations. The R code below will produce two vectors, one with the 
count of implementations of each extension point, and the other with the class name.&lt;/p&gt;

&lt;pre class=&quot;r&quot; style=&quot;font-family:monospace;&quot;&gt;nExtensionPoints &amp;lt;- length(extensionPointsJson$extensionPoints)
numberOfImplementations &amp;lt;- vector(length = nExtensionPoints)
namesOfTheExtensionPoints &amp;lt;- vector(length = nExtensionPoints)
for (i in seq_along(extensionPoints)) {
  extensionName = extensionPoints[[i]]$className
  lastIndexOfDot = regexpr(&amp;quot;\\.[^\\.]*$&amp;quot;, extensionName)
  namesOfTheExtensionPoints[[i]] = substr(extensionName, lastIndexOfDot[1]+1, nchar(extensionName))
  numberOfImplementations[[i]] = length(extensionPoints[[i]]$implementations)
  print(paste(namesOfTheExtensionPoints[[i]], &amp;quot; -&amp;gt; &amp;quot;, numberOfImplementations[[i]]))
}&lt;/pre&gt;

&lt;p&gt;For creating the treemap I used the &lt;strong&gt;&lt;a href=&quot;http://flowingdata.com/2010/02/11/an-easy-way-to-make-a-treemap/&quot;&gt;portfolio package&lt;/a&gt;&lt;/strong&gt;, and the &lt;code&gt;map.market&lt;/code&gt; 
function. The structures previously created and the next snippet of code are all that is 
needed to create the treemap of the Jenkins extension points.&lt;/p&gt;

&lt;pre class=&quot;r&quot; style=&quot;font-family:monospace;&quot;&gt;map.market(id=seq_along(extensionPoints), area=numberOfImplementations, group=namesOfTheExtensionPoints, color=numberOfImplementations, main=&amp;quot;Jenkins Extension Points&amp;quot;)&lt;/pre&gt;

&lt;p&gt;You can also use the &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/R+Plugin&quot;&gt;Jenkins R Plug-in&lt;/a&gt; to produce this graph, 
as in this &lt;a href=&quot;http://builds.tupilabs.com/job/backend-extension-points-treemap/2/&quot;&gt;sample job&lt;/a&gt;. 
You can get the complete script in this &lt;a href=&quot;https://gist.github.com/kinow/d5a2221c32dce3aa1076&quot;&gt;gist&lt;/a&gt;, or just 
copy it here.&lt;/p&gt;

&lt;pre class=&quot;r&quot; style=&quot;font-family:monospace;&quot;&gt;library(&#039;rjson&#039;)
library(&#039;portfolio&#039;)
&amp;nbsp;
download.file(url=&amp;quot;https://ci.jenkins-ci.org/view/Infrastructure/job/infra_extension-indexer/ws/extension-points.json&amp;quot;, destfile=&amp;quot;extension-points.json&amp;quot;, method=&amp;quot;wget&amp;quot;)
extensionPointsJson &amp;lt;- fromJSON(paste(readLines(&amp;quot;extension-points.json&amp;quot;), collapse=&amp;quot;&amp;quot;))
extensionPoints &amp;lt;- extensionPointsJson$extensionPoints
nExtensionPoints &amp;lt;- length(extensionPointsJson$extensionPoints)
numberOfImplementations &amp;lt;- vector(length = nExtensionPoints)
namesOfTheExtensionPoints &amp;lt;- vector(length = nExtensionPoints)
for (i in seq_along(extensionPoints)) {
  extensionName = extensionPoints[[i]]$className
  lastIndexOfDot = regexpr(&amp;quot;\\.[^\\.]*$&amp;quot;, extensionName)
  namesOfTheExtensionPoints[[i]] = substr(extensionName, lastIndexOfDot[1]+1, nchar(extensionName))
  numberOfImplementations[[i]] = length(extensionPoints[[i]]$implementations)
  print(paste(namesOfTheExtensionPoints[[i]], &amp;quot; -&amp;gt; &amp;quot;, numberOfImplementations[[i]]))
}
png(filename=&amp;quot;extension-points.png&amp;quot;, width=2048, height=1536, units=&amp;quot;px&amp;quot;, bg=&amp;quot;white&amp;quot;)
map.market(id=seq_along(extensionPoints), area=numberOfImplementations, group=namesOfTheExtensionPoints, color=numberOfImplementations, main=&amp;quot;Jenkins Extension Points&amp;quot;)
dev.off()&lt;/pre&gt;
</description>
</item>
<item>
    <title>Writing a custom SchemaSpy command for Laravel 4</title>
    <pubDate>Tue, 11 Feb 2014 00:00:00 +1300</pubDate>
    <link>/2014/02/11/writing-a-custom-schemaspy-command-for-laravel-4.html</link>
    <dc:creator>Bruno P. Kinoshita</dc:creator>
    <description>&lt;p&gt;This week I had to write my first custom command for &lt;a href=&quot;http://laravel.com/&quot;&gt;Laravel 4&lt;/a&gt;. 
In &lt;a href=&quot;http://nestor-qa.org/&quot;&gt;Nestor-QA&lt;/a&gt;, &lt;a href=&quot;https://github.com/tooh&quot;&gt;Peter&lt;/a&gt; and I thought it would be useful to have 
the database schema being automatically generated with 
&lt;a href=&quot;http://schemaspy.sourceforge.net/&quot;&gt;SchemaSpy&lt;/a&gt; in our &lt;a href=&quot;http://builds.tupilabs.com/view/Nestor-QA/&quot;&gt;Jenkins box&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;http://laravel.com/docs/artisan&quot;&gt;Artisan&lt;/a&gt; this task is much simpler than I thought. 
The following command creates the &lt;code&gt;schemaspy&lt;/code&gt; command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;php artisan command:make SchemaSpyCommand --command=schemaspy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will create the file &lt;code&gt;app/commands/SchemaSpyCommand.php&lt;/code&gt;. And all I had to do was 
just fill in the options and write the exec command as the &lt;a href=&quot;http://laravel.com/docs/commands&quot;&gt;Laravel 4 docs&lt;/a&gt; explain. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$this-&amp;gt;info(&#039;Creating SchemaSpy&#039;);

$jar = $this-&amp;gt;option(&quot;jar&quot;);
$dbtype = $this-&amp;gt;option(&quot;dbtype&quot;);
$output = $this-&amp;gt;option(&quot;output&quot;);

$commandLine = sprintf(&quot;java -jar %s -u none -t %s -o %s&quot;, $jar, $dbtype, $output);

$this-&amp;gt;info(sprintf(&quot;Command line: [%s]&quot;, $commandLine));

exec($commandLine);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;#8217;s how my final command looks. Now the final step is integrate it into the application by adding the line below to 
&lt;code&gt;app/start/artisan.php&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Artisan::add(new SchemaSpyCommand);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that&amp;#8217;s it, running &lt;code&gt;php artisan schemaspy --jar=/opt/schemaspy/schemaSpy_5.0.0.jar 
--dbtype=app/database/sqlite.properties --output=database-schema&lt;/code&gt; 
creates the database schema docs in the &lt;code&gt;database-schema&lt;/code&gt; directory. &lt;/p&gt;

&lt;p&gt;Check this &lt;a href=&quot;https://gist.github.com/kinow/8936667&quot;&gt;gist&lt;/a&gt; for the final code.&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;
</description>
</item>
<item>
    <title>Missing menus in new installation of TestLink 1.9.8</title>
    <pubDate>Sun, 27 Oct 2013 00:00:00 +1300</pubDate>
    <link>/2013/10/27/missing-menus-in-new-installation-of-testlink.html</link>
    <dc:creator>Bruno P. Kinoshita</dc:creator>
    <description>&lt;p&gt;I recently installed TestLink 1.9.8 and noticed that the menus and some other parts 
of the UI we missing. Looking at &lt;code&gt;/var/log/testlink/userlog1.log&lt;/code&gt; (the location 
may change depending on your settings) I realized that there was something wrong 
with my PHP installation. There were log messages like the below.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;include_once(ADORecordSet_ext_empty.class.php): failed to open stream: No such file or directory - in /home/kinow/php/workspace/testlink-1.9.8/lib/functions/common.php - Line 92
[13/Sep/18 12:51:09][WARNING][2o0h173pdgg5fjqh1pukr83og2][GUI]
E_WARNING
include_once(): Failed opening &#039;ADORecordSet_ext_empty.class.php&#039; for inclusion (include_path=&#039;.:/usr/share/php:/usr/share/pear:.:/home/kinow/php/workspace/testlink-1.9.8/lib/functions/:/home/kinow/php/workspace/testlink-1.9.8/lib/issuet
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I found a post in a forum (but unfortunately I forgot to save the link) that suggested 
these ADORecordSet were being caused by the module &lt;strong&gt;php5-adodb&lt;/strong&gt;. Removing the module, and 
cleaning the templates cache directory (&lt;code&gt;$TESTLINK&lt;em&gt;HOME/gui/templates&lt;/em&gt;c/*&lt;/code&gt;) 
fixed the issue for me.&lt;/p&gt;

&lt;p&gt;Hope that helps.
Happy testing!&lt;/p&gt;
</description>
</item>
</channel>
</rss>